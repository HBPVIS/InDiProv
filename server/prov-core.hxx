// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___PROV_CORE_HXX
#define CXX___PROV_CORE_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace prov
{
  class Entity;
  class Activity;
  class Generation;
  class Usage;
  class Communication;
  class Start;
  class End;
  class Invalidation;
  class Derivation;
  class Revision;
  class Quotation;
  class PrimarySource;
  class Agent;
  class Person;
  class Organization;
  class SoftwareAgent;
  class Attribution;
  class Association;
  class Delegation;
  class Influence;
  class Bundle;
  class BundleConstructor;
  class Specialization;
  class Alternate;
  class Collection;
  class EmptyCollection;
  class Membership;
  class Plan;
  class InternationalizedString;
  class IDRef;
  class Document;
  class Other;
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "xhtml-datatypes-1.hxx"

#include "xml.hxx"

namespace prov
{
  class Entity: public ::xml_schema::type
  {
    public:
    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // location
    //
    typedef ::xml_schema::simple_type location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // value
    //
    typedef ::xml_schema::simple_type value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Entity ();

    Entity (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Entity (const Entity& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Entity*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Entity&
    operator= (const Entity& x);

    virtual 
    ~Entity ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    label_sequence label_;
    location_sequence location_;
    type_sequence type_;
    value_optional value_;
    id_optional id_;
  };

  class Activity: public ::xml_schema::type
  {
    public:
    // startTime
    //
    typedef ::xml_schema::date_time startTime_type;
    typedef ::xsd::cxx::tree::optional< startTime_type > startTime_optional;
    typedef ::xsd::cxx::tree::traits< startTime_type, char > startTime_traits;

    const startTime_optional&
    startTime () const;

    startTime_optional&
    startTime ();

    void
    startTime (const startTime_type& x);

    void
    startTime (const startTime_optional& x);

    void
    startTime (::std::auto_ptr< startTime_type > p);

    // endTime
    //
    typedef ::xml_schema::date_time endTime_type;
    typedef ::xsd::cxx::tree::optional< endTime_type > endTime_optional;
    typedef ::xsd::cxx::tree::traits< endTime_type, char > endTime_traits;

    const endTime_optional&
    endTime () const;

    endTime_optional&
    endTime ();

    void
    endTime (const endTime_type& x);

    void
    endTime (const endTime_optional& x);

    void
    endTime (::std::auto_ptr< endTime_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // location
    //
    typedef ::xml_schema::simple_type location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Activity ();

    Activity (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Activity (const Activity& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Activity*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Activity&
    operator= (const Activity& x);

    virtual 
    ~Activity ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    startTime_optional startTime_;
    endTime_optional endTime_;
    label_sequence label_;
    location_sequence location_;
    type_sequence type_;
    id_optional id_;
  };

  class Generation: public ::xml_schema::type
  {
    public:
    // entity
    //
    typedef ::prov::IDRef entity_type;
    typedef ::xsd::cxx::tree::traits< entity_type, char > entity_traits;

    const entity_type&
    entity () const;

    entity_type&
    entity ();

    void
    entity (const entity_type& x);

    void
    entity (::std::auto_ptr< entity_type > p);

    // activity
    //
    typedef ::prov::IDRef activity_type;
    typedef ::xsd::cxx::tree::optional< activity_type > activity_optional;
    typedef ::xsd::cxx::tree::traits< activity_type, char > activity_traits;

    const activity_optional&
    activity () const;

    activity_optional&
    activity ();

    void
    activity (const activity_type& x);

    void
    activity (const activity_optional& x);

    void
    activity (::std::auto_ptr< activity_type > p);

    // time
    //
    typedef ::xml_schema::date_time time_type;
    typedef ::xsd::cxx::tree::optional< time_type > time_optional;
    typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

    const time_optional&
    time () const;

    time_optional&
    time ();

    void
    time (const time_type& x);

    void
    time (const time_optional& x);

    void
    time (::std::auto_ptr< time_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // location
    //
    typedef ::xml_schema::simple_type location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // role
    //
    typedef ::xml_schema::simple_type role_type;
    typedef ::xsd::cxx::tree::sequence< role_type > role_sequence;
    typedef role_sequence::iterator role_iterator;
    typedef role_sequence::const_iterator role_const_iterator;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_sequence&
    role () const;

    role_sequence&
    role ();

    void
    role (const role_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Generation (const entity_type&);

    Generation (::std::auto_ptr< entity_type >);

    Generation (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Generation (const Generation& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Generation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Generation&
    operator= (const Generation& x);

    virtual 
    ~Generation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< entity_type > entity_;
    activity_optional activity_;
    time_optional time_;
    label_sequence label_;
    location_sequence location_;
    role_sequence role_;
    type_sequence type_;
    id_optional id_;
  };

  class Usage: public ::xml_schema::type
  {
    public:
    // activity
    //
    typedef ::prov::IDRef activity_type;
    typedef ::xsd::cxx::tree::traits< activity_type, char > activity_traits;

    const activity_type&
    activity () const;

    activity_type&
    activity ();

    void
    activity (const activity_type& x);

    void
    activity (::std::auto_ptr< activity_type > p);

    // entity
    //
    typedef ::prov::IDRef entity_type;
    typedef ::xsd::cxx::tree::optional< entity_type > entity_optional;
    typedef ::xsd::cxx::tree::traits< entity_type, char > entity_traits;

    const entity_optional&
    entity () const;

    entity_optional&
    entity ();

    void
    entity (const entity_type& x);

    void
    entity (const entity_optional& x);

    void
    entity (::std::auto_ptr< entity_type > p);

    // time
    //
    typedef ::xml_schema::date_time time_type;
    typedef ::xsd::cxx::tree::optional< time_type > time_optional;
    typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

    const time_optional&
    time () const;

    time_optional&
    time ();

    void
    time (const time_type& x);

    void
    time (const time_optional& x);

    void
    time (::std::auto_ptr< time_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // location
    //
    typedef ::xml_schema::simple_type location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // role
    //
    typedef ::xml_schema::simple_type role_type;
    typedef ::xsd::cxx::tree::sequence< role_type > role_sequence;
    typedef role_sequence::iterator role_iterator;
    typedef role_sequence::const_iterator role_const_iterator;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_sequence&
    role () const;

    role_sequence&
    role ();

    void
    role (const role_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Usage (const activity_type&);

    Usage (::std::auto_ptr< activity_type >);

    Usage (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Usage (const Usage& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Usage*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Usage&
    operator= (const Usage& x);

    virtual 
    ~Usage ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< activity_type > activity_;
    entity_optional entity_;
    time_optional time_;
    label_sequence label_;
    location_sequence location_;
    role_sequence role_;
    type_sequence type_;
    id_optional id_;
  };

  class Communication: public ::xml_schema::type
  {
    public:
    // informed
    //
    typedef ::prov::IDRef informed_type;
    typedef ::xsd::cxx::tree::traits< informed_type, char > informed_traits;

    const informed_type&
    informed () const;

    informed_type&
    informed ();

    void
    informed (const informed_type& x);

    void
    informed (::std::auto_ptr< informed_type > p);

    // informant
    //
    typedef ::prov::IDRef informant_type;
    typedef ::xsd::cxx::tree::traits< informant_type, char > informant_traits;

    const informant_type&
    informant () const;

    informant_type&
    informant ();

    void
    informant (const informant_type& x);

    void
    informant (::std::auto_ptr< informant_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Communication (const informed_type&,
                   const informant_type&);

    Communication (::std::auto_ptr< informed_type >,
                   ::std::auto_ptr< informant_type >);

    Communication (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    Communication (const Communication& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual Communication*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Communication&
    operator= (const Communication& x);

    virtual 
    ~Communication ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< informed_type > informed_;
    ::xsd::cxx::tree::one< informant_type > informant_;
    label_sequence label_;
    type_sequence type_;
    id_optional id_;
  };

  class Start: public ::xml_schema::type
  {
    public:
    // activity
    //
    typedef ::prov::IDRef activity_type;
    typedef ::xsd::cxx::tree::traits< activity_type, char > activity_traits;

    const activity_type&
    activity () const;

    activity_type&
    activity ();

    void
    activity (const activity_type& x);

    void
    activity (::std::auto_ptr< activity_type > p);

    // trigger
    //
    typedef ::prov::IDRef trigger_type;
    typedef ::xsd::cxx::tree::optional< trigger_type > trigger_optional;
    typedef ::xsd::cxx::tree::traits< trigger_type, char > trigger_traits;

    const trigger_optional&
    trigger () const;

    trigger_optional&
    trigger ();

    void
    trigger (const trigger_type& x);

    void
    trigger (const trigger_optional& x);

    void
    trigger (::std::auto_ptr< trigger_type > p);

    // starter
    //
    typedef ::prov::IDRef starter_type;
    typedef ::xsd::cxx::tree::optional< starter_type > starter_optional;
    typedef ::xsd::cxx::tree::traits< starter_type, char > starter_traits;

    const starter_optional&
    starter () const;

    starter_optional&
    starter ();

    void
    starter (const starter_type& x);

    void
    starter (const starter_optional& x);

    void
    starter (::std::auto_ptr< starter_type > p);

    // time
    //
    typedef ::xml_schema::date_time time_type;
    typedef ::xsd::cxx::tree::optional< time_type > time_optional;
    typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

    const time_optional&
    time () const;

    time_optional&
    time ();

    void
    time (const time_type& x);

    void
    time (const time_optional& x);

    void
    time (::std::auto_ptr< time_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // location
    //
    typedef ::xml_schema::simple_type location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // role
    //
    typedef ::xml_schema::simple_type role_type;
    typedef ::xsd::cxx::tree::sequence< role_type > role_sequence;
    typedef role_sequence::iterator role_iterator;
    typedef role_sequence::const_iterator role_const_iterator;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_sequence&
    role () const;

    role_sequence&
    role ();

    void
    role (const role_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Start (const activity_type&);

    Start (::std::auto_ptr< activity_type >);

    Start (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Start (const Start& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Start*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Start&
    operator= (const Start& x);

    virtual 
    ~Start ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< activity_type > activity_;
    trigger_optional trigger_;
    starter_optional starter_;
    time_optional time_;
    label_sequence label_;
    location_sequence location_;
    role_sequence role_;
    type_sequence type_;
    id_optional id_;
  };

  class End: public ::xml_schema::type
  {
    public:
    // activity
    //
    typedef ::prov::IDRef activity_type;
    typedef ::xsd::cxx::tree::traits< activity_type, char > activity_traits;

    const activity_type&
    activity () const;

    activity_type&
    activity ();

    void
    activity (const activity_type& x);

    void
    activity (::std::auto_ptr< activity_type > p);

    // trigger
    //
    typedef ::prov::IDRef trigger_type;
    typedef ::xsd::cxx::tree::optional< trigger_type > trigger_optional;
    typedef ::xsd::cxx::tree::traits< trigger_type, char > trigger_traits;

    const trigger_optional&
    trigger () const;

    trigger_optional&
    trigger ();

    void
    trigger (const trigger_type& x);

    void
    trigger (const trigger_optional& x);

    void
    trigger (::std::auto_ptr< trigger_type > p);

    // ender
    //
    typedef ::prov::IDRef ender_type;
    typedef ::xsd::cxx::tree::optional< ender_type > ender_optional;
    typedef ::xsd::cxx::tree::traits< ender_type, char > ender_traits;

    const ender_optional&
    ender () const;

    ender_optional&
    ender ();

    void
    ender (const ender_type& x);

    void
    ender (const ender_optional& x);

    void
    ender (::std::auto_ptr< ender_type > p);

    // time
    //
    typedef ::xml_schema::date_time time_type;
    typedef ::xsd::cxx::tree::optional< time_type > time_optional;
    typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

    const time_optional&
    time () const;

    time_optional&
    time ();

    void
    time (const time_type& x);

    void
    time (const time_optional& x);

    void
    time (::std::auto_ptr< time_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // location
    //
    typedef ::xml_schema::simple_type location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // role
    //
    typedef ::xml_schema::simple_type role_type;
    typedef ::xsd::cxx::tree::sequence< role_type > role_sequence;
    typedef role_sequence::iterator role_iterator;
    typedef role_sequence::const_iterator role_const_iterator;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_sequence&
    role () const;

    role_sequence&
    role ();

    void
    role (const role_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    End (const activity_type&);

    End (::std::auto_ptr< activity_type >);

    End (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    End (const End& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual End*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    End&
    operator= (const End& x);

    virtual 
    ~End ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< activity_type > activity_;
    trigger_optional trigger_;
    ender_optional ender_;
    time_optional time_;
    label_sequence label_;
    location_sequence location_;
    role_sequence role_;
    type_sequence type_;
    id_optional id_;
  };

  class Invalidation: public ::xml_schema::type
  {
    public:
    // entity
    //
    typedef ::prov::IDRef entity_type;
    typedef ::xsd::cxx::tree::traits< entity_type, char > entity_traits;

    const entity_type&
    entity () const;

    entity_type&
    entity ();

    void
    entity (const entity_type& x);

    void
    entity (::std::auto_ptr< entity_type > p);

    // activity
    //
    typedef ::prov::IDRef activity_type;
    typedef ::xsd::cxx::tree::optional< activity_type > activity_optional;
    typedef ::xsd::cxx::tree::traits< activity_type, char > activity_traits;

    const activity_optional&
    activity () const;

    activity_optional&
    activity ();

    void
    activity (const activity_type& x);

    void
    activity (const activity_optional& x);

    void
    activity (::std::auto_ptr< activity_type > p);

    // time
    //
    typedef ::xml_schema::date_time time_type;
    typedef ::xsd::cxx::tree::optional< time_type > time_optional;
    typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

    const time_optional&
    time () const;

    time_optional&
    time ();

    void
    time (const time_type& x);

    void
    time (const time_optional& x);

    void
    time (::std::auto_ptr< time_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // location
    //
    typedef ::xml_schema::simple_type location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // role
    //
    typedef ::xml_schema::simple_type role_type;
    typedef ::xsd::cxx::tree::sequence< role_type > role_sequence;
    typedef role_sequence::iterator role_iterator;
    typedef role_sequence::const_iterator role_const_iterator;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_sequence&
    role () const;

    role_sequence&
    role ();

    void
    role (const role_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Invalidation (const entity_type&);

    Invalidation (::std::auto_ptr< entity_type >);

    Invalidation (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    Invalidation (const Invalidation& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual Invalidation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Invalidation&
    operator= (const Invalidation& x);

    virtual 
    ~Invalidation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< entity_type > entity_;
    activity_optional activity_;
    time_optional time_;
    label_sequence label_;
    location_sequence location_;
    role_sequence role_;
    type_sequence type_;
    id_optional id_;
  };

  class Derivation: public ::xml_schema::type
  {
    public:
    // generatedEntity
    //
    typedef ::prov::IDRef generatedEntity_type;
    typedef ::xsd::cxx::tree::traits< generatedEntity_type, char > generatedEntity_traits;

    const generatedEntity_type&
    generatedEntity () const;

    generatedEntity_type&
    generatedEntity ();

    void
    generatedEntity (const generatedEntity_type& x);

    void
    generatedEntity (::std::auto_ptr< generatedEntity_type > p);

    // usedEntity
    //
    typedef ::prov::IDRef usedEntity_type;
    typedef ::xsd::cxx::tree::traits< usedEntity_type, char > usedEntity_traits;

    const usedEntity_type&
    usedEntity () const;

    usedEntity_type&
    usedEntity ();

    void
    usedEntity (const usedEntity_type& x);

    void
    usedEntity (::std::auto_ptr< usedEntity_type > p);

    // activity
    //
    typedef ::prov::IDRef activity_type;
    typedef ::xsd::cxx::tree::optional< activity_type > activity_optional;
    typedef ::xsd::cxx::tree::traits< activity_type, char > activity_traits;

    const activity_optional&
    activity () const;

    activity_optional&
    activity ();

    void
    activity (const activity_type& x);

    void
    activity (const activity_optional& x);

    void
    activity (::std::auto_ptr< activity_type > p);

    // generation
    //
    typedef ::prov::IDRef generation_type;
    typedef ::xsd::cxx::tree::optional< generation_type > generation_optional;
    typedef ::xsd::cxx::tree::traits< generation_type, char > generation_traits;

    const generation_optional&
    generation () const;

    generation_optional&
    generation ();

    void
    generation (const generation_type& x);

    void
    generation (const generation_optional& x);

    void
    generation (::std::auto_ptr< generation_type > p);

    // usage
    //
    typedef ::prov::IDRef usage_type;
    typedef ::xsd::cxx::tree::optional< usage_type > usage_optional;
    typedef ::xsd::cxx::tree::traits< usage_type, char > usage_traits;

    const usage_optional&
    usage () const;

    usage_optional&
    usage ();

    void
    usage (const usage_type& x);

    void
    usage (const usage_optional& x);

    void
    usage (::std::auto_ptr< usage_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Derivation (const generatedEntity_type&,
                const usedEntity_type&);

    Derivation (::std::auto_ptr< generatedEntity_type >,
                ::std::auto_ptr< usedEntity_type >);

    Derivation (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Derivation (const Derivation& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Derivation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Derivation&
    operator= (const Derivation& x);

    virtual 
    ~Derivation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< generatedEntity_type > generatedEntity_;
    ::xsd::cxx::tree::one< usedEntity_type > usedEntity_;
    activity_optional activity_;
    generation_optional generation_;
    usage_optional usage_;
    label_sequence label_;
    type_sequence type_;
    id_optional id_;
  };

  class Revision: public ::prov::Derivation
  {
    public:
    // Constructors.
    //
    Revision (const generatedEntity_type&,
              const usedEntity_type&);

    Revision (::std::auto_ptr< generatedEntity_type >,
              ::std::auto_ptr< usedEntity_type >);

    Revision (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Revision (const Revision& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Revision*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Revision ();
  };

  class Quotation: public ::prov::Derivation
  {
    public:
    // Constructors.
    //
    Quotation (const generatedEntity_type&,
               const usedEntity_type&);

    Quotation (::std::auto_ptr< generatedEntity_type >,
               ::std::auto_ptr< usedEntity_type >);

    Quotation (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Quotation (const Quotation& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Quotation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Quotation ();
  };

  class PrimarySource: public ::prov::Derivation
  {
    public:
    // Constructors.
    //
    PrimarySource (const generatedEntity_type&,
                   const usedEntity_type&);

    PrimarySource (::std::auto_ptr< generatedEntity_type >,
                   ::std::auto_ptr< usedEntity_type >);

    PrimarySource (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    PrimarySource (const PrimarySource& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual PrimarySource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~PrimarySource ();
  };

  class Agent: public ::xml_schema::type
  {
    public:
    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // location
    //
    typedef ::xml_schema::simple_type location_type;
    typedef ::xsd::cxx::tree::sequence< location_type > location_sequence;
    typedef location_sequence::iterator location_iterator;
    typedef location_sequence::const_iterator location_const_iterator;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_sequence&
    location () const;

    location_sequence&
    location ();

    void
    location (const location_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Agent ();

    Agent (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Agent (const Agent& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Agent*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Agent&
    operator= (const Agent& x);

    virtual 
    ~Agent ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    label_sequence label_;
    location_sequence location_;
    type_sequence type_;
    id_optional id_;
  };

  class Person: public ::prov::Agent
  {
    public:
    // Constructors.
    //
    Person ();

    Person (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Person (const Person& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Person*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Person ();
  };

  class Organization: public ::prov::Agent
  {
    public:
    // Constructors.
    //
    Organization ();

    Organization (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    Organization (const Organization& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual Organization*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Organization ();
  };

  class SoftwareAgent: public ::prov::Agent
  {
    public:
    // Constructors.
    //
    SoftwareAgent ();

    SoftwareAgent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    SoftwareAgent (const SoftwareAgent& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual SoftwareAgent*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~SoftwareAgent ();
  };

  class Attribution: public ::xml_schema::type
  {
    public:
    // entity
    //
    typedef ::prov::IDRef entity_type;
    typedef ::xsd::cxx::tree::traits< entity_type, char > entity_traits;

    const entity_type&
    entity () const;

    entity_type&
    entity ();

    void
    entity (const entity_type& x);

    void
    entity (::std::auto_ptr< entity_type > p);

    // agent
    //
    typedef ::prov::IDRef agent_type;
    typedef ::xsd::cxx::tree::traits< agent_type, char > agent_traits;

    const agent_type&
    agent () const;

    agent_type&
    agent ();

    void
    agent (const agent_type& x);

    void
    agent (::std::auto_ptr< agent_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Attribution (const entity_type&,
                 const agent_type&);

    Attribution (::std::auto_ptr< entity_type >,
                 ::std::auto_ptr< agent_type >);

    Attribution (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Attribution (const Attribution& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Attribution*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Attribution&
    operator= (const Attribution& x);

    virtual 
    ~Attribution ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< entity_type > entity_;
    ::xsd::cxx::tree::one< agent_type > agent_;
    label_sequence label_;
    type_sequence type_;
    id_optional id_;
  };

  class Association: public ::xml_schema::type
  {
    public:
    // activity
    //
    typedef ::prov::IDRef activity_type;
    typedef ::xsd::cxx::tree::traits< activity_type, char > activity_traits;

    const activity_type&
    activity () const;

    activity_type&
    activity ();

    void
    activity (const activity_type& x);

    void
    activity (::std::auto_ptr< activity_type > p);

    // agent
    //
    typedef ::prov::IDRef agent_type;
    typedef ::xsd::cxx::tree::optional< agent_type > agent_optional;
    typedef ::xsd::cxx::tree::traits< agent_type, char > agent_traits;

    const agent_optional&
    agent () const;

    agent_optional&
    agent ();

    void
    agent (const agent_type& x);

    void
    agent (const agent_optional& x);

    void
    agent (::std::auto_ptr< agent_type > p);

    // plan
    //
    typedef ::prov::IDRef plan_type;
    typedef ::xsd::cxx::tree::optional< plan_type > plan_optional;
    typedef ::xsd::cxx::tree::traits< plan_type, char > plan_traits;

    const plan_optional&
    plan () const;

    plan_optional&
    plan ();

    void
    plan (const plan_type& x);

    void
    plan (const plan_optional& x);

    void
    plan (::std::auto_ptr< plan_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // role
    //
    typedef ::xml_schema::simple_type role_type;
    typedef ::xsd::cxx::tree::sequence< role_type > role_sequence;
    typedef role_sequence::iterator role_iterator;
    typedef role_sequence::const_iterator role_const_iterator;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_sequence&
    role () const;

    role_sequence&
    role ();

    void
    role (const role_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Association (const activity_type&);

    Association (::std::auto_ptr< activity_type >);

    Association (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Association (const Association& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Association*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Association&
    operator= (const Association& x);

    virtual 
    ~Association ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< activity_type > activity_;
    agent_optional agent_;
    plan_optional plan_;
    label_sequence label_;
    role_sequence role_;
    type_sequence type_;
    id_optional id_;
  };

  class Delegation: public ::xml_schema::type
  {
    public:
    // delegate
    //
    typedef ::prov::IDRef delegate_type;
    typedef ::xsd::cxx::tree::traits< delegate_type, char > delegate_traits;

    const delegate_type&
    delegate () const;

    delegate_type&
    delegate ();

    void
    delegate (const delegate_type& x);

    void
    delegate (::std::auto_ptr< delegate_type > p);

    // responsible
    //
    typedef ::prov::IDRef responsible_type;
    typedef ::xsd::cxx::tree::traits< responsible_type, char > responsible_traits;

    const responsible_type&
    responsible () const;

    responsible_type&
    responsible ();

    void
    responsible (const responsible_type& x);

    void
    responsible (::std::auto_ptr< responsible_type > p);

    // activity
    //
    typedef ::prov::IDRef activity_type;
    typedef ::xsd::cxx::tree::optional< activity_type > activity_optional;
    typedef ::xsd::cxx::tree::traits< activity_type, char > activity_traits;

    const activity_optional&
    activity () const;

    activity_optional&
    activity ();

    void
    activity (const activity_type& x);

    void
    activity (const activity_optional& x);

    void
    activity (::std::auto_ptr< activity_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Delegation (const delegate_type&,
                const responsible_type&);

    Delegation (::std::auto_ptr< delegate_type >,
                ::std::auto_ptr< responsible_type >);

    Delegation (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Delegation (const Delegation& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Delegation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Delegation&
    operator= (const Delegation& x);

    virtual 
    ~Delegation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< delegate_type > delegate_;
    ::xsd::cxx::tree::one< responsible_type > responsible_;
    activity_optional activity_;
    label_sequence label_;
    type_sequence type_;
    id_optional id_;
  };

  class Influence: public ::xml_schema::type
  {
    public:
    // influencee
    //
    typedef ::prov::IDRef influencee_type;
    typedef ::xsd::cxx::tree::traits< influencee_type, char > influencee_traits;

    const influencee_type&
    influencee () const;

    influencee_type&
    influencee ();

    void
    influencee (const influencee_type& x);

    void
    influencee (::std::auto_ptr< influencee_type > p);

    // influencer
    //
    typedef ::prov::IDRef influencer_type;
    typedef ::xsd::cxx::tree::traits< influencer_type, char > influencer_traits;

    const influencer_type&
    influencer () const;

    influencer_type&
    influencer ();

    void
    influencer (const influencer_type& x);

    void
    influencer (::std::auto_ptr< influencer_type > p);

    // label
    //
    typedef ::prov::InternationalizedString label_type;
    typedef ::xsd::cxx::tree::sequence< label_type > label_sequence;
    typedef label_sequence::iterator label_iterator;
    typedef label_sequence::const_iterator label_const_iterator;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_sequence&
    label () const;

    label_sequence&
    label ();

    void
    label (const label_sequence& s);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::sequence< type_type > type_sequence;
    typedef type_sequence::iterator type_iterator;
    typedef type_sequence::const_iterator type_const_iterator;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_sequence&
    type () const;

    type_sequence&
    type ();

    void
    type (const type_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    Influence (const influencee_type&,
               const influencer_type&);

    Influence (::std::auto_ptr< influencee_type >,
               ::std::auto_ptr< influencer_type >);

    Influence (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Influence (const Influence& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Influence*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Influence&
    operator= (const Influence& x);

    virtual 
    ~Influence ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< influencee_type > influencee_;
    ::xsd::cxx::tree::one< influencer_type > influencer_;
    label_sequence label_;
    type_sequence type_;
    id_optional id_;
  };

  class Bundle: public ::prov::Entity
  {
    public:
    // Constructors.
    //
    Bundle ();

    Bundle (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Bundle (const Bundle& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Bundle*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Bundle ();
  };

  class BundleConstructor: public ::xml_schema::type
  {
    public:
    // entity
    //
    typedef ::prov::Entity entity_type;
    typedef ::xsd::cxx::tree::sequence< entity_type > entity_sequence;
    typedef entity_sequence::iterator entity_iterator;
    typedef entity_sequence::const_iterator entity_const_iterator;
    typedef ::xsd::cxx::tree::traits< entity_type, char > entity_traits;

    const entity_sequence&
    entity () const;

    entity_sequence&
    entity ();

    void
    entity (const entity_sequence& s);

    // activity
    //
    typedef ::prov::Activity activity_type;
    typedef ::xsd::cxx::tree::sequence< activity_type > activity_sequence;
    typedef activity_sequence::iterator activity_iterator;
    typedef activity_sequence::const_iterator activity_const_iterator;
    typedef ::xsd::cxx::tree::traits< activity_type, char > activity_traits;

    const activity_sequence&
    activity () const;

    activity_sequence&
    activity ();

    void
    activity (const activity_sequence& s);

    // wasGeneratedBy
    //
    typedef ::prov::Generation wasGeneratedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasGeneratedBy_type > wasGeneratedBy_sequence;
    typedef wasGeneratedBy_sequence::iterator wasGeneratedBy_iterator;
    typedef wasGeneratedBy_sequence::const_iterator wasGeneratedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasGeneratedBy_type, char > wasGeneratedBy_traits;

    const wasGeneratedBy_sequence&
    wasGeneratedBy () const;

    wasGeneratedBy_sequence&
    wasGeneratedBy ();

    void
    wasGeneratedBy (const wasGeneratedBy_sequence& s);

    // used
    //
    typedef ::prov::Usage used_type;
    typedef ::xsd::cxx::tree::sequence< used_type > used_sequence;
    typedef used_sequence::iterator used_iterator;
    typedef used_sequence::const_iterator used_const_iterator;
    typedef ::xsd::cxx::tree::traits< used_type, char > used_traits;

    const used_sequence&
    used () const;

    used_sequence&
    used ();

    void
    used (const used_sequence& s);

    // wasInformedBy
    //
    typedef ::prov::Communication wasInformedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasInformedBy_type > wasInformedBy_sequence;
    typedef wasInformedBy_sequence::iterator wasInformedBy_iterator;
    typedef wasInformedBy_sequence::const_iterator wasInformedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasInformedBy_type, char > wasInformedBy_traits;

    const wasInformedBy_sequence&
    wasInformedBy () const;

    wasInformedBy_sequence&
    wasInformedBy ();

    void
    wasInformedBy (const wasInformedBy_sequence& s);

    // wasStartedBy
    //
    typedef ::prov::Start wasStartedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasStartedBy_type > wasStartedBy_sequence;
    typedef wasStartedBy_sequence::iterator wasStartedBy_iterator;
    typedef wasStartedBy_sequence::const_iterator wasStartedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasStartedBy_type, char > wasStartedBy_traits;

    const wasStartedBy_sequence&
    wasStartedBy () const;

    wasStartedBy_sequence&
    wasStartedBy ();

    void
    wasStartedBy (const wasStartedBy_sequence& s);

    // wasEndedBy
    //
    typedef ::prov::End wasEndedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasEndedBy_type > wasEndedBy_sequence;
    typedef wasEndedBy_sequence::iterator wasEndedBy_iterator;
    typedef wasEndedBy_sequence::const_iterator wasEndedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasEndedBy_type, char > wasEndedBy_traits;

    const wasEndedBy_sequence&
    wasEndedBy () const;

    wasEndedBy_sequence&
    wasEndedBy ();

    void
    wasEndedBy (const wasEndedBy_sequence& s);

    // wasInvalidatedBy
    //
    typedef ::prov::Invalidation wasInvalidatedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasInvalidatedBy_type > wasInvalidatedBy_sequence;
    typedef wasInvalidatedBy_sequence::iterator wasInvalidatedBy_iterator;
    typedef wasInvalidatedBy_sequence::const_iterator wasInvalidatedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasInvalidatedBy_type, char > wasInvalidatedBy_traits;

    const wasInvalidatedBy_sequence&
    wasInvalidatedBy () const;

    wasInvalidatedBy_sequence&
    wasInvalidatedBy ();

    void
    wasInvalidatedBy (const wasInvalidatedBy_sequence& s);

    // wasDerivedFrom
    //
    typedef ::prov::Derivation wasDerivedFrom_type;
    typedef ::xsd::cxx::tree::sequence< wasDerivedFrom_type > wasDerivedFrom_sequence;
    typedef wasDerivedFrom_sequence::iterator wasDerivedFrom_iterator;
    typedef wasDerivedFrom_sequence::const_iterator wasDerivedFrom_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasDerivedFrom_type, char > wasDerivedFrom_traits;

    const wasDerivedFrom_sequence&
    wasDerivedFrom () const;

    wasDerivedFrom_sequence&
    wasDerivedFrom ();

    void
    wasDerivedFrom (const wasDerivedFrom_sequence& s);

    // wasRevisionOf
    //
    typedef ::prov::Revision wasRevisionOf_type;
    typedef ::xsd::cxx::tree::sequence< wasRevisionOf_type > wasRevisionOf_sequence;
    typedef wasRevisionOf_sequence::iterator wasRevisionOf_iterator;
    typedef wasRevisionOf_sequence::const_iterator wasRevisionOf_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasRevisionOf_type, char > wasRevisionOf_traits;

    const wasRevisionOf_sequence&
    wasRevisionOf () const;

    wasRevisionOf_sequence&
    wasRevisionOf ();

    void
    wasRevisionOf (const wasRevisionOf_sequence& s);

    // wasQuotedFrom
    //
    typedef ::prov::Quotation wasQuotedFrom_type;
    typedef ::xsd::cxx::tree::sequence< wasQuotedFrom_type > wasQuotedFrom_sequence;
    typedef wasQuotedFrom_sequence::iterator wasQuotedFrom_iterator;
    typedef wasQuotedFrom_sequence::const_iterator wasQuotedFrom_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasQuotedFrom_type, char > wasQuotedFrom_traits;

    const wasQuotedFrom_sequence&
    wasQuotedFrom () const;

    wasQuotedFrom_sequence&
    wasQuotedFrom ();

    void
    wasQuotedFrom (const wasQuotedFrom_sequence& s);

    // hadPrimarySource
    //
    typedef ::prov::PrimarySource hadPrimarySource_type;
    typedef ::xsd::cxx::tree::sequence< hadPrimarySource_type > hadPrimarySource_sequence;
    typedef hadPrimarySource_sequence::iterator hadPrimarySource_iterator;
    typedef hadPrimarySource_sequence::const_iterator hadPrimarySource_const_iterator;
    typedef ::xsd::cxx::tree::traits< hadPrimarySource_type, char > hadPrimarySource_traits;

    const hadPrimarySource_sequence&
    hadPrimarySource () const;

    hadPrimarySource_sequence&
    hadPrimarySource ();

    void
    hadPrimarySource (const hadPrimarySource_sequence& s);

    // agent
    //
    typedef ::prov::Agent agent_type;
    typedef ::xsd::cxx::tree::sequence< agent_type > agent_sequence;
    typedef agent_sequence::iterator agent_iterator;
    typedef agent_sequence::const_iterator agent_const_iterator;
    typedef ::xsd::cxx::tree::traits< agent_type, char > agent_traits;

    const agent_sequence&
    agent () const;

    agent_sequence&
    agent ();

    void
    agent (const agent_sequence& s);

    // person
    //
    typedef ::prov::Person person_type;
    typedef ::xsd::cxx::tree::sequence< person_type > person_sequence;
    typedef person_sequence::iterator person_iterator;
    typedef person_sequence::const_iterator person_const_iterator;
    typedef ::xsd::cxx::tree::traits< person_type, char > person_traits;

    const person_sequence&
    person () const;

    person_sequence&
    person ();

    void
    person (const person_sequence& s);

    // organization
    //
    typedef ::prov::Organization organization_type;
    typedef ::xsd::cxx::tree::sequence< organization_type > organization_sequence;
    typedef organization_sequence::iterator organization_iterator;
    typedef organization_sequence::const_iterator organization_const_iterator;
    typedef ::xsd::cxx::tree::traits< organization_type, char > organization_traits;

    const organization_sequence&
    organization () const;

    organization_sequence&
    organization ();

    void
    organization (const organization_sequence& s);

    // softwareAgent
    //
    typedef ::prov::SoftwareAgent softwareAgent_type;
    typedef ::xsd::cxx::tree::sequence< softwareAgent_type > softwareAgent_sequence;
    typedef softwareAgent_sequence::iterator softwareAgent_iterator;
    typedef softwareAgent_sequence::const_iterator softwareAgent_const_iterator;
    typedef ::xsd::cxx::tree::traits< softwareAgent_type, char > softwareAgent_traits;

    const softwareAgent_sequence&
    softwareAgent () const;

    softwareAgent_sequence&
    softwareAgent ();

    void
    softwareAgent (const softwareAgent_sequence& s);

    // wasAttributedTo
    //
    typedef ::prov::Attribution wasAttributedTo_type;
    typedef ::xsd::cxx::tree::sequence< wasAttributedTo_type > wasAttributedTo_sequence;
    typedef wasAttributedTo_sequence::iterator wasAttributedTo_iterator;
    typedef wasAttributedTo_sequence::const_iterator wasAttributedTo_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasAttributedTo_type, char > wasAttributedTo_traits;

    const wasAttributedTo_sequence&
    wasAttributedTo () const;

    wasAttributedTo_sequence&
    wasAttributedTo ();

    void
    wasAttributedTo (const wasAttributedTo_sequence& s);

    // wasAssociatedWith
    //
    typedef ::prov::Association wasAssociatedWith_type;
    typedef ::xsd::cxx::tree::sequence< wasAssociatedWith_type > wasAssociatedWith_sequence;
    typedef wasAssociatedWith_sequence::iterator wasAssociatedWith_iterator;
    typedef wasAssociatedWith_sequence::const_iterator wasAssociatedWith_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasAssociatedWith_type, char > wasAssociatedWith_traits;

    const wasAssociatedWith_sequence&
    wasAssociatedWith () const;

    wasAssociatedWith_sequence&
    wasAssociatedWith ();

    void
    wasAssociatedWith (const wasAssociatedWith_sequence& s);

    // actedOnBehalfOf
    //
    typedef ::prov::Delegation actedOnBehalfOf_type;
    typedef ::xsd::cxx::tree::sequence< actedOnBehalfOf_type > actedOnBehalfOf_sequence;
    typedef actedOnBehalfOf_sequence::iterator actedOnBehalfOf_iterator;
    typedef actedOnBehalfOf_sequence::const_iterator actedOnBehalfOf_const_iterator;
    typedef ::xsd::cxx::tree::traits< actedOnBehalfOf_type, char > actedOnBehalfOf_traits;

    const actedOnBehalfOf_sequence&
    actedOnBehalfOf () const;

    actedOnBehalfOf_sequence&
    actedOnBehalfOf ();

    void
    actedOnBehalfOf (const actedOnBehalfOf_sequence& s);

    // wasInfluencedBy
    //
    typedef ::prov::Influence wasInfluencedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasInfluencedBy_type > wasInfluencedBy_sequence;
    typedef wasInfluencedBy_sequence::iterator wasInfluencedBy_iterator;
    typedef wasInfluencedBy_sequence::const_iterator wasInfluencedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasInfluencedBy_type, char > wasInfluencedBy_traits;

    const wasInfluencedBy_sequence&
    wasInfluencedBy () const;

    wasInfluencedBy_sequence&
    wasInfluencedBy ();

    void
    wasInfluencedBy (const wasInfluencedBy_sequence& s);

    // bundle
    //
    typedef ::prov::Bundle bundle_type;
    typedef ::xsd::cxx::tree::sequence< bundle_type > bundle_sequence;
    typedef bundle_sequence::iterator bundle_iterator;
    typedef bundle_sequence::const_iterator bundle_const_iterator;
    typedef ::xsd::cxx::tree::traits< bundle_type, char > bundle_traits;

    const bundle_sequence&
    bundle () const;

    bundle_sequence&
    bundle ();

    void
    bundle (const bundle_sequence& s);

    // specializationOf
    //
    typedef ::prov::Specialization specializationOf_type;
    typedef ::xsd::cxx::tree::sequence< specializationOf_type > specializationOf_sequence;
    typedef specializationOf_sequence::iterator specializationOf_iterator;
    typedef specializationOf_sequence::const_iterator specializationOf_const_iterator;
    typedef ::xsd::cxx::tree::traits< specializationOf_type, char > specializationOf_traits;

    const specializationOf_sequence&
    specializationOf () const;

    specializationOf_sequence&
    specializationOf ();

    void
    specializationOf (const specializationOf_sequence& s);

    // alternateOf
    //
    typedef ::prov::Alternate alternateOf_type;
    typedef ::xsd::cxx::tree::sequence< alternateOf_type > alternateOf_sequence;
    typedef alternateOf_sequence::iterator alternateOf_iterator;
    typedef alternateOf_sequence::const_iterator alternateOf_const_iterator;
    typedef ::xsd::cxx::tree::traits< alternateOf_type, char > alternateOf_traits;

    const alternateOf_sequence&
    alternateOf () const;

    alternateOf_sequence&
    alternateOf ();

    void
    alternateOf (const alternateOf_sequence& s);

    // collection
    //
    typedef ::prov::Collection collection_type;
    typedef ::xsd::cxx::tree::sequence< collection_type > collection_sequence;
    typedef collection_sequence::iterator collection_iterator;
    typedef collection_sequence::const_iterator collection_const_iterator;
    typedef ::xsd::cxx::tree::traits< collection_type, char > collection_traits;

    const collection_sequence&
    collection () const;

    collection_sequence&
    collection ();

    void
    collection (const collection_sequence& s);

    // emptyCollection
    //
    typedef ::prov::EmptyCollection emptyCollection_type;
    typedef ::xsd::cxx::tree::sequence< emptyCollection_type > emptyCollection_sequence;
    typedef emptyCollection_sequence::iterator emptyCollection_iterator;
    typedef emptyCollection_sequence::const_iterator emptyCollection_const_iterator;
    typedef ::xsd::cxx::tree::traits< emptyCollection_type, char > emptyCollection_traits;

    const emptyCollection_sequence&
    emptyCollection () const;

    emptyCollection_sequence&
    emptyCollection ();

    void
    emptyCollection (const emptyCollection_sequence& s);

    // hadMember
    //
    typedef ::prov::Membership hadMember_type;
    typedef ::xsd::cxx::tree::sequence< hadMember_type > hadMember_sequence;
    typedef hadMember_sequence::iterator hadMember_iterator;
    typedef hadMember_sequence::const_iterator hadMember_const_iterator;
    typedef ::xsd::cxx::tree::traits< hadMember_type, char > hadMember_traits;

    const hadMember_sequence&
    hadMember () const;

    hadMember_sequence&
    hadMember ();

    void
    hadMember (const hadMember_sequence& s);

    // plan
    //
    typedef ::prov::Plan plan_type;
    typedef ::xsd::cxx::tree::sequence< plan_type > plan_sequence;
    typedef plan_sequence::iterator plan_iterator;
    typedef plan_sequence::const_iterator plan_const_iterator;
    typedef ::xsd::cxx::tree::traits< plan_type, char > plan_traits;

    const plan_sequence&
    plan () const;

    plan_sequence&
    plan ();

    void
    plan (const plan_sequence& s);

    // other
    //
    typedef ::prov::Other other_type;
    typedef ::xsd::cxx::tree::sequence< other_type > other_sequence;
    typedef other_sequence::iterator other_iterator;
    typedef other_sequence::const_iterator other_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_type, char > other_traits;

    const other_sequence&
    other () const;

    other_sequence&
    other ();

    void
    other (const other_sequence& s);

    // internalElement
    //
    typedef ::xml_schema::type internalElement_type;
    typedef ::xsd::cxx::tree::sequence< internalElement_type > internalElement_sequence;
    typedef internalElement_sequence::iterator internalElement_iterator;
    typedef internalElement_sequence::const_iterator internalElement_const_iterator;
    typedef ::xsd::cxx::tree::traits< internalElement_type, char > internalElement_traits;

    const internalElement_sequence&
    internalElement () const;

    internalElement_sequence&
    internalElement ();

    void
    internalElement (const internalElement_sequence& s);

    // id
    //
    typedef ::xml_schema::qname id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // Constructors.
    //
    BundleConstructor ();

    BundleConstructor (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    BundleConstructor (const BundleConstructor& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual BundleConstructor*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    BundleConstructor&
    operator= (const BundleConstructor& x);

    virtual 
    ~BundleConstructor ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    entity_sequence entity_;
    activity_sequence activity_;
    wasGeneratedBy_sequence wasGeneratedBy_;
    used_sequence used_;
    wasInformedBy_sequence wasInformedBy_;
    wasStartedBy_sequence wasStartedBy_;
    wasEndedBy_sequence wasEndedBy_;
    wasInvalidatedBy_sequence wasInvalidatedBy_;
    wasDerivedFrom_sequence wasDerivedFrom_;
    wasRevisionOf_sequence wasRevisionOf_;
    wasQuotedFrom_sequence wasQuotedFrom_;
    hadPrimarySource_sequence hadPrimarySource_;
    agent_sequence agent_;
    person_sequence person_;
    organization_sequence organization_;
    softwareAgent_sequence softwareAgent_;
    wasAttributedTo_sequence wasAttributedTo_;
    wasAssociatedWith_sequence wasAssociatedWith_;
    actedOnBehalfOf_sequence actedOnBehalfOf_;
    wasInfluencedBy_sequence wasInfluencedBy_;
    bundle_sequence bundle_;
    specializationOf_sequence specializationOf_;
    alternateOf_sequence alternateOf_;
    collection_sequence collection_;
    emptyCollection_sequence emptyCollection_;
    hadMember_sequence hadMember_;
    plan_sequence plan_;
    other_sequence other_;
    internalElement_sequence internalElement_;
    id_optional id_;
  };

  class Specialization: public ::xml_schema::type
  {
    public:
    // specificEntity
    //
    typedef ::prov::IDRef specificEntity_type;
    typedef ::xsd::cxx::tree::traits< specificEntity_type, char > specificEntity_traits;

    const specificEntity_type&
    specificEntity () const;

    specificEntity_type&
    specificEntity ();

    void
    specificEntity (const specificEntity_type& x);

    void
    specificEntity (::std::auto_ptr< specificEntity_type > p);

    // generalEntity
    //
    typedef ::prov::IDRef generalEntity_type;
    typedef ::xsd::cxx::tree::traits< generalEntity_type, char > generalEntity_traits;

    const generalEntity_type&
    generalEntity () const;

    generalEntity_type&
    generalEntity ();

    void
    generalEntity (const generalEntity_type& x);

    void
    generalEntity (::std::auto_ptr< generalEntity_type > p);

    // Constructors.
    //
    Specialization (const specificEntity_type&,
                    const generalEntity_type&);

    Specialization (::std::auto_ptr< specificEntity_type >,
                    ::std::auto_ptr< generalEntity_type >);

    Specialization (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    Specialization (const Specialization& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual Specialization*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Specialization&
    operator= (const Specialization& x);

    virtual 
    ~Specialization ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< specificEntity_type > specificEntity_;
    ::xsd::cxx::tree::one< generalEntity_type > generalEntity_;
  };

  class Alternate: public ::xml_schema::type
  {
    public:
    // alternate1
    //
    typedef ::prov::IDRef alternate1_type;
    typedef ::xsd::cxx::tree::traits< alternate1_type, char > alternate1_traits;

    const alternate1_type&
    alternate1 () const;

    alternate1_type&
    alternate1 ();

    void
    alternate1 (const alternate1_type& x);

    void
    alternate1 (::std::auto_ptr< alternate1_type > p);

    // alternate2
    //
    typedef ::prov::IDRef alternate2_type;
    typedef ::xsd::cxx::tree::traits< alternate2_type, char > alternate2_traits;

    const alternate2_type&
    alternate2 () const;

    alternate2_type&
    alternate2 ();

    void
    alternate2 (const alternate2_type& x);

    void
    alternate2 (::std::auto_ptr< alternate2_type > p);

    // Constructors.
    //
    Alternate (const alternate1_type&,
               const alternate2_type&);

    Alternate (::std::auto_ptr< alternate1_type >,
               ::std::auto_ptr< alternate2_type >);

    Alternate (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Alternate (const Alternate& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Alternate*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Alternate&
    operator= (const Alternate& x);

    virtual 
    ~Alternate ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< alternate1_type > alternate1_;
    ::xsd::cxx::tree::one< alternate2_type > alternate2_;
  };

  class Collection: public ::prov::Entity
  {
    public:
    // Constructors.
    //
    Collection ();

    Collection (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Collection (const Collection& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Collection*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Collection ();
  };

  class EmptyCollection: public ::prov::Collection
  {
    public:
    // Constructors.
    //
    EmptyCollection ();

    EmptyCollection (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    EmptyCollection (const EmptyCollection& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual EmptyCollection*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~EmptyCollection ();
  };

  class Membership: public ::xml_schema::type
  {
    public:
    // collection
    //
    typedef ::prov::IDRef collection_type;
    typedef ::xsd::cxx::tree::traits< collection_type, char > collection_traits;

    const collection_type&
    collection () const;

    collection_type&
    collection ();

    void
    collection (const collection_type& x);

    void
    collection (::std::auto_ptr< collection_type > p);

    // entity
    //
    typedef ::prov::IDRef entity_type;
    typedef ::xsd::cxx::tree::sequence< entity_type > entity_sequence;
    typedef entity_sequence::iterator entity_iterator;
    typedef entity_sequence::const_iterator entity_const_iterator;
    typedef ::xsd::cxx::tree::traits< entity_type, char > entity_traits;

    const entity_sequence&
    entity () const;

    entity_sequence&
    entity ();

    void
    entity (const entity_sequence& s);

    // Constructors.
    //
    Membership (const collection_type&);

    Membership (::std::auto_ptr< collection_type >);

    Membership (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Membership (const Membership& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Membership*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Membership&
    operator= (const Membership& x);

    virtual 
    ~Membership ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< collection_type > collection_;
    entity_sequence entity_;
  };

  class Plan: public ::prov::Entity
  {
    public:
    // Constructors.
    //
    Plan ();

    Plan (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Plan (const Plan& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Plan*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Plan ();
  };

  class InternationalizedString: public ::xml_schema::string
  {
    public:
    // lang
    //
    typedef ::xml_schema::language lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::auto_ptr< lang_type > p);

    // Constructors.
    //
    InternationalizedString ();

    InternationalizedString (const char*);

    InternationalizedString (const ::std::string&);

    InternationalizedString (const ::xml_schema::string&);

    InternationalizedString (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    InternationalizedString (const InternationalizedString& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual InternationalizedString*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    InternationalizedString&
    operator= (const InternationalizedString& x);

    virtual 
    ~InternationalizedString ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    lang_optional lang_;
  };

  class IDRef: public ::xml_schema::type
  {
    public:
    // ref
    //
    typedef ::xml_schema::qname ref_type;
    typedef ::xsd::cxx::tree::traits< ref_type, char > ref_traits;

    const ref_type&
    ref () const;

    ref_type&
    ref ();

    void
    ref (const ref_type& x);

    void
    ref (::std::auto_ptr< ref_type > p);

    // Constructors.
    //
    IDRef (const ref_type&);

    IDRef (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    IDRef (const IDRef& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual IDRef*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    IDRef&
    operator= (const IDRef& x);

    virtual 
    ~IDRef ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< ref_type > ref_;
  };

  class Document: public ::xml_schema::type
  {
    public:
    // entity
    //
    typedef ::prov::Entity entity_type;
    typedef ::xsd::cxx::tree::sequence< entity_type > entity_sequence;
    typedef entity_sequence::iterator entity_iterator;
    typedef entity_sequence::const_iterator entity_const_iterator;
    typedef ::xsd::cxx::tree::traits< entity_type, char > entity_traits;

    const entity_sequence&
    entity () const;

    entity_sequence&
    entity ();

    void
    entity (const entity_sequence& s);

    // activity
    //
    typedef ::prov::Activity activity_type;
    typedef ::xsd::cxx::tree::sequence< activity_type > activity_sequence;
    typedef activity_sequence::iterator activity_iterator;
    typedef activity_sequence::const_iterator activity_const_iterator;
    typedef ::xsd::cxx::tree::traits< activity_type, char > activity_traits;

    const activity_sequence&
    activity () const;

    activity_sequence&
    activity ();

    void
    activity (const activity_sequence& s);

    // wasGeneratedBy
    //
    typedef ::prov::Generation wasGeneratedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasGeneratedBy_type > wasGeneratedBy_sequence;
    typedef wasGeneratedBy_sequence::iterator wasGeneratedBy_iterator;
    typedef wasGeneratedBy_sequence::const_iterator wasGeneratedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasGeneratedBy_type, char > wasGeneratedBy_traits;

    const wasGeneratedBy_sequence&
    wasGeneratedBy () const;

    wasGeneratedBy_sequence&
    wasGeneratedBy ();

    void
    wasGeneratedBy (const wasGeneratedBy_sequence& s);

    // used
    //
    typedef ::prov::Usage used_type;
    typedef ::xsd::cxx::tree::sequence< used_type > used_sequence;
    typedef used_sequence::iterator used_iterator;
    typedef used_sequence::const_iterator used_const_iterator;
    typedef ::xsd::cxx::tree::traits< used_type, char > used_traits;

    const used_sequence&
    used () const;

    used_sequence&
    used ();

    void
    used (const used_sequence& s);

    // wasInformedBy
    //
    typedef ::prov::Communication wasInformedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasInformedBy_type > wasInformedBy_sequence;
    typedef wasInformedBy_sequence::iterator wasInformedBy_iterator;
    typedef wasInformedBy_sequence::const_iterator wasInformedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasInformedBy_type, char > wasInformedBy_traits;

    const wasInformedBy_sequence&
    wasInformedBy () const;

    wasInformedBy_sequence&
    wasInformedBy ();

    void
    wasInformedBy (const wasInformedBy_sequence& s);

    // wasStartedBy
    //
    typedef ::prov::Start wasStartedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasStartedBy_type > wasStartedBy_sequence;
    typedef wasStartedBy_sequence::iterator wasStartedBy_iterator;
    typedef wasStartedBy_sequence::const_iterator wasStartedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasStartedBy_type, char > wasStartedBy_traits;

    const wasStartedBy_sequence&
    wasStartedBy () const;

    wasStartedBy_sequence&
    wasStartedBy ();

    void
    wasStartedBy (const wasStartedBy_sequence& s);

    // wasEndedBy
    //
    typedef ::prov::End wasEndedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasEndedBy_type > wasEndedBy_sequence;
    typedef wasEndedBy_sequence::iterator wasEndedBy_iterator;
    typedef wasEndedBy_sequence::const_iterator wasEndedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasEndedBy_type, char > wasEndedBy_traits;

    const wasEndedBy_sequence&
    wasEndedBy () const;

    wasEndedBy_sequence&
    wasEndedBy ();

    void
    wasEndedBy (const wasEndedBy_sequence& s);

    // wasInvalidatedBy
    //
    typedef ::prov::Invalidation wasInvalidatedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasInvalidatedBy_type > wasInvalidatedBy_sequence;
    typedef wasInvalidatedBy_sequence::iterator wasInvalidatedBy_iterator;
    typedef wasInvalidatedBy_sequence::const_iterator wasInvalidatedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasInvalidatedBy_type, char > wasInvalidatedBy_traits;

    const wasInvalidatedBy_sequence&
    wasInvalidatedBy () const;

    wasInvalidatedBy_sequence&
    wasInvalidatedBy ();

    void
    wasInvalidatedBy (const wasInvalidatedBy_sequence& s);

    // wasDerivedFrom
    //
    typedef ::prov::Derivation wasDerivedFrom_type;
    typedef ::xsd::cxx::tree::sequence< wasDerivedFrom_type > wasDerivedFrom_sequence;
    typedef wasDerivedFrom_sequence::iterator wasDerivedFrom_iterator;
    typedef wasDerivedFrom_sequence::const_iterator wasDerivedFrom_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasDerivedFrom_type, char > wasDerivedFrom_traits;

    const wasDerivedFrom_sequence&
    wasDerivedFrom () const;

    wasDerivedFrom_sequence&
    wasDerivedFrom ();

    void
    wasDerivedFrom (const wasDerivedFrom_sequence& s);

    // wasRevisionOf
    //
    typedef ::prov::Revision wasRevisionOf_type;
    typedef ::xsd::cxx::tree::sequence< wasRevisionOf_type > wasRevisionOf_sequence;
    typedef wasRevisionOf_sequence::iterator wasRevisionOf_iterator;
    typedef wasRevisionOf_sequence::const_iterator wasRevisionOf_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasRevisionOf_type, char > wasRevisionOf_traits;

    const wasRevisionOf_sequence&
    wasRevisionOf () const;

    wasRevisionOf_sequence&
    wasRevisionOf ();

    void
    wasRevisionOf (const wasRevisionOf_sequence& s);

    // wasQuotedFrom
    //
    typedef ::prov::Quotation wasQuotedFrom_type;
    typedef ::xsd::cxx::tree::sequence< wasQuotedFrom_type > wasQuotedFrom_sequence;
    typedef wasQuotedFrom_sequence::iterator wasQuotedFrom_iterator;
    typedef wasQuotedFrom_sequence::const_iterator wasQuotedFrom_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasQuotedFrom_type, char > wasQuotedFrom_traits;

    const wasQuotedFrom_sequence&
    wasQuotedFrom () const;

    wasQuotedFrom_sequence&
    wasQuotedFrom ();

    void
    wasQuotedFrom (const wasQuotedFrom_sequence& s);

    // hadPrimarySource
    //
    typedef ::prov::PrimarySource hadPrimarySource_type;
    typedef ::xsd::cxx::tree::sequence< hadPrimarySource_type > hadPrimarySource_sequence;
    typedef hadPrimarySource_sequence::iterator hadPrimarySource_iterator;
    typedef hadPrimarySource_sequence::const_iterator hadPrimarySource_const_iterator;
    typedef ::xsd::cxx::tree::traits< hadPrimarySource_type, char > hadPrimarySource_traits;

    const hadPrimarySource_sequence&
    hadPrimarySource () const;

    hadPrimarySource_sequence&
    hadPrimarySource ();

    void
    hadPrimarySource (const hadPrimarySource_sequence& s);

    // agent
    //
    typedef ::prov::Agent agent_type;
    typedef ::xsd::cxx::tree::sequence< agent_type > agent_sequence;
    typedef agent_sequence::iterator agent_iterator;
    typedef agent_sequence::const_iterator agent_const_iterator;
    typedef ::xsd::cxx::tree::traits< agent_type, char > agent_traits;

    const agent_sequence&
    agent () const;

    agent_sequence&
    agent ();

    void
    agent (const agent_sequence& s);

    // person
    //
    typedef ::prov::Person person_type;
    typedef ::xsd::cxx::tree::sequence< person_type > person_sequence;
    typedef person_sequence::iterator person_iterator;
    typedef person_sequence::const_iterator person_const_iterator;
    typedef ::xsd::cxx::tree::traits< person_type, char > person_traits;

    const person_sequence&
    person () const;

    person_sequence&
    person ();

    void
    person (const person_sequence& s);

    // organization
    //
    typedef ::prov::Organization organization_type;
    typedef ::xsd::cxx::tree::sequence< organization_type > organization_sequence;
    typedef organization_sequence::iterator organization_iterator;
    typedef organization_sequence::const_iterator organization_const_iterator;
    typedef ::xsd::cxx::tree::traits< organization_type, char > organization_traits;

    const organization_sequence&
    organization () const;

    organization_sequence&
    organization ();

    void
    organization (const organization_sequence& s);

    // softwareAgent
    //
    typedef ::prov::SoftwareAgent softwareAgent_type;
    typedef ::xsd::cxx::tree::sequence< softwareAgent_type > softwareAgent_sequence;
    typedef softwareAgent_sequence::iterator softwareAgent_iterator;
    typedef softwareAgent_sequence::const_iterator softwareAgent_const_iterator;
    typedef ::xsd::cxx::tree::traits< softwareAgent_type, char > softwareAgent_traits;

    const softwareAgent_sequence&
    softwareAgent () const;

    softwareAgent_sequence&
    softwareAgent ();

    void
    softwareAgent (const softwareAgent_sequence& s);

    // wasAttributedTo
    //
    typedef ::prov::Attribution wasAttributedTo_type;
    typedef ::xsd::cxx::tree::sequence< wasAttributedTo_type > wasAttributedTo_sequence;
    typedef wasAttributedTo_sequence::iterator wasAttributedTo_iterator;
    typedef wasAttributedTo_sequence::const_iterator wasAttributedTo_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasAttributedTo_type, char > wasAttributedTo_traits;

    const wasAttributedTo_sequence&
    wasAttributedTo () const;

    wasAttributedTo_sequence&
    wasAttributedTo ();

    void
    wasAttributedTo (const wasAttributedTo_sequence& s);

    // wasAssociatedWith
    //
    typedef ::prov::Association wasAssociatedWith_type;
    typedef ::xsd::cxx::tree::sequence< wasAssociatedWith_type > wasAssociatedWith_sequence;
    typedef wasAssociatedWith_sequence::iterator wasAssociatedWith_iterator;
    typedef wasAssociatedWith_sequence::const_iterator wasAssociatedWith_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasAssociatedWith_type, char > wasAssociatedWith_traits;

    const wasAssociatedWith_sequence&
    wasAssociatedWith () const;

    wasAssociatedWith_sequence&
    wasAssociatedWith ();

    void
    wasAssociatedWith (const wasAssociatedWith_sequence& s);

    // actedOnBehalfOf
    //
    typedef ::prov::Delegation actedOnBehalfOf_type;
    typedef ::xsd::cxx::tree::sequence< actedOnBehalfOf_type > actedOnBehalfOf_sequence;
    typedef actedOnBehalfOf_sequence::iterator actedOnBehalfOf_iterator;
    typedef actedOnBehalfOf_sequence::const_iterator actedOnBehalfOf_const_iterator;
    typedef ::xsd::cxx::tree::traits< actedOnBehalfOf_type, char > actedOnBehalfOf_traits;

    const actedOnBehalfOf_sequence&
    actedOnBehalfOf () const;

    actedOnBehalfOf_sequence&
    actedOnBehalfOf ();

    void
    actedOnBehalfOf (const actedOnBehalfOf_sequence& s);

    // wasInfluencedBy
    //
    typedef ::prov::Influence wasInfluencedBy_type;
    typedef ::xsd::cxx::tree::sequence< wasInfluencedBy_type > wasInfluencedBy_sequence;
    typedef wasInfluencedBy_sequence::iterator wasInfluencedBy_iterator;
    typedef wasInfluencedBy_sequence::const_iterator wasInfluencedBy_const_iterator;
    typedef ::xsd::cxx::tree::traits< wasInfluencedBy_type, char > wasInfluencedBy_traits;

    const wasInfluencedBy_sequence&
    wasInfluencedBy () const;

    wasInfluencedBy_sequence&
    wasInfluencedBy ();

    void
    wasInfluencedBy (const wasInfluencedBy_sequence& s);

    // bundle
    //
    typedef ::prov::Bundle bundle_type;
    typedef ::xsd::cxx::tree::sequence< bundle_type > bundle_sequence;
    typedef bundle_sequence::iterator bundle_iterator;
    typedef bundle_sequence::const_iterator bundle_const_iterator;
    typedef ::xsd::cxx::tree::traits< bundle_type, char > bundle_traits;

    const bundle_sequence&
    bundle () const;

    bundle_sequence&
    bundle ();

    void
    bundle (const bundle_sequence& s);

    // specializationOf
    //
    typedef ::prov::Specialization specializationOf_type;
    typedef ::xsd::cxx::tree::sequence< specializationOf_type > specializationOf_sequence;
    typedef specializationOf_sequence::iterator specializationOf_iterator;
    typedef specializationOf_sequence::const_iterator specializationOf_const_iterator;
    typedef ::xsd::cxx::tree::traits< specializationOf_type, char > specializationOf_traits;

    const specializationOf_sequence&
    specializationOf () const;

    specializationOf_sequence&
    specializationOf ();

    void
    specializationOf (const specializationOf_sequence& s);

    // alternateOf
    //
    typedef ::prov::Alternate alternateOf_type;
    typedef ::xsd::cxx::tree::sequence< alternateOf_type > alternateOf_sequence;
    typedef alternateOf_sequence::iterator alternateOf_iterator;
    typedef alternateOf_sequence::const_iterator alternateOf_const_iterator;
    typedef ::xsd::cxx::tree::traits< alternateOf_type, char > alternateOf_traits;

    const alternateOf_sequence&
    alternateOf () const;

    alternateOf_sequence&
    alternateOf ();

    void
    alternateOf (const alternateOf_sequence& s);

    // collection
    //
    typedef ::prov::Collection collection_type;
    typedef ::xsd::cxx::tree::sequence< collection_type > collection_sequence;
    typedef collection_sequence::iterator collection_iterator;
    typedef collection_sequence::const_iterator collection_const_iterator;
    typedef ::xsd::cxx::tree::traits< collection_type, char > collection_traits;

    const collection_sequence&
    collection () const;

    collection_sequence&
    collection ();

    void
    collection (const collection_sequence& s);

    // emptyCollection
    //
    typedef ::prov::EmptyCollection emptyCollection_type;
    typedef ::xsd::cxx::tree::sequence< emptyCollection_type > emptyCollection_sequence;
    typedef emptyCollection_sequence::iterator emptyCollection_iterator;
    typedef emptyCollection_sequence::const_iterator emptyCollection_const_iterator;
    typedef ::xsd::cxx::tree::traits< emptyCollection_type, char > emptyCollection_traits;

    const emptyCollection_sequence&
    emptyCollection () const;

    emptyCollection_sequence&
    emptyCollection ();

    void
    emptyCollection (const emptyCollection_sequence& s);

    // hadMember
    //
    typedef ::prov::Membership hadMember_type;
    typedef ::xsd::cxx::tree::sequence< hadMember_type > hadMember_sequence;
    typedef hadMember_sequence::iterator hadMember_iterator;
    typedef hadMember_sequence::const_iterator hadMember_const_iterator;
    typedef ::xsd::cxx::tree::traits< hadMember_type, char > hadMember_traits;

    const hadMember_sequence&
    hadMember () const;

    hadMember_sequence&
    hadMember ();

    void
    hadMember (const hadMember_sequence& s);

    // plan
    //
    typedef ::prov::Plan plan_type;
    typedef ::xsd::cxx::tree::sequence< plan_type > plan_sequence;
    typedef plan_sequence::iterator plan_iterator;
    typedef plan_sequence::const_iterator plan_const_iterator;
    typedef ::xsd::cxx::tree::traits< plan_type, char > plan_traits;

    const plan_sequence&
    plan () const;

    plan_sequence&
    plan ();

    void
    plan (const plan_sequence& s);

    // other
    //
    typedef ::prov::Other other_type;
    typedef ::xsd::cxx::tree::sequence< other_type > other_sequence;
    typedef other_sequence::iterator other_iterator;
    typedef other_sequence::const_iterator other_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_type, char > other_traits;

    const other_sequence&
    other () const;

    other_sequence&
    other ();

    void
    other (const other_sequence& s);

    // internalElement
    //
    typedef ::xml_schema::type internalElement_type;
    typedef ::xsd::cxx::tree::sequence< internalElement_type > internalElement_sequence;
    typedef internalElement_sequence::iterator internalElement_iterator;
    typedef internalElement_sequence::const_iterator internalElement_const_iterator;
    typedef ::xsd::cxx::tree::traits< internalElement_type, char > internalElement_traits;

    const internalElement_sequence&
    internalElement () const;

    internalElement_sequence&
    internalElement ();

    void
    internalElement (const internalElement_sequence& s);

    // bundleContent
    //
    typedef ::prov::BundleConstructor bundleContent_type;
    typedef ::xsd::cxx::tree::sequence< bundleContent_type > bundleContent_sequence;
    typedef bundleContent_sequence::iterator bundleContent_iterator;
    typedef bundleContent_sequence::const_iterator bundleContent_const_iterator;
    typedef ::xsd::cxx::tree::traits< bundleContent_type, char > bundleContent_traits;

    const bundleContent_sequence&
    bundleContent () const;

    bundleContent_sequence&
    bundleContent ();

    void
    bundleContent (const bundleContent_sequence& s);

    // Constructors.
    //
    Document ();

    Document (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Document (const Document& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Document*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Document&
    operator= (const Document& x);

    virtual 
    ~Document ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    entity_sequence entity_;
    activity_sequence activity_;
    wasGeneratedBy_sequence wasGeneratedBy_;
    used_sequence used_;
    wasInformedBy_sequence wasInformedBy_;
    wasStartedBy_sequence wasStartedBy_;
    wasEndedBy_sequence wasEndedBy_;
    wasInvalidatedBy_sequence wasInvalidatedBy_;
    wasDerivedFrom_sequence wasDerivedFrom_;
    wasRevisionOf_sequence wasRevisionOf_;
    wasQuotedFrom_sequence wasQuotedFrom_;
    hadPrimarySource_sequence hadPrimarySource_;
    agent_sequence agent_;
    person_sequence person_;
    organization_sequence organization_;
    softwareAgent_sequence softwareAgent_;
    wasAttributedTo_sequence wasAttributedTo_;
    wasAssociatedWith_sequence wasAssociatedWith_;
    actedOnBehalfOf_sequence actedOnBehalfOf_;
    wasInfluencedBy_sequence wasInfluencedBy_;
    bundle_sequence bundle_;
    specializationOf_sequence specializationOf_;
    alternateOf_sequence alternateOf_;
    collection_sequence collection_;
    emptyCollection_sequence emptyCollection_;
    hadMember_sequence hadMember_;
    plan_sequence plan_;
    other_sequence other_;
    internalElement_sequence internalElement_;
    bundleContent_sequence bundleContent_;
  };

  class Other: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    Other ();

    Other (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Other (const Other& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Other*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Other ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prov
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Entity >
  entity (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Entity >
  entity (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Entity >
  entity (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Entity >
  entity (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Entity >
  entity (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Entity >
  entity (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Entity >
  entity (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Entity >
  entity (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Activity >
  activity (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Activity >
  activity (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Activity >
  activity (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Activity >
  activity (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Activity >
  activity (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Activity >
  activity (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Activity >
  activity (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Activity >
  activity (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Usage >
  used (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Usage >
  used (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Usage >
  used (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Usage >
  used (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Usage >
  used (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Usage >
  used (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Usage >
  used (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Usage >
  used (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Agent >
  agent (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Agent >
  agent (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Agent >
  agent (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Agent >
  agent (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Agent >
  agent (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Agent >
  agent (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Agent >
  agent (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Agent >
  agent (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Person >
  person (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Person >
  person (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Person >
  person (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Person >
  person (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Person >
  person (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Person >
  person (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Person >
  person (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Person >
  person (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Organization >
  organization (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Organization >
  organization (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Organization >
  organization (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Organization >
  organization (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Organization >
  organization (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Organization >
  organization (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Organization >
  organization (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Organization >
  organization (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Bundle >
  bundle (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Bundle >
  bundle (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Bundle >
  bundle (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Bundle >
  bundle (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Membership >
  hadMember (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Membership >
  hadMember (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Membership >
  hadMember (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Membership >
  hadMember (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Collection >
  collection (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Collection >
  collection (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Collection >
  collection (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Collection >
  collection (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Collection >
  collection (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Collection >
  collection (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Collection >
  collection (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Collection >
  collection (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Plan >
  plan (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Plan >
  plan (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Plan >
  plan (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Plan >
  plan (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Plan >
  plan (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Plan >
  plan (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Plan >
  plan (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Plan >
  plan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Document >
  document (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Document >
  document (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Document >
  document (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Document >
  document (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Document >
  document (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Document >
  document (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Document >
  document (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Document >
  document (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::prov::Other >
  other (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Other >
  other (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Other >
  other (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::prov::Other >
  other (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Other >
  other (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Other >
  other (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::prov::Other >
  other (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::prov::Other >
  other (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prov
{
  void
  operator<< (::xercesc::DOMElement&, const Entity&);

  void
  operator<< (::xercesc::DOMElement&, const Activity&);

  void
  operator<< (::xercesc::DOMElement&, const Generation&);

  void
  operator<< (::xercesc::DOMElement&, const Usage&);

  void
  operator<< (::xercesc::DOMElement&, const Communication&);

  void
  operator<< (::xercesc::DOMElement&, const Start&);

  void
  operator<< (::xercesc::DOMElement&, const End&);

  void
  operator<< (::xercesc::DOMElement&, const Invalidation&);

  void
  operator<< (::xercesc::DOMElement&, const Derivation&);

  void
  operator<< (::xercesc::DOMElement&, const Revision&);

  void
  operator<< (::xercesc::DOMElement&, const Quotation&);

  void
  operator<< (::xercesc::DOMElement&, const PrimarySource&);

  void
  operator<< (::xercesc::DOMElement&, const Agent&);

  void
  operator<< (::xercesc::DOMElement&, const Person&);

  void
  operator<< (::xercesc::DOMElement&, const Organization&);

  void
  operator<< (::xercesc::DOMElement&, const SoftwareAgent&);

  void
  operator<< (::xercesc::DOMElement&, const Attribution&);

  void
  operator<< (::xercesc::DOMElement&, const Association&);

  void
  operator<< (::xercesc::DOMElement&, const Delegation&);

  void
  operator<< (::xercesc::DOMElement&, const Influence&);

  void
  operator<< (::xercesc::DOMElement&, const Bundle&);

  void
  operator<< (::xercesc::DOMElement&, const BundleConstructor&);

  void
  operator<< (::xercesc::DOMElement&, const Specialization&);

  void
  operator<< (::xercesc::DOMElement&, const Alternate&);

  void
  operator<< (::xercesc::DOMElement&, const Collection&);

  void
  operator<< (::xercesc::DOMElement&, const EmptyCollection&);

  void
  operator<< (::xercesc::DOMElement&, const Membership&);

  void
  operator<< (::xercesc::DOMElement&, const Plan&);

  void
  operator<< (::xercesc::DOMElement&, const InternationalizedString&);

  // Serialize to std::ostream.
  //

  void
  label (::std::ostream& os,
         const ::prov::InternationalizedString& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  label (::std::ostream& os,
         const ::prov::InternationalizedString& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  label (::std::ostream& os,
         const ::prov::InternationalizedString& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  label (::xercesc::XMLFormatTarget& ft,
         const ::prov::InternationalizedString& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  label (::xercesc::XMLFormatTarget& ft,
         const ::prov::InternationalizedString& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  label (::xercesc::XMLFormatTarget& ft,
         const ::prov::InternationalizedString& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  label (::xercesc::DOMDocument& d,
         const ::prov::InternationalizedString& x,
         ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  label (const ::prov::InternationalizedString& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  role (::std::ostream& os,
        const ::xml_schema::simple_type& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  role (::std::ostream& os,
        const ::xml_schema::simple_type& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  role (::std::ostream& os,
        const ::xml_schema::simple_type& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  role (::xercesc::XMLFormatTarget& ft,
        const ::xml_schema::simple_type& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  role (::xercesc::XMLFormatTarget& ft,
        const ::xml_schema::simple_type& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  role (::xercesc::XMLFormatTarget& ft,
        const ::xml_schema::simple_type& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  role (::xercesc::DOMDocument& d,
        const ::xml_schema::simple_type& x,
        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  role (const ::xml_schema::simple_type& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  type (::std::ostream& os,
        const ::xml_schema::simple_type& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  type (::std::ostream& os,
        const ::xml_schema::simple_type& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  type (::std::ostream& os,
        const ::xml_schema::simple_type& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  type (::xercesc::XMLFormatTarget& ft,
        const ::xml_schema::simple_type& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  type (::xercesc::XMLFormatTarget& ft,
        const ::xml_schema::simple_type& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  type (::xercesc::XMLFormatTarget& ft,
        const ::xml_schema::simple_type& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  type (::xercesc::DOMDocument& d,
        const ::xml_schema::simple_type& x,
        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  type (const ::xml_schema::simple_type& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  location (::std::ostream& os,
            const ::xml_schema::simple_type& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  location (::std::ostream& os,
            const ::xml_schema::simple_type& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  location (::std::ostream& os,
            const ::xml_schema::simple_type& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  location (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::simple_type& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  location (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::simple_type& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  location (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::simple_type& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  location (::xercesc::DOMDocument& d,
            const ::xml_schema::simple_type& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  location (const ::xml_schema::simple_type& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  value (::std::ostream& os,
         const ::xml_schema::simple_type& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  value (::std::ostream& os,
         const ::xml_schema::simple_type& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  value (::std::ostream& os,
         const ::xml_schema::simple_type& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  value (::xercesc::XMLFormatTarget& ft,
         const ::xml_schema::simple_type& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  value (::xercesc::XMLFormatTarget& ft,
         const ::xml_schema::simple_type& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  value (::xercesc::XMLFormatTarget& ft,
         const ::xml_schema::simple_type& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  value (::xercesc::DOMDocument& d,
         const ::xml_schema::simple_type& x,
         ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  value (const ::xml_schema::simple_type& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const IDRef&);

  // Serialize to std::ostream.
  //

  void
  entity (::std::ostream& os,
          const ::prov::Entity& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  entity (::std::ostream& os,
          const ::prov::Entity& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  entity (::std::ostream& os,
          const ::prov::Entity& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  entity (::xercesc::XMLFormatTarget& ft,
          const ::prov::Entity& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  entity (::xercesc::XMLFormatTarget& ft,
          const ::prov::Entity& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  entity (::xercesc::XMLFormatTarget& ft,
          const ::prov::Entity& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  entity (::xercesc::DOMDocument& d,
          const ::prov::Entity& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  entity (const ::prov::Entity& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  activity (::std::ostream& os,
            const ::prov::Activity& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  activity (::std::ostream& os,
            const ::prov::Activity& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  activity (::std::ostream& os,
            const ::prov::Activity& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  activity (::xercesc::XMLFormatTarget& ft,
            const ::prov::Activity& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  activity (::xercesc::XMLFormatTarget& ft,
            const ::prov::Activity& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  activity (::xercesc::XMLFormatTarget& ft,
            const ::prov::Activity& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  activity (::xercesc::DOMDocument& d,
            const ::prov::Activity& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  activity (const ::prov::Activity& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasGeneratedBy (::std::ostream& os,
                  const ::prov::Generation& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  wasGeneratedBy (::std::ostream& os,
                  const ::prov::Generation& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  wasGeneratedBy (::std::ostream& os,
                  const ::prov::Generation& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasGeneratedBy (::xercesc::XMLFormatTarget& ft,
                  const ::prov::Generation& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  wasGeneratedBy (::xercesc::XMLFormatTarget& ft,
                  const ::prov::Generation& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  wasGeneratedBy (::xercesc::XMLFormatTarget& ft,
                  const ::prov::Generation& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasGeneratedBy (::xercesc::DOMDocument& d,
                  const ::prov::Generation& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasGeneratedBy (const ::prov::Generation& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  used (::std::ostream& os,
        const ::prov::Usage& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  used (::std::ostream& os,
        const ::prov::Usage& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  used (::std::ostream& os,
        const ::prov::Usage& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  used (::xercesc::XMLFormatTarget& ft,
        const ::prov::Usage& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  used (::xercesc::XMLFormatTarget& ft,
        const ::prov::Usage& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  used (::xercesc::XMLFormatTarget& ft,
        const ::prov::Usage& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  used (::xercesc::DOMDocument& d,
        const ::prov::Usage& x,
        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  used (const ::prov::Usage& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasInformedBy (::std::ostream& os,
                 const ::prov::Communication& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasInformedBy (::std::ostream& os,
                 const ::prov::Communication& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasInformedBy (::std::ostream& os,
                 const ::prov::Communication& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasInformedBy (::xercesc::XMLFormatTarget& ft,
                 const ::prov::Communication& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasInformedBy (::xercesc::XMLFormatTarget& ft,
                 const ::prov::Communication& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasInformedBy (::xercesc::XMLFormatTarget& ft,
                 const ::prov::Communication& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasInformedBy (::xercesc::DOMDocument& d,
                 const ::prov::Communication& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasInformedBy (const ::prov::Communication& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasStartedBy (::std::ostream& os,
                const ::prov::Start& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  wasStartedBy (::std::ostream& os,
                const ::prov::Start& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  wasStartedBy (::std::ostream& os,
                const ::prov::Start& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasStartedBy (::xercesc::XMLFormatTarget& ft,
                const ::prov::Start& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  wasStartedBy (::xercesc::XMLFormatTarget& ft,
                const ::prov::Start& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  wasStartedBy (::xercesc::XMLFormatTarget& ft,
                const ::prov::Start& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasStartedBy (::xercesc::DOMDocument& d,
                const ::prov::Start& x,
                ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasStartedBy (const ::prov::Start& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasEndedBy (::std::ostream& os,
              const ::prov::End& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  wasEndedBy (::std::ostream& os,
              const ::prov::End& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  wasEndedBy (::std::ostream& os,
              const ::prov::End& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasEndedBy (::xercesc::XMLFormatTarget& ft,
              const ::prov::End& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  wasEndedBy (::xercesc::XMLFormatTarget& ft,
              const ::prov::End& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  wasEndedBy (::xercesc::XMLFormatTarget& ft,
              const ::prov::End& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasEndedBy (::xercesc::DOMDocument& d,
              const ::prov::End& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasEndedBy (const ::prov::End& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasInvalidatedBy (::std::ostream& os,
                    const ::prov::Invalidation& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  wasInvalidatedBy (::std::ostream& os,
                    const ::prov::Invalidation& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  wasInvalidatedBy (::std::ostream& os,
                    const ::prov::Invalidation& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasInvalidatedBy (::xercesc::XMLFormatTarget& ft,
                    const ::prov::Invalidation& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  wasInvalidatedBy (::xercesc::XMLFormatTarget& ft,
                    const ::prov::Invalidation& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  wasInvalidatedBy (::xercesc::XMLFormatTarget& ft,
                    const ::prov::Invalidation& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasInvalidatedBy (::xercesc::DOMDocument& d,
                    const ::prov::Invalidation& x,
                    ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasInvalidatedBy (const ::prov::Invalidation& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasDerivedFrom (::std::ostream& os,
                  const ::prov::Derivation& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  wasDerivedFrom (::std::ostream& os,
                  const ::prov::Derivation& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  wasDerivedFrom (::std::ostream& os,
                  const ::prov::Derivation& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasDerivedFrom (::xercesc::XMLFormatTarget& ft,
                  const ::prov::Derivation& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  wasDerivedFrom (::xercesc::XMLFormatTarget& ft,
                  const ::prov::Derivation& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  wasDerivedFrom (::xercesc::XMLFormatTarget& ft,
                  const ::prov::Derivation& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasDerivedFrom (::xercesc::DOMDocument& d,
                  const ::prov::Derivation& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasDerivedFrom (const ::prov::Derivation& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasRevisionOf (::std::ostream& os,
                 const ::prov::Revision& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasRevisionOf (::std::ostream& os,
                 const ::prov::Revision& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasRevisionOf (::std::ostream& os,
                 const ::prov::Revision& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasRevisionOf (::xercesc::XMLFormatTarget& ft,
                 const ::prov::Revision& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasRevisionOf (::xercesc::XMLFormatTarget& ft,
                 const ::prov::Revision& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasRevisionOf (::xercesc::XMLFormatTarget& ft,
                 const ::prov::Revision& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasRevisionOf (::xercesc::DOMDocument& d,
                 const ::prov::Revision& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasRevisionOf (const ::prov::Revision& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasQuotedFrom (::std::ostream& os,
                 const ::prov::Quotation& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasQuotedFrom (::std::ostream& os,
                 const ::prov::Quotation& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasQuotedFrom (::std::ostream& os,
                 const ::prov::Quotation& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasQuotedFrom (::xercesc::XMLFormatTarget& ft,
                 const ::prov::Quotation& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasQuotedFrom (::xercesc::XMLFormatTarget& ft,
                 const ::prov::Quotation& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  wasQuotedFrom (::xercesc::XMLFormatTarget& ft,
                 const ::prov::Quotation& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasQuotedFrom (::xercesc::DOMDocument& d,
                 const ::prov::Quotation& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasQuotedFrom (const ::prov::Quotation& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  hadPrimarySource (::std::ostream& os,
                    const ::prov::PrimarySource& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  hadPrimarySource (::std::ostream& os,
                    const ::prov::PrimarySource& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  hadPrimarySource (::std::ostream& os,
                    const ::prov::PrimarySource& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  hadPrimarySource (::xercesc::XMLFormatTarget& ft,
                    const ::prov::PrimarySource& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  hadPrimarySource (::xercesc::XMLFormatTarget& ft,
                    const ::prov::PrimarySource& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  hadPrimarySource (::xercesc::XMLFormatTarget& ft,
                    const ::prov::PrimarySource& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  hadPrimarySource (::xercesc::DOMDocument& d,
                    const ::prov::PrimarySource& x,
                    ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  hadPrimarySource (const ::prov::PrimarySource& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  agent (::std::ostream& os,
         const ::prov::Agent& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  agent (::std::ostream& os,
         const ::prov::Agent& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  agent (::std::ostream& os,
         const ::prov::Agent& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  agent (::xercesc::XMLFormatTarget& ft,
         const ::prov::Agent& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  agent (::xercesc::XMLFormatTarget& ft,
         const ::prov::Agent& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  agent (::xercesc::XMLFormatTarget& ft,
         const ::prov::Agent& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  agent (::xercesc::DOMDocument& d,
         const ::prov::Agent& x,
         ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  agent (const ::prov::Agent& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  person (::std::ostream& os,
          const ::prov::Person& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  person (::std::ostream& os,
          const ::prov::Person& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  person (::std::ostream& os,
          const ::prov::Person& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  person (::xercesc::XMLFormatTarget& ft,
          const ::prov::Person& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  person (::xercesc::XMLFormatTarget& ft,
          const ::prov::Person& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  person (::xercesc::XMLFormatTarget& ft,
          const ::prov::Person& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  person (::xercesc::DOMDocument& d,
          const ::prov::Person& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  person (const ::prov::Person& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  organization (::std::ostream& os,
                const ::prov::Organization& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  organization (::std::ostream& os,
                const ::prov::Organization& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  organization (::std::ostream& os,
                const ::prov::Organization& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  organization (::xercesc::XMLFormatTarget& ft,
                const ::prov::Organization& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  organization (::xercesc::XMLFormatTarget& ft,
                const ::prov::Organization& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  organization (::xercesc::XMLFormatTarget& ft,
                const ::prov::Organization& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  organization (::xercesc::DOMDocument& d,
                const ::prov::Organization& x,
                ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  organization (const ::prov::Organization& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  softwareAgent (::std::ostream& os,
                 const ::prov::SoftwareAgent& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  softwareAgent (::std::ostream& os,
                 const ::prov::SoftwareAgent& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  softwareAgent (::std::ostream& os,
                 const ::prov::SoftwareAgent& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  softwareAgent (::xercesc::XMLFormatTarget& ft,
                 const ::prov::SoftwareAgent& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  softwareAgent (::xercesc::XMLFormatTarget& ft,
                 const ::prov::SoftwareAgent& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  softwareAgent (::xercesc::XMLFormatTarget& ft,
                 const ::prov::SoftwareAgent& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  softwareAgent (::xercesc::DOMDocument& d,
                 const ::prov::SoftwareAgent& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  softwareAgent (const ::prov::SoftwareAgent& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasAttributedTo (::std::ostream& os,
                   const ::prov::Attribution& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  wasAttributedTo (::std::ostream& os,
                   const ::prov::Attribution& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  wasAttributedTo (::std::ostream& os,
                   const ::prov::Attribution& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasAttributedTo (::xercesc::XMLFormatTarget& ft,
                   const ::prov::Attribution& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  wasAttributedTo (::xercesc::XMLFormatTarget& ft,
                   const ::prov::Attribution& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  wasAttributedTo (::xercesc::XMLFormatTarget& ft,
                   const ::prov::Attribution& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasAttributedTo (::xercesc::DOMDocument& d,
                   const ::prov::Attribution& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasAttributedTo (const ::prov::Attribution& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasAssociatedWith (::std::ostream& os,
                     const ::prov::Association& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  wasAssociatedWith (::std::ostream& os,
                     const ::prov::Association& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  wasAssociatedWith (::std::ostream& os,
                     const ::prov::Association& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasAssociatedWith (::xercesc::XMLFormatTarget& ft,
                     const ::prov::Association& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  wasAssociatedWith (::xercesc::XMLFormatTarget& ft,
                     const ::prov::Association& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  wasAssociatedWith (::xercesc::XMLFormatTarget& ft,
                     const ::prov::Association& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasAssociatedWith (::xercesc::DOMDocument& d,
                     const ::prov::Association& x,
                     ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasAssociatedWith (const ::prov::Association& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  actedOnBehalfOf (::std::ostream& os,
                   const ::prov::Delegation& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  actedOnBehalfOf (::std::ostream& os,
                   const ::prov::Delegation& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  actedOnBehalfOf (::std::ostream& os,
                   const ::prov::Delegation& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  actedOnBehalfOf (::xercesc::XMLFormatTarget& ft,
                   const ::prov::Delegation& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  actedOnBehalfOf (::xercesc::XMLFormatTarget& ft,
                   const ::prov::Delegation& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  actedOnBehalfOf (::xercesc::XMLFormatTarget& ft,
                   const ::prov::Delegation& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  actedOnBehalfOf (::xercesc::DOMDocument& d,
                   const ::prov::Delegation& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  actedOnBehalfOf (const ::prov::Delegation& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  wasInfluencedBy (::std::ostream& os,
                   const ::prov::Influence& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  wasInfluencedBy (::std::ostream& os,
                   const ::prov::Influence& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  wasInfluencedBy (::std::ostream& os,
                   const ::prov::Influence& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  wasInfluencedBy (::xercesc::XMLFormatTarget& ft,
                   const ::prov::Influence& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  wasInfluencedBy (::xercesc::XMLFormatTarget& ft,
                   const ::prov::Influence& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  wasInfluencedBy (::xercesc::XMLFormatTarget& ft,
                   const ::prov::Influence& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  wasInfluencedBy (::xercesc::DOMDocument& d,
                   const ::prov::Influence& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasInfluencedBy (const ::prov::Influence& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  bundle (::std::ostream& os,
          const ::prov::Bundle& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  bundle (::std::ostream& os,
          const ::prov::Bundle& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  bundle (::std::ostream& os,
          const ::prov::Bundle& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  bundle (::xercesc::XMLFormatTarget& ft,
          const ::prov::Bundle& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  bundle (::xercesc::XMLFormatTarget& ft,
          const ::prov::Bundle& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  bundle (::xercesc::XMLFormatTarget& ft,
          const ::prov::Bundle& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  bundle (::xercesc::DOMDocument& d,
          const ::prov::Bundle& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  bundle (const ::prov::Bundle& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  specializationOf (::std::ostream& os,
                    const ::prov::Specialization& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  specializationOf (::std::ostream& os,
                    const ::prov::Specialization& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  specializationOf (::std::ostream& os,
                    const ::prov::Specialization& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  specializationOf (::xercesc::XMLFormatTarget& ft,
                    const ::prov::Specialization& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  specializationOf (::xercesc::XMLFormatTarget& ft,
                    const ::prov::Specialization& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  specializationOf (::xercesc::XMLFormatTarget& ft,
                    const ::prov::Specialization& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  specializationOf (::xercesc::DOMDocument& d,
                    const ::prov::Specialization& x,
                    ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  specializationOf (const ::prov::Specialization& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  alternateOf (::std::ostream& os,
               const ::prov::Alternate& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  alternateOf (::std::ostream& os,
               const ::prov::Alternate& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  alternateOf (::std::ostream& os,
               const ::prov::Alternate& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  alternateOf (::xercesc::XMLFormatTarget& ft,
               const ::prov::Alternate& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  alternateOf (::xercesc::XMLFormatTarget& ft,
               const ::prov::Alternate& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  alternateOf (::xercesc::XMLFormatTarget& ft,
               const ::prov::Alternate& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  alternateOf (::xercesc::DOMDocument& d,
               const ::prov::Alternate& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  alternateOf (const ::prov::Alternate& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  hadMember (::std::ostream& os,
             const ::prov::Membership& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  hadMember (::std::ostream& os,
             const ::prov::Membership& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  hadMember (::std::ostream& os,
             const ::prov::Membership& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  hadMember (::xercesc::XMLFormatTarget& ft,
             const ::prov::Membership& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  hadMember (::xercesc::XMLFormatTarget& ft,
             const ::prov::Membership& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  hadMember (::xercesc::XMLFormatTarget& ft,
             const ::prov::Membership& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  hadMember (::xercesc::DOMDocument& d,
             const ::prov::Membership& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  hadMember (const ::prov::Membership& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  collection (::std::ostream& os,
              const ::prov::Collection& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  collection (::std::ostream& os,
              const ::prov::Collection& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  collection (::std::ostream& os,
              const ::prov::Collection& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  collection (::xercesc::XMLFormatTarget& ft,
              const ::prov::Collection& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  collection (::xercesc::XMLFormatTarget& ft,
              const ::prov::Collection& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  collection (::xercesc::XMLFormatTarget& ft,
              const ::prov::Collection& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  collection (::xercesc::DOMDocument& d,
              const ::prov::Collection& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  collection (const ::prov::Collection& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  emptyCollection (::std::ostream& os,
                   const ::prov::EmptyCollection& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  emptyCollection (::std::ostream& os,
                   const ::prov::EmptyCollection& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  emptyCollection (::std::ostream& os,
                   const ::prov::EmptyCollection& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  emptyCollection (::xercesc::XMLFormatTarget& ft,
                   const ::prov::EmptyCollection& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  emptyCollection (::xercesc::XMLFormatTarget& ft,
                   const ::prov::EmptyCollection& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  emptyCollection (::xercesc::XMLFormatTarget& ft,
                   const ::prov::EmptyCollection& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  emptyCollection (::xercesc::DOMDocument& d,
                   const ::prov::EmptyCollection& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  emptyCollection (const ::prov::EmptyCollection& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  plan (::std::ostream& os,
        const ::prov::Plan& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  plan (::std::ostream& os,
        const ::prov::Plan& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  plan (::std::ostream& os,
        const ::prov::Plan& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  plan (::xercesc::XMLFormatTarget& ft,
        const ::prov::Plan& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  plan (::xercesc::XMLFormatTarget& ft,
        const ::prov::Plan& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  plan (::xercesc::XMLFormatTarget& ft,
        const ::prov::Plan& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  plan (::xercesc::DOMDocument& d,
        const ::prov::Plan& x,
        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  plan (const ::prov::Plan& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  document (::std::ostream& os,
            const ::prov::Document& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  document (::std::ostream& os,
            const ::prov::Document& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  document (::std::ostream& os,
            const ::prov::Document& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  document (::xercesc::XMLFormatTarget& ft,
            const ::prov::Document& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  document (::xercesc::XMLFormatTarget& ft,
            const ::prov::Document& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  document (::xercesc::XMLFormatTarget& ft,
            const ::prov::Document& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  document (::xercesc::DOMDocument& d,
            const ::prov::Document& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  document (const ::prov::Document& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const Document&);

  // Serialize to std::ostream.
  //

  void
  internalElement (::std::ostream& os,
                   const ::xml_schema::type& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  internalElement (::std::ostream& os,
                   const ::xml_schema::type& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  internalElement (::std::ostream& os,
                   const ::xml_schema::type& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  internalElement (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::type& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  internalElement (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::type& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  internalElement (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::type& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  internalElement (::xercesc::DOMDocument& d,
                   const ::xml_schema::type& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  internalElement (const ::xml_schema::type& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  other (::std::ostream& os,
         const ::prov::Other& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  other (::std::ostream& os,
         const ::prov::Other& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  other (::std::ostream& os,
         const ::prov::Other& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  other (::xercesc::XMLFormatTarget& ft,
         const ::prov::Other& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  other (::xercesc::XMLFormatTarget& ft,
         const ::prov::Other& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  other (::xercesc::XMLFormatTarget& ft,
         const ::prov::Other& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  other (::xercesc::DOMDocument& d,
         const ::prov::Other& x,
         ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  other (const ::prov::Other& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const Other&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___PROV_CORE_HXX
