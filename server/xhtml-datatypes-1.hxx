// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XHTML_DATATYPES_1_HXX
#define XHTML_DATATYPES_1_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xhtml
{
  namespace datatypes
  {
    class Length;
    class LinkTypes;
    class MediaDesc;
    class MultiLength;
    class Number;
    class Pixels;
    class Script;
    class Color;
    class Text;
    class Character;
    class Charset;
    class Charsets;
    class ContentType;
    class ContentTypes;
    class Datetime;
    class FPI;
    class FrameTarget;
    class LanguageCode;
    class LanguageCodes;
    class URI;
    class URIs;
    class URIREF;
    class MultiLengths;
    class CDATA;
    class CURIE;
    class CURIEs;
    class SafeCURIE;
    class SafeCURIEs;
    class URIorSafeCURIE;
    class URIorSafeCURIEs;
    class Length_member;
    class MultiLength_member;
    class Color_member;
    class FrameTarget_member;
    class FrameTarget_member1;
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace xhtml
{
  namespace datatypes
  {
    class Length: public ::xml_schema::string
    {
      public:

      Length (const char* v);

      Length (const ::std::string& v);

      Length (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Length (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Length (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Length (const Length& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Length*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class LinkTypes: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char >
    {
      public:
      LinkTypes ();

      LinkTypes (size_type n, const ::xml_schema::nmtoken& x);

      template < typename I >
      LinkTypes (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char > (begin, end, this)
      {
      }

      LinkTypes (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      LinkTypes (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      LinkTypes (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      LinkTypes (const LinkTypes& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual LinkTypes*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LinkTypes ();
    };

    class MediaDesc: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      MediaDesc ();

      MediaDesc (const char*);

      MediaDesc (const ::std::string&);

      MediaDesc (const ::xml_schema::string&);

      MediaDesc (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      MediaDesc (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      MediaDesc (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      MediaDesc (const MediaDesc& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual MediaDesc*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~MediaDesc ();
    };

    class MultiLength: public ::xml_schema::string
    {
      public:

      MultiLength (const char* v);

      MultiLength (const ::std::string& v);

      MultiLength (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      MultiLength (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      MultiLength (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      MultiLength (const MultiLength& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual MultiLength*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class Number: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      Number (const ::xml_schema::non_negative_integer&);

      Number (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Number (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Number (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Number (const Number& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Number*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Number ();
    };

    class Pixels: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      Pixels (const ::xml_schema::non_negative_integer&);

      Pixels (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Pixels (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Pixels (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Pixels (const Pixels& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Pixels*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Pixels ();
    };

    class Script: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      Script ();

      Script (const char*);

      Script (const ::std::string&);

      Script (const ::xml_schema::string&);

      Script (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Script (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Script (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Script (const Script& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Script*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Script ();
    };

    class Color: public ::xml_schema::string
    {
      public:

      Color (const char* v);

      Color (const ::std::string& v);

      Color (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Color (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Color (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Color (const Color& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Color*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class Text: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      Text ();

      Text (const char*);

      Text (const ::std::string&);

      Text (const ::xml_schema::string&);

      Text (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Text (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Text (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Text (const Text& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual Text*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Text ();
    };

    class Character: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      Character ();

      Character (const char*);

      Character (const ::std::string&);

      Character (const ::xml_schema::string&);

      Character (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      Character (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      Character (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      Character (const Character& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual Character*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Character ();
    };

    class Charset: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      Charset ();

      Charset (const char*);

      Charset (const ::std::string&);

      Charset (const ::xml_schema::string&);

      Charset (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      Charset (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      Charset (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      Charset (const Charset& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual Charset*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Charset ();
    };

    class Charsets: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char >
    {
      public:
      Charsets ();

      Charsets (size_type n, const ::xhtml::datatypes::Charset& x);

      template < typename I >
      Charsets (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char > (begin, end, this)
      {
      }

      Charsets (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Charsets (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Charsets (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Charsets (const Charsets& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual Charsets*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Charsets ();
    };

    class ContentType: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      ContentType ();

      ContentType (const char*);

      ContentType (const ::std::string&);

      ContentType (const ::xml_schema::string&);

      ContentType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      ContentType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      ContentType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      ContentType (const ContentType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual ContentType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ContentType ();
    };

    class ContentTypes: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      ContentTypes ();

      ContentTypes (const char*);

      ContentTypes (const ::std::string&);

      ContentTypes (const ::xml_schema::string&);

      ContentTypes (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ContentTypes (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ContentTypes (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ContentTypes (const ContentTypes& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual ContentTypes*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ContentTypes ();
    };

    class Datetime: public ::xml_schema::date_time
    {
      public:
      // Constructors.
      //
      Datetime (const ::xml_schema::date_time&);

      Datetime (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Datetime (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Datetime (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Datetime (const Datetime& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual Datetime*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Datetime ();
    };

    class FPI: public ::xml_schema::normalized_string
    {
      public:
      // Constructors.
      //
      FPI ();

      FPI (const char*);

      FPI (const ::std::string&);

      FPI (const ::xml_schema::normalized_string&);

      FPI (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      FPI (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      FPI (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      FPI (const FPI& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual FPI*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FPI ();
    };

    class FrameTarget: public ::xml_schema::string
    {
      public:

      FrameTarget (const char* v);

      FrameTarget (const ::std::string& v);

      FrameTarget (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      FrameTarget (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      FrameTarget (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      FrameTarget (const FrameTarget& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual FrameTarget*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class LanguageCode: public ::xml_schema::language
    {
      public:
      // Constructors.
      //
      LanguageCode (const char*);

      LanguageCode (const ::std::string&);

      LanguageCode (const ::xml_schema::language&);

      LanguageCode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LanguageCode (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LanguageCode (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LanguageCode (const LanguageCode& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual LanguageCode*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LanguageCode ();
    };

    class LanguageCodes: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      LanguageCodes ();

      LanguageCodes (const char*);

      LanguageCodes (const ::std::string&);

      LanguageCodes (const ::xml_schema::string&);

      LanguageCodes (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      LanguageCodes (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      LanguageCodes (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      LanguageCodes (const LanguageCodes& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual LanguageCodes*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LanguageCodes ();
    };

    class URI: public ::xml_schema::uri
    {
      public:
      // Constructors.
      //
      URI (const ::xml_schema::uri&);

      URI (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      URI (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      URI (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      URI (const URI& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

      virtual URI*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~URI ();
    };

    class URIs: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xml_schema::uri, char >
    {
      public:
      URIs ();

      URIs (size_type n, const ::xml_schema::uri& x);

      template < typename I >
      URIs (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xml_schema::uri, char > (begin, end, this)
      {
      }

      URIs (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      URIs (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      URIs (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      URIs (const URIs& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual URIs*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~URIs ();
    };

    class URIREF: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      URIREF ();

      URIREF (const char*);

      URIREF (const ::std::string&);

      URIREF (const ::xml_schema::string&);

      URIREF (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      URIREF (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      URIREF (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      URIREF (const URIREF& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual URIREF*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~URIREF ();
    };

    class MultiLengths: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      MultiLengths ();

      MultiLengths (const char*);

      MultiLengths (const ::std::string&);

      MultiLengths (const ::xml_schema::string&);

      MultiLengths (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      MultiLengths (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      MultiLengths (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      MultiLengths (const MultiLengths& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual MultiLengths*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~MultiLengths ();
    };

    class CDATA: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      CDATA ();

      CDATA (const char*);

      CDATA (const ::std::string&);

      CDATA (const ::xml_schema::string&);

      CDATA (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      CDATA (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      CDATA (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      CDATA (const CDATA& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual CDATA*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CDATA ();
    };

    class CURIE: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      CURIE ();

      CURIE (const char*);

      CURIE (const ::std::string&);

      CURIE (const ::xml_schema::string&);

      CURIE (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      CURIE (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      CURIE (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      CURIE (const CURIE& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual CURIE*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CURIE ();
    };

    class CURIEs: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char >
    {
      public:
      CURIEs ();

      CURIEs (size_type n, const ::xhtml::datatypes::CURIE& x);

      template < typename I >
      CURIEs (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char > (begin, end, this)
      {
      }

      CURIEs (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      CURIEs (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      CURIEs (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      CURIEs (const CURIEs& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual CURIEs*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CURIEs ();
    };

    class SafeCURIE: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      SafeCURIE ();

      SafeCURIE (const char*);

      SafeCURIE (const ::std::string&);

      SafeCURIE (const ::xml_schema::string&);

      SafeCURIE (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      SafeCURIE (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      SafeCURIE (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      SafeCURIE (const SafeCURIE& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual SafeCURIE*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SafeCURIE ();
    };

    class SafeCURIEs: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char >
    {
      public:
      SafeCURIEs ();

      SafeCURIEs (size_type n, const ::xhtml::datatypes::SafeCURIE& x);

      template < typename I >
      SafeCURIEs (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char > (begin, end, this)
      {
      }

      SafeCURIEs (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      SafeCURIEs (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      SafeCURIEs (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      SafeCURIEs (const SafeCURIEs& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual SafeCURIEs*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SafeCURIEs ();
    };

    class URIorSafeCURIE: public ::xml_schema::string
    {
      public:

      URIorSafeCURIE (const char* v);

      URIorSafeCURIE (const ::std::string& v);

      URIorSafeCURIE (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      URIorSafeCURIE (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      URIorSafeCURIE (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      URIorSafeCURIE (const URIorSafeCURIE& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual URIorSafeCURIE*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;
    };

    class URIorSafeCURIEs: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char >
    {
      public:
      URIorSafeCURIEs ();

      URIorSafeCURIEs (size_type n, const ::xhtml::datatypes::URIorSafeCURIE& x);

      template < typename I >
      URIorSafeCURIEs (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char > (begin, end, this)
      {
      }

      URIorSafeCURIEs (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      URIorSafeCURIEs (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      URIorSafeCURIEs (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      URIorSafeCURIEs (const URIorSafeCURIEs& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual URIorSafeCURIEs*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~URIorSafeCURIEs ();
    };

    class Length_member: public ::xml_schema::token
    {
      public:
      // Constructors.
      //
      Length_member ();

      Length_member (const char*);

      Length_member (const ::std::string&);

      Length_member (const ::xml_schema::token&);

      Length_member (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      Length_member (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      Length_member (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      Length_member (const Length_member& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual Length_member*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Length_member ();
    };

    class MultiLength_member: public ::xml_schema::token
    {
      public:
      // Constructors.
      //
      MultiLength_member ();

      MultiLength_member (const char*);

      MultiLength_member (const ::std::string&);

      MultiLength_member (const ::xml_schema::token&);

      MultiLength_member (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      MultiLength_member (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      MultiLength_member (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      MultiLength_member (const MultiLength_member& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual MultiLength_member*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~MultiLength_member ();
    };

    class Color_member: public ::xml_schema::token
    {
      public:
      // Constructors.
      //
      Color_member ();

      Color_member (const char*);

      Color_member (const ::std::string&);

      Color_member (const ::xml_schema::token&);

      Color_member (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      Color_member (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      Color_member (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      Color_member (const Color_member& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual Color_member*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Color_member ();
    };

    class FrameTarget_member: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        _blank,
        _self,
        _parent,
        _top
      };

      FrameTarget_member (value v);

      FrameTarget_member (const char* v);

      FrameTarget_member (const ::std::string& v);

      FrameTarget_member (const ::xml_schema::nmtoken& v);

      FrameTarget_member (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      FrameTarget_member (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      FrameTarget_member (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      FrameTarget_member (const FrameTarget_member& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual FrameTarget_member*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      FrameTarget_member&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_FrameTarget_member_convert ();
      }

      protected:
      value
      _xsd_FrameTarget_member_convert () const;

      public:
      static const char* const _xsd_FrameTarget_member_literals_[4];
      static const value _xsd_FrameTarget_member_indexes_[4];
    };

    class FrameTarget_member1: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      FrameTarget_member1 ();

      FrameTarget_member1 (const char*);

      FrameTarget_member1 (const ::std::string&);

      FrameTarget_member1 (const ::xml_schema::string&);

      FrameTarget_member1 (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      FrameTarget_member1 (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      FrameTarget_member1 (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      FrameTarget_member1 (const FrameTarget_member1& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual FrameTarget_member1*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~FrameTarget_member1 ();
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xhtml
{
  namespace datatypes
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xhtml
{
  namespace datatypes
  {
    void
    operator<< (::xercesc::DOMElement&, const Length&);

    void
    operator<< (::xercesc::DOMAttr&, const Length&);

    void
    operator<< (::xml_schema::list_stream&,
                const Length&);

    void
    operator<< (::xercesc::DOMElement&, const LinkTypes&);

    void
    operator<< (::xercesc::DOMAttr&, const LinkTypes&);

    void
    operator<< (::xml_schema::list_stream&,
                const LinkTypes&);

    void
    operator<< (::xercesc::DOMElement&, const MediaDesc&);

    void
    operator<< (::xercesc::DOMAttr&, const MediaDesc&);

    void
    operator<< (::xml_schema::list_stream&,
                const MediaDesc&);

    void
    operator<< (::xercesc::DOMElement&, const MultiLength&);

    void
    operator<< (::xercesc::DOMAttr&, const MultiLength&);

    void
    operator<< (::xml_schema::list_stream&,
                const MultiLength&);

    void
    operator<< (::xercesc::DOMElement&, const Number&);

    void
    operator<< (::xercesc::DOMAttr&, const Number&);

    void
    operator<< (::xml_schema::list_stream&,
                const Number&);

    void
    operator<< (::xercesc::DOMElement&, const Pixels&);

    void
    operator<< (::xercesc::DOMAttr&, const Pixels&);

    void
    operator<< (::xml_schema::list_stream&,
                const Pixels&);

    void
    operator<< (::xercesc::DOMElement&, const Script&);

    void
    operator<< (::xercesc::DOMAttr&, const Script&);

    void
    operator<< (::xml_schema::list_stream&,
                const Script&);

    void
    operator<< (::xercesc::DOMElement&, const Color&);

    void
    operator<< (::xercesc::DOMAttr&, const Color&);

    void
    operator<< (::xml_schema::list_stream&,
                const Color&);

    void
    operator<< (::xercesc::DOMElement&, const Text&);

    void
    operator<< (::xercesc::DOMAttr&, const Text&);

    void
    operator<< (::xml_schema::list_stream&,
                const Text&);

    void
    operator<< (::xercesc::DOMElement&, const Character&);

    void
    operator<< (::xercesc::DOMAttr&, const Character&);

    void
    operator<< (::xml_schema::list_stream&,
                const Character&);

    void
    operator<< (::xercesc::DOMElement&, const Charset&);

    void
    operator<< (::xercesc::DOMAttr&, const Charset&);

    void
    operator<< (::xml_schema::list_stream&,
                const Charset&);

    void
    operator<< (::xercesc::DOMElement&, const Charsets&);

    void
    operator<< (::xercesc::DOMAttr&, const Charsets&);

    void
    operator<< (::xml_schema::list_stream&,
                const Charsets&);

    void
    operator<< (::xercesc::DOMElement&, const ContentType&);

    void
    operator<< (::xercesc::DOMAttr&, const ContentType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ContentType&);

    void
    operator<< (::xercesc::DOMElement&, const ContentTypes&);

    void
    operator<< (::xercesc::DOMAttr&, const ContentTypes&);

    void
    operator<< (::xml_schema::list_stream&,
                const ContentTypes&);

    void
    operator<< (::xercesc::DOMElement&, const Datetime&);

    void
    operator<< (::xercesc::DOMAttr&, const Datetime&);

    void
    operator<< (::xml_schema::list_stream&,
                const Datetime&);

    void
    operator<< (::xercesc::DOMElement&, const FPI&);

    void
    operator<< (::xercesc::DOMAttr&, const FPI&);

    void
    operator<< (::xml_schema::list_stream&,
                const FPI&);

    void
    operator<< (::xercesc::DOMElement&, const FrameTarget&);

    void
    operator<< (::xercesc::DOMAttr&, const FrameTarget&);

    void
    operator<< (::xml_schema::list_stream&,
                const FrameTarget&);

    void
    operator<< (::xercesc::DOMElement&, const LanguageCode&);

    void
    operator<< (::xercesc::DOMAttr&, const LanguageCode&);

    void
    operator<< (::xml_schema::list_stream&,
                const LanguageCode&);

    void
    operator<< (::xercesc::DOMElement&, const LanguageCodes&);

    void
    operator<< (::xercesc::DOMAttr&, const LanguageCodes&);

    void
    operator<< (::xml_schema::list_stream&,
                const LanguageCodes&);

    void
    operator<< (::xercesc::DOMElement&, const URI&);

    void
    operator<< (::xercesc::DOMAttr&, const URI&);

    void
    operator<< (::xml_schema::list_stream&,
                const URI&);

    void
    operator<< (::xercesc::DOMElement&, const URIs&);

    void
    operator<< (::xercesc::DOMAttr&, const URIs&);

    void
    operator<< (::xml_schema::list_stream&,
                const URIs&);

    void
    operator<< (::xercesc::DOMElement&, const URIREF&);

    void
    operator<< (::xercesc::DOMAttr&, const URIREF&);

    void
    operator<< (::xml_schema::list_stream&,
                const URIREF&);

    void
    operator<< (::xercesc::DOMElement&, const MultiLengths&);

    void
    operator<< (::xercesc::DOMAttr&, const MultiLengths&);

    void
    operator<< (::xml_schema::list_stream&,
                const MultiLengths&);

    void
    operator<< (::xercesc::DOMElement&, const CDATA&);

    void
    operator<< (::xercesc::DOMAttr&, const CDATA&);

    void
    operator<< (::xml_schema::list_stream&,
                const CDATA&);

    void
    operator<< (::xercesc::DOMElement&, const CURIE&);

    void
    operator<< (::xercesc::DOMAttr&, const CURIE&);

    void
    operator<< (::xml_schema::list_stream&,
                const CURIE&);

    void
    operator<< (::xercesc::DOMElement&, const CURIEs&);

    void
    operator<< (::xercesc::DOMAttr&, const CURIEs&);

    void
    operator<< (::xml_schema::list_stream&,
                const CURIEs&);

    void
    operator<< (::xercesc::DOMElement&, const SafeCURIE&);

    void
    operator<< (::xercesc::DOMAttr&, const SafeCURIE&);

    void
    operator<< (::xml_schema::list_stream&,
                const SafeCURIE&);

    void
    operator<< (::xercesc::DOMElement&, const SafeCURIEs&);

    void
    operator<< (::xercesc::DOMAttr&, const SafeCURIEs&);

    void
    operator<< (::xml_schema::list_stream&,
                const SafeCURIEs&);

    void
    operator<< (::xercesc::DOMElement&, const URIorSafeCURIE&);

    void
    operator<< (::xercesc::DOMAttr&, const URIorSafeCURIE&);

    void
    operator<< (::xml_schema::list_stream&,
                const URIorSafeCURIE&);

    void
    operator<< (::xercesc::DOMElement&, const URIorSafeCURIEs&);

    void
    operator<< (::xercesc::DOMAttr&, const URIorSafeCURIEs&);

    void
    operator<< (::xml_schema::list_stream&,
                const URIorSafeCURIEs&);

    void
    operator<< (::xercesc::DOMElement&, const Length_member&);

    void
    operator<< (::xercesc::DOMAttr&, const Length_member&);

    void
    operator<< (::xml_schema::list_stream&,
                const Length_member&);

    void
    operator<< (::xercesc::DOMElement&, const MultiLength_member&);

    void
    operator<< (::xercesc::DOMAttr&, const MultiLength_member&);

    void
    operator<< (::xml_schema::list_stream&,
                const MultiLength_member&);

    void
    operator<< (::xercesc::DOMElement&, const Color_member&);

    void
    operator<< (::xercesc::DOMAttr&, const Color_member&);

    void
    operator<< (::xml_schema::list_stream&,
                const Color_member&);

    void
    operator<< (::xercesc::DOMElement&, const FrameTarget_member&);

    void
    operator<< (::xercesc::DOMAttr&, const FrameTarget_member&);

    void
    operator<< (::xml_schema::list_stream&,
                const FrameTarget_member&);

    void
    operator<< (::xercesc::DOMElement&, const FrameTarget_member1&);

    void
    operator<< (::xercesc::DOMAttr&, const FrameTarget_member1&);

    void
    operator<< (::xml_schema::list_stream&,
                const FrameTarget_member1&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XHTML_DATATYPES_1_HXX
