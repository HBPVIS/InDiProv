// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "xhtml-datatypes-1.hxx"

namespace xhtml
{
  namespace datatypes
  {
    // Length
    //

    Length::
    Length (const char* s)
    : ::xml_schema::string (s)
    {
    }

    Length::
    Length (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    Length::
    Length (const Length& o,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // LinkTypes
    //

    LinkTypes::
    LinkTypes ()
    : ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char > (this)
    {
    }

    LinkTypes::
    LinkTypes (size_type n, const ::xml_schema::nmtoken& x)
    : ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char > (n, x, this)
    {
    }

    LinkTypes::
    LinkTypes (const LinkTypes& o,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::simple_type (o, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char > (o, f, this)
    {
    }

    // MediaDesc
    // 


    // MultiLength
    //

    MultiLength::
    MultiLength (const char* s)
    : ::xml_schema::string (s)
    {
    }

    MultiLength::
    MultiLength (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    MultiLength::
    MultiLength (const MultiLength& o,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // Number
    // 


    // Pixels
    // 


    // Script
    // 


    // Color
    //

    Color::
    Color (const char* s)
    : ::xml_schema::string (s)
    {
    }

    Color::
    Color (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    Color::
    Color (const Color& o,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // Text
    // 


    // Character
    // 


    // Charset
    // 


    // Charsets
    //

    Charsets::
    Charsets ()
    : ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char > (this)
    {
    }

    Charsets::
    Charsets (size_type n, const ::xhtml::datatypes::Charset& x)
    : ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char > (n, x, this)
    {
    }

    Charsets::
    Charsets (const Charsets& o,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::simple_type (o, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char > (o, f, this)
    {
    }

    // ContentType
    // 


    // ContentTypes
    // 


    // Datetime
    // 


    // FPI
    // 


    // FrameTarget
    //

    FrameTarget::
    FrameTarget (const char* s)
    : ::xml_schema::string (s)
    {
    }

    FrameTarget::
    FrameTarget (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    FrameTarget::
    FrameTarget (const FrameTarget& o,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // LanguageCode
    // 


    // LanguageCodes
    // 


    // URI
    // 


    // URIs
    //

    URIs::
    URIs ()
    : ::xsd::cxx::tree::list< ::xml_schema::uri, char > (this)
    {
    }

    URIs::
    URIs (size_type n, const ::xml_schema::uri& x)
    : ::xsd::cxx::tree::list< ::xml_schema::uri, char > (n, x, this)
    {
    }

    URIs::
    URIs (const URIs& o,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::simple_type (o, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::uri, char > (o, f, this)
    {
    }

    // URIREF
    // 


    // MultiLengths
    // 


    // CDATA
    // 


    // CURIE
    // 


    // CURIEs
    //

    CURIEs::
    CURIEs ()
    : ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char > (this)
    {
    }

    CURIEs::
    CURIEs (size_type n, const ::xhtml::datatypes::CURIE& x)
    : ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char > (n, x, this)
    {
    }

    CURIEs::
    CURIEs (const CURIEs& o,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::simple_type (o, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char > (o, f, this)
    {
    }

    // SafeCURIE
    // 


    // SafeCURIEs
    //

    SafeCURIEs::
    SafeCURIEs ()
    : ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char > (this)
    {
    }

    SafeCURIEs::
    SafeCURIEs (size_type n, const ::xhtml::datatypes::SafeCURIE& x)
    : ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char > (n, x, this)
    {
    }

    SafeCURIEs::
    SafeCURIEs (const SafeCURIEs& o,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::simple_type (o, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char > (o, f, this)
    {
    }

    // URIorSafeCURIE
    //

    URIorSafeCURIE::
    URIorSafeCURIE (const char* s)
    : ::xml_schema::string (s)
    {
    }

    URIorSafeCURIE::
    URIorSafeCURIE (const ::std::string& s)
    : ::xml_schema::string (s)
    {
    }

    URIorSafeCURIE::
    URIorSafeCURIE (const URIorSafeCURIE& o,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (o, f, c)
    {
    }

    // URIorSafeCURIEs
    //

    URIorSafeCURIEs::
    URIorSafeCURIEs ()
    : ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char > (this)
    {
    }

    URIorSafeCURIEs::
    URIorSafeCURIEs (size_type n, const ::xhtml::datatypes::URIorSafeCURIE& x)
    : ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char > (n, x, this)
    {
    }

    URIorSafeCURIEs::
    URIorSafeCURIEs (const URIorSafeCURIEs& o,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::simple_type (o, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char > (o, f, this)
    {
    }

    // Length_member
    // 


    // MultiLength_member
    // 


    // Color_member
    // 


    // FrameTarget_member
    // 

    FrameTarget_member::
    FrameTarget_member (value v)
    : ::xml_schema::nmtoken (_xsd_FrameTarget_member_literals_[v])
    {
    }

    FrameTarget_member::
    FrameTarget_member (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    FrameTarget_member::
    FrameTarget_member (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    FrameTarget_member::
    FrameTarget_member (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    FrameTarget_member::
    FrameTarget_member (const FrameTarget_member& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    FrameTarget_member& FrameTarget_member::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_FrameTarget_member_literals_[v]);

      return *this;
    }


    // FrameTarget_member1
    // 
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xhtml
{
  namespace datatypes
  {
    // Length
    //

    Length::
    Length (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    Length::
    Length (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    Length::
    Length (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    Length* Length::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Length (*this, f, c);
    }

    // LinkTypes
    //

    LinkTypes::
    LinkTypes (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::simple_type (e, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char > (e, f, this)
    {
    }

    LinkTypes::
    LinkTypes (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::simple_type (a, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char > (a, f, this)
    {
    }

    LinkTypes::
    LinkTypes (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::simple_type (s, e, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char > (s, e, f, this)
    {
    }

    LinkTypes* LinkTypes::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinkTypes (*this, f, c);
    }

    LinkTypes::
    ~LinkTypes ()
    {
    }

    // MediaDesc
    //

    MediaDesc::
    MediaDesc ()
    : ::xml_schema::string ()
    {
    }

    MediaDesc::
    MediaDesc (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    MediaDesc::
    MediaDesc (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    MediaDesc::
    MediaDesc (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    MediaDesc::
    MediaDesc (const MediaDesc& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    MediaDesc::
    MediaDesc (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    MediaDesc::
    MediaDesc (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    MediaDesc::
    MediaDesc (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    MediaDesc* MediaDesc::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MediaDesc (*this, f, c);
    }

    MediaDesc::
    ~MediaDesc ()
    {
    }

    // MultiLength
    //

    MultiLength::
    MultiLength (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    MultiLength::
    MultiLength (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    MultiLength::
    MultiLength (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    MultiLength* MultiLength::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MultiLength (*this, f, c);
    }

    // Number
    //

    Number::
    Number (const ::xml_schema::non_negative_integer& _xsd_non_negative_integer_base)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (_xsd_non_negative_integer_base)
    {
    }

    Number::
    Number (const Number& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (x, f, c)
    {
    }

    Number::
    Number (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (e, f, c)
    {
    }

    Number::
    Number (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (a, f, c)
    {
    }

    Number::
    Number (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (s, e, f, c)
    {
    }

    Number* Number::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Number (*this, f, c);
    }

    Number::
    ~Number ()
    {
    }

    // Pixels
    //

    Pixels::
    Pixels (const ::xml_schema::non_negative_integer& _xsd_non_negative_integer_base)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (_xsd_non_negative_integer_base)
    {
    }

    Pixels::
    Pixels (const Pixels& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (x, f, c)
    {
    }

    Pixels::
    Pixels (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (e, f, c)
    {
    }

    Pixels::
    Pixels (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (a, f, c)
    {
    }

    Pixels::
    Pixels (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (s, e, f, c)
    {
    }

    Pixels* Pixels::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Pixels (*this, f, c);
    }

    Pixels::
    ~Pixels ()
    {
    }

    // Script
    //

    Script::
    Script ()
    : ::xml_schema::string ()
    {
    }

    Script::
    Script (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Script::
    Script (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Script::
    Script (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Script::
    Script (const Script& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    Script::
    Script (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    Script::
    Script (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    Script::
    Script (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    Script* Script::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Script (*this, f, c);
    }

    Script::
    ~Script ()
    {
    }

    // Color
    //

    Color::
    Color (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    Color::
    Color (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    Color::
    Color (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    Color* Color::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Color (*this, f, c);
    }

    // Text
    //

    Text::
    Text ()
    : ::xml_schema::string ()
    {
    }

    Text::
    Text (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Text::
    Text (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Text::
    Text (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Text::
    Text (const Text& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    Text::
    Text (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    Text::
    Text (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    Text::
    Text (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    Text* Text::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Text (*this, f, c);
    }

    Text::
    ~Text ()
    {
    }

    // Character
    //

    Character::
    Character ()
    : ::xml_schema::string ()
    {
    }

    Character::
    Character (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Character::
    Character (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Character::
    Character (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Character::
    Character (const Character& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    Character::
    Character (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    Character::
    Character (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    Character::
    Character (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    Character* Character::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Character (*this, f, c);
    }

    Character::
    ~Character ()
    {
    }

    // Charset
    //

    Charset::
    Charset ()
    : ::xml_schema::string ()
    {
    }

    Charset::
    Charset (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Charset::
    Charset (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Charset::
    Charset (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    Charset::
    Charset (const Charset& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    Charset::
    Charset (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    Charset::
    Charset (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    Charset::
    Charset (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    Charset* Charset::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Charset (*this, f, c);
    }

    Charset::
    ~Charset ()
    {
    }

    // Charsets
    //

    Charsets::
    Charsets (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::simple_type (e, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char > (e, f, this)
    {
    }

    Charsets::
    Charsets (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::simple_type (a, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char > (a, f, this)
    {
    }

    Charsets::
    Charsets (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::simple_type (s, e, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char > (s, e, f, this)
    {
    }

    Charsets* Charsets::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Charsets (*this, f, c);
    }

    Charsets::
    ~Charsets ()
    {
    }

    // ContentType
    //

    ContentType::
    ContentType ()
    : ::xml_schema::string ()
    {
    }

    ContentType::
    ContentType (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    ContentType::
    ContentType (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    ContentType::
    ContentType (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    ContentType::
    ContentType (const ContentType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    ContentType::
    ContentType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    ContentType::
    ContentType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    ContentType::
    ContentType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    ContentType* ContentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ContentType (*this, f, c);
    }

    ContentType::
    ~ContentType ()
    {
    }

    // ContentTypes
    //

    ContentTypes::
    ContentTypes ()
    : ::xml_schema::string ()
    {
    }

    ContentTypes::
    ContentTypes (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    ContentTypes::
    ContentTypes (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    ContentTypes::
    ContentTypes (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    ContentTypes::
    ContentTypes (const ContentTypes& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    ContentTypes::
    ContentTypes (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    ContentTypes::
    ContentTypes (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    ContentTypes::
    ContentTypes (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    ContentTypes* ContentTypes::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ContentTypes (*this, f, c);
    }

    ContentTypes::
    ~ContentTypes ()
    {
    }

    // Datetime
    //

    Datetime::
    Datetime (const ::xml_schema::date_time& _xsd_date_time_base)
    : ::xml_schema::date_time (_xsd_date_time_base)
    {
    }

    Datetime::
    Datetime (const Datetime& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::date_time (x, f, c)
    {
    }

    Datetime::
    Datetime (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::date_time (e, f, c)
    {
    }

    Datetime::
    Datetime (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::date_time (a, f, c)
    {
    }

    Datetime::
    Datetime (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::date_time (s, e, f, c)
    {
    }

    Datetime* Datetime::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Datetime (*this, f, c);
    }

    Datetime::
    ~Datetime ()
    {
    }

    // FPI
    //

    FPI::
    FPI ()
    : ::xml_schema::normalized_string ()
    {
    }

    FPI::
    FPI (const char* _xsd_normalized_string_base)
    : ::xml_schema::normalized_string (_xsd_normalized_string_base)
    {
    }

    FPI::
    FPI (const ::std::string& _xsd_normalized_string_base)
    : ::xml_schema::normalized_string (_xsd_normalized_string_base)
    {
    }

    FPI::
    FPI (const ::xml_schema::normalized_string& _xsd_normalized_string_base)
    : ::xml_schema::normalized_string (_xsd_normalized_string_base)
    {
    }

    FPI::
    FPI (const FPI& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (x, f, c)
    {
    }

    FPI::
    FPI (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (e, f, c)
    {
    }

    FPI::
    FPI (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (a, f, c)
    {
    }

    FPI::
    FPI (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
    : ::xml_schema::normalized_string (s, e, f, c)
    {
    }

    FPI* FPI::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FPI (*this, f, c);
    }

    FPI::
    ~FPI ()
    {
    }

    // FrameTarget
    //

    FrameTarget::
    FrameTarget (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    FrameTarget::
    FrameTarget (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    FrameTarget::
    FrameTarget (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    FrameTarget* FrameTarget::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FrameTarget (*this, f, c);
    }

    // LanguageCode
    //

    LanguageCode::
    LanguageCode (const char* _xsd_language_base)
    : ::xml_schema::language (_xsd_language_base)
    {
    }

    LanguageCode::
    LanguageCode (const ::std::string& _xsd_language_base)
    : ::xml_schema::language (_xsd_language_base)
    {
    }

    LanguageCode::
    LanguageCode (const ::xml_schema::language& _xsd_language_base)
    : ::xml_schema::language (_xsd_language_base)
    {
    }

    LanguageCode::
    LanguageCode (const LanguageCode& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::language (x, f, c)
    {
    }

    LanguageCode::
    LanguageCode (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::language (e, f, c)
    {
    }

    LanguageCode::
    LanguageCode (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::language (a, f, c)
    {
    }

    LanguageCode::
    LanguageCode (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::language (s, e, f, c)
    {
    }

    LanguageCode* LanguageCode::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LanguageCode (*this, f, c);
    }

    LanguageCode::
    ~LanguageCode ()
    {
    }

    // LanguageCodes
    //

    LanguageCodes::
    LanguageCodes ()
    : ::xml_schema::string ()
    {
    }

    LanguageCodes::
    LanguageCodes (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    LanguageCodes::
    LanguageCodes (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    LanguageCodes::
    LanguageCodes (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    LanguageCodes::
    LanguageCodes (const LanguageCodes& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    LanguageCodes::
    LanguageCodes (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    LanguageCodes::
    LanguageCodes (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    LanguageCodes::
    LanguageCodes (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    LanguageCodes* LanguageCodes::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LanguageCodes (*this, f, c);
    }

    LanguageCodes::
    ~LanguageCodes ()
    {
    }

    // URI
    //

    URI::
    URI (const ::xml_schema::uri& _xsd_uri_base)
    : ::xml_schema::uri (_xsd_uri_base)
    {
    }

    URI::
    URI (const URI& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
    : ::xml_schema::uri (x, f, c)
    {
    }

    URI::
    URI (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
    : ::xml_schema::uri (e, f, c)
    {
    }

    URI::
    URI (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
    : ::xml_schema::uri (a, f, c)
    {
    }

    URI::
    URI (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
    : ::xml_schema::uri (s, e, f, c)
    {
    }

    URI* URI::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class URI (*this, f, c);
    }

    URI::
    ~URI ()
    {
    }

    // URIs
    //

    URIs::
    URIs (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::simple_type (e, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::uri, char > (e, f, this)
    {
    }

    URIs::
    URIs (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::simple_type (a, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::uri, char > (a, f, this)
    {
    }

    URIs::
    URIs (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::simple_type (s, e, f, c),
      ::xsd::cxx::tree::list< ::xml_schema::uri, char > (s, e, f, this)
    {
    }

    URIs* URIs::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class URIs (*this, f, c);
    }

    URIs::
    ~URIs ()
    {
    }

    // URIREF
    //

    URIREF::
    URIREF ()
    : ::xml_schema::string ()
    {
    }

    URIREF::
    URIREF (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    URIREF::
    URIREF (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    URIREF::
    URIREF (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    URIREF::
    URIREF (const URIREF& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    URIREF::
    URIREF (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    URIREF::
    URIREF (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    URIREF::
    URIREF (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    URIREF* URIREF::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class URIREF (*this, f, c);
    }

    URIREF::
    ~URIREF ()
    {
    }

    // MultiLengths
    //

    MultiLengths::
    MultiLengths ()
    : ::xml_schema::string ()
    {
    }

    MultiLengths::
    MultiLengths (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    MultiLengths::
    MultiLengths (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    MultiLengths::
    MultiLengths (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    MultiLengths::
    MultiLengths (const MultiLengths& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    MultiLengths::
    MultiLengths (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    MultiLengths::
    MultiLengths (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    MultiLengths::
    MultiLengths (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    MultiLengths* MultiLengths::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MultiLengths (*this, f, c);
    }

    MultiLengths::
    ~MultiLengths ()
    {
    }

    // CDATA
    //

    CDATA::
    CDATA ()
    : ::xml_schema::string ()
    {
    }

    CDATA::
    CDATA (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    CDATA::
    CDATA (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    CDATA::
    CDATA (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    CDATA::
    CDATA (const CDATA& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    CDATA::
    CDATA (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    CDATA::
    CDATA (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    CDATA::
    CDATA (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    CDATA* CDATA::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CDATA (*this, f, c);
    }

    CDATA::
    ~CDATA ()
    {
    }

    // CURIE
    //

    CURIE::
    CURIE ()
    : ::xml_schema::string ()
    {
    }

    CURIE::
    CURIE (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    CURIE::
    CURIE (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    CURIE::
    CURIE (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    CURIE::
    CURIE (const CURIE& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    CURIE::
    CURIE (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    CURIE::
    CURIE (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    CURIE::
    CURIE (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    CURIE* CURIE::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CURIE (*this, f, c);
    }

    CURIE::
    ~CURIE ()
    {
    }

    // CURIEs
    //

    CURIEs::
    CURIEs (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::simple_type (e, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char > (e, f, this)
    {
    }

    CURIEs::
    CURIEs (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::simple_type (a, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char > (a, f, this)
    {
    }

    CURIEs::
    CURIEs (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::simple_type (s, e, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char > (s, e, f, this)
    {
    }

    CURIEs* CURIEs::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CURIEs (*this, f, c);
    }

    CURIEs::
    ~CURIEs ()
    {
    }

    // SafeCURIE
    //

    SafeCURIE::
    SafeCURIE ()
    : ::xml_schema::string ()
    {
    }

    SafeCURIE::
    SafeCURIE (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    SafeCURIE::
    SafeCURIE (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    SafeCURIE::
    SafeCURIE (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    SafeCURIE::
    SafeCURIE (const SafeCURIE& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    SafeCURIE::
    SafeCURIE (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    SafeCURIE::
    SafeCURIE (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    SafeCURIE::
    SafeCURIE (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    SafeCURIE* SafeCURIE::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SafeCURIE (*this, f, c);
    }

    SafeCURIE::
    ~SafeCURIE ()
    {
    }

    // SafeCURIEs
    //

    SafeCURIEs::
    SafeCURIEs (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::simple_type (e, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char > (e, f, this)
    {
    }

    SafeCURIEs::
    SafeCURIEs (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::simple_type (a, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char > (a, f, this)
    {
    }

    SafeCURIEs::
    SafeCURIEs (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::simple_type (s, e, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char > (s, e, f, this)
    {
    }

    SafeCURIEs* SafeCURIEs::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SafeCURIEs (*this, f, c);
    }

    SafeCURIEs::
    ~SafeCURIEs ()
    {
    }

    // URIorSafeCURIE
    //

    URIorSafeCURIE::
    URIorSafeCURIE (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    URIorSafeCURIE::
    URIorSafeCURIE (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    URIorSafeCURIE::
    URIorSafeCURIE (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    URIorSafeCURIE* URIorSafeCURIE::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class URIorSafeCURIE (*this, f, c);
    }

    // URIorSafeCURIEs
    //

    URIorSafeCURIEs::
    URIorSafeCURIEs (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::simple_type (e, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char > (e, f, this)
    {
    }

    URIorSafeCURIEs::
    URIorSafeCURIEs (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::simple_type (a, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char > (a, f, this)
    {
    }

    URIorSafeCURIEs::
    URIorSafeCURIEs (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::simple_type (s, e, f, c),
      ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char > (s, e, f, this)
    {
    }

    URIorSafeCURIEs* URIorSafeCURIEs::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class URIorSafeCURIEs (*this, f, c);
    }

    URIorSafeCURIEs::
    ~URIorSafeCURIEs ()
    {
    }

    // Length_member
    //

    Length_member::
    Length_member ()
    : ::xml_schema::token ()
    {
    }

    Length_member::
    Length_member (const char* _xsd_token_base)
    : ::xml_schema::token (_xsd_token_base)
    {
    }

    Length_member::
    Length_member (const ::std::string& _xsd_token_base)
    : ::xml_schema::token (_xsd_token_base)
    {
    }

    Length_member::
    Length_member (const ::xml_schema::token& _xsd_token_base)
    : ::xml_schema::token (_xsd_token_base)
    {
    }

    Length_member::
    Length_member (const Length_member& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::token (x, f, c)
    {
    }

    Length_member::
    Length_member (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::token (e, f, c)
    {
    }

    Length_member::
    Length_member (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::token (a, f, c)
    {
    }

    Length_member::
    Length_member (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::token (s, e, f, c)
    {
    }

    Length_member* Length_member::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Length_member (*this, f, c);
    }

    Length_member::
    ~Length_member ()
    {
    }

    // MultiLength_member
    //

    MultiLength_member::
    MultiLength_member ()
    : ::xml_schema::token ()
    {
    }

    MultiLength_member::
    MultiLength_member (const char* _xsd_token_base)
    : ::xml_schema::token (_xsd_token_base)
    {
    }

    MultiLength_member::
    MultiLength_member (const ::std::string& _xsd_token_base)
    : ::xml_schema::token (_xsd_token_base)
    {
    }

    MultiLength_member::
    MultiLength_member (const ::xml_schema::token& _xsd_token_base)
    : ::xml_schema::token (_xsd_token_base)
    {
    }

    MultiLength_member::
    MultiLength_member (const MultiLength_member& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::token (x, f, c)
    {
    }

    MultiLength_member::
    MultiLength_member (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::token (e, f, c)
    {
    }

    MultiLength_member::
    MultiLength_member (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::token (a, f, c)
    {
    }

    MultiLength_member::
    MultiLength_member (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::token (s, e, f, c)
    {
    }

    MultiLength_member* MultiLength_member::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MultiLength_member (*this, f, c);
    }

    MultiLength_member::
    ~MultiLength_member ()
    {
    }

    // Color_member
    //

    Color_member::
    Color_member ()
    : ::xml_schema::token ()
    {
    }

    Color_member::
    Color_member (const char* _xsd_token_base)
    : ::xml_schema::token (_xsd_token_base)
    {
    }

    Color_member::
    Color_member (const ::std::string& _xsd_token_base)
    : ::xml_schema::token (_xsd_token_base)
    {
    }

    Color_member::
    Color_member (const ::xml_schema::token& _xsd_token_base)
    : ::xml_schema::token (_xsd_token_base)
    {
    }

    Color_member::
    Color_member (const Color_member& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::token (x, f, c)
    {
    }

    Color_member::
    Color_member (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::token (e, f, c)
    {
    }

    Color_member::
    Color_member (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::token (a, f, c)
    {
    }

    Color_member::
    Color_member (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::token (s, e, f, c)
    {
    }

    Color_member* Color_member::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Color_member (*this, f, c);
    }

    Color_member::
    ~Color_member ()
    {
    }

    // FrameTarget_member
    //

    FrameTarget_member::
    FrameTarget_member (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_FrameTarget_member_convert ();
    }

    FrameTarget_member::
    FrameTarget_member (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_FrameTarget_member_convert ();
    }

    FrameTarget_member::
    FrameTarget_member (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_FrameTarget_member_convert ();
    }

    FrameTarget_member* FrameTarget_member::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FrameTarget_member (*this, f, c);
    }

    FrameTarget_member::value FrameTarget_member::
    _xsd_FrameTarget_member_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FrameTarget_member_literals_);
      const value* i (::std::lower_bound (
                        _xsd_FrameTarget_member_indexes_,
                        _xsd_FrameTarget_member_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_FrameTarget_member_indexes_ + 4 || _xsd_FrameTarget_member_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const FrameTarget_member::
    _xsd_FrameTarget_member_literals_[4] =
    {
      "_blank",
      "_self",
      "_parent",
      "_top"
    };

    const FrameTarget_member::value FrameTarget_member::
    _xsd_FrameTarget_member_indexes_[4] =
    {
      ::xhtml::datatypes::FrameTarget_member::_blank,
      ::xhtml::datatypes::FrameTarget_member::_parent,
      ::xhtml::datatypes::FrameTarget_member::_self,
      ::xhtml::datatypes::FrameTarget_member::_top
    };

    // FrameTarget_member1
    //

    FrameTarget_member1::
    FrameTarget_member1 ()
    : ::xml_schema::string ()
    {
    }

    FrameTarget_member1::
    FrameTarget_member1 (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    FrameTarget_member1::
    FrameTarget_member1 (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    FrameTarget_member1::
    FrameTarget_member1 (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    FrameTarget_member1::
    FrameTarget_member1 (const FrameTarget_member1& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    FrameTarget_member1::
    FrameTarget_member1 (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    FrameTarget_member1::
    FrameTarget_member1 (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    FrameTarget_member1::
    FrameTarget_member1 (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    FrameTarget_member1* FrameTarget_member1::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FrameTarget_member1 (*this, f, c);
    }

    FrameTarget_member1::
    ~FrameTarget_member1 ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xhtml
{
  namespace datatypes
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace xhtml
{
  namespace datatypes
  {
    void
    operator<< (::xercesc::DOMElement& e, const Length& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Length& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Length& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const LinkTypes& i)
    {
      e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const LinkTypes& i)
    {
      a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char >& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const LinkTypes& i)
    {
      l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::nmtoken, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const MediaDesc& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const MediaDesc& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const MediaDesc& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const MultiLength& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const MultiLength& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const MultiLength& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Number& i)
    {
      e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Number& i)
    {
      a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Number& i)
    {
      l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Pixels& i)
    {
      e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Pixels& i)
    {
      a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Pixels& i)
    {
      l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Script& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Script& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Script& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Color& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Color& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Color& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Text& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Text& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Text& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Character& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Character& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Character& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Charset& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Charset& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Charset& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Charsets& i)
    {
      e << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Charsets& i)
    {
      a << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char >& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Charsets& i)
    {
      l << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::Charset, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const ContentType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const ContentType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ContentType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const ContentTypes& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const ContentTypes& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ContentTypes& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Datetime& i)
    {
      e << static_cast< const ::xml_schema::date_time& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Datetime& i)
    {
      a << static_cast< const ::xml_schema::date_time& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Datetime& i)
    {
      l << static_cast< const ::xml_schema::date_time& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const FPI& i)
    {
      e << static_cast< const ::xml_schema::normalized_string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const FPI& i)
    {
      a << static_cast< const ::xml_schema::normalized_string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const FPI& i)
    {
      l << static_cast< const ::xml_schema::normalized_string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const FrameTarget& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const FrameTarget& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const FrameTarget& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const LanguageCode& i)
    {
      e << static_cast< const ::xml_schema::language& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const LanguageCode& i)
    {
      a << static_cast< const ::xml_schema::language& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const LanguageCode& i)
    {
      l << static_cast< const ::xml_schema::language& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const LanguageCodes& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const LanguageCodes& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const LanguageCodes& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const URI& i)
    {
      e << static_cast< const ::xml_schema::uri& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const URI& i)
    {
      a << static_cast< const ::xml_schema::uri& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const URI& i)
    {
      l << static_cast< const ::xml_schema::uri& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const URIs& i)
    {
      e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::uri, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const URIs& i)
    {
      a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::uri, char >& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const URIs& i)
    {
      l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::uri, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const URIREF& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const URIREF& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const URIREF& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const MultiLengths& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const MultiLengths& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const MultiLengths& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const CDATA& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const CDATA& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CDATA& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const CURIE& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const CURIE& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CURIE& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const CURIEs& i)
    {
      e << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const CURIEs& i)
    {
      a << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char >& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CURIEs& i)
    {
      l << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::CURIE, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const SafeCURIE& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const SafeCURIE& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const SafeCURIE& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const SafeCURIEs& i)
    {
      e << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const SafeCURIEs& i)
    {
      a << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char >& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const SafeCURIEs& i)
    {
      l << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::SafeCURIE, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const URIorSafeCURIE& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const URIorSafeCURIE& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const URIorSafeCURIE& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const URIorSafeCURIEs& i)
    {
      e << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const URIorSafeCURIEs& i)
    {
      a << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char >& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const URIorSafeCURIEs& i)
    {
      l << static_cast< const ::xsd::cxx::tree::list< ::xhtml::datatypes::URIorSafeCURIE, char >& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Length_member& i)
    {
      e << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Length_member& i)
    {
      a << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Length_member& i)
    {
      l << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const MultiLength_member& i)
    {
      e << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const MultiLength_member& i)
    {
      a << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const MultiLength_member& i)
    {
      l << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const Color_member& i)
    {
      e << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const Color_member& i)
    {
      a << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const Color_member& i)
    {
      l << static_cast< const ::xml_schema::token& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const FrameTarget_member& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const FrameTarget_member& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const FrameTarget_member& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const FrameTarget_member1& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const FrameTarget_member1& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const FrameTarget_member1& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

