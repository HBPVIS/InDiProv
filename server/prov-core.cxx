// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "prov-core.hxx"

namespace prov
{
  // Entity
  // 

  const Entity::label_sequence& Entity::
  label () const
  {
    return this->label_;
  }

  Entity::label_sequence& Entity::
  label ()
  {
    return this->label_;
  }

  void Entity::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Entity::location_sequence& Entity::
  location () const
  {
    return this->location_;
  }

  Entity::location_sequence& Entity::
  location ()
  {
    return this->location_;
  }

  void Entity::
  location (const location_sequence& s)
  {
    this->location_ = s;
  }

  const Entity::type_sequence& Entity::
  type () const
  {
    return this->type_;
  }

  Entity::type_sequence& Entity::
  type ()
  {
    return this->type_;
  }

  void Entity::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Entity::value_optional& Entity::
  value () const
  {
    return this->value_;
  }

  Entity::value_optional& Entity::
  value ()
  {
    return this->value_;
  }

  void Entity::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void Entity::
  value (const value_optional& x)
  {
    this->value_ = x;
  }

  void Entity::
  value (::std::auto_ptr< value_type > x)
  {
    this->value_.set (x);
  }

  const Entity::id_optional& Entity::
  id () const
  {
    return this->id_;
  }

  Entity::id_optional& Entity::
  id ()
  {
    return this->id_;
  }

  void Entity::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Entity::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Entity::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Activity
  // 

  const Activity::startTime_optional& Activity::
  startTime () const
  {
    return this->startTime_;
  }

  Activity::startTime_optional& Activity::
  startTime ()
  {
    return this->startTime_;
  }

  void Activity::
  startTime (const startTime_type& x)
  {
    this->startTime_.set (x);
  }

  void Activity::
  startTime (const startTime_optional& x)
  {
    this->startTime_ = x;
  }

  void Activity::
  startTime (::std::auto_ptr< startTime_type > x)
  {
    this->startTime_.set (x);
  }

  const Activity::endTime_optional& Activity::
  endTime () const
  {
    return this->endTime_;
  }

  Activity::endTime_optional& Activity::
  endTime ()
  {
    return this->endTime_;
  }

  void Activity::
  endTime (const endTime_type& x)
  {
    this->endTime_.set (x);
  }

  void Activity::
  endTime (const endTime_optional& x)
  {
    this->endTime_ = x;
  }

  void Activity::
  endTime (::std::auto_ptr< endTime_type > x)
  {
    this->endTime_.set (x);
  }

  const Activity::label_sequence& Activity::
  label () const
  {
    return this->label_;
  }

  Activity::label_sequence& Activity::
  label ()
  {
    return this->label_;
  }

  void Activity::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Activity::location_sequence& Activity::
  location () const
  {
    return this->location_;
  }

  Activity::location_sequence& Activity::
  location ()
  {
    return this->location_;
  }

  void Activity::
  location (const location_sequence& s)
  {
    this->location_ = s;
  }

  const Activity::type_sequence& Activity::
  type () const
  {
    return this->type_;
  }

  Activity::type_sequence& Activity::
  type ()
  {
    return this->type_;
  }

  void Activity::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Activity::id_optional& Activity::
  id () const
  {
    return this->id_;
  }

  Activity::id_optional& Activity::
  id ()
  {
    return this->id_;
  }

  void Activity::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Activity::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Activity::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Generation
  // 

  const Generation::entity_type& Generation::
  entity () const
  {
    return this->entity_.get ();
  }

  Generation::entity_type& Generation::
  entity ()
  {
    return this->entity_.get ();
  }

  void Generation::
  entity (const entity_type& x)
  {
    this->entity_.set (x);
  }

  void Generation::
  entity (::std::auto_ptr< entity_type > x)
  {
    this->entity_.set (x);
  }

  const Generation::activity_optional& Generation::
  activity () const
  {
    return this->activity_;
  }

  Generation::activity_optional& Generation::
  activity ()
  {
    return this->activity_;
  }

  void Generation::
  activity (const activity_type& x)
  {
    this->activity_.set (x);
  }

  void Generation::
  activity (const activity_optional& x)
  {
    this->activity_ = x;
  }

  void Generation::
  activity (::std::auto_ptr< activity_type > x)
  {
    this->activity_.set (x);
  }

  const Generation::time_optional& Generation::
  time () const
  {
    return this->time_;
  }

  Generation::time_optional& Generation::
  time ()
  {
    return this->time_;
  }

  void Generation::
  time (const time_type& x)
  {
    this->time_.set (x);
  }

  void Generation::
  time (const time_optional& x)
  {
    this->time_ = x;
  }

  void Generation::
  time (::std::auto_ptr< time_type > x)
  {
    this->time_.set (x);
  }

  const Generation::label_sequence& Generation::
  label () const
  {
    return this->label_;
  }

  Generation::label_sequence& Generation::
  label ()
  {
    return this->label_;
  }

  void Generation::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Generation::location_sequence& Generation::
  location () const
  {
    return this->location_;
  }

  Generation::location_sequence& Generation::
  location ()
  {
    return this->location_;
  }

  void Generation::
  location (const location_sequence& s)
  {
    this->location_ = s;
  }

  const Generation::role_sequence& Generation::
  role () const
  {
    return this->role_;
  }

  Generation::role_sequence& Generation::
  role ()
  {
    return this->role_;
  }

  void Generation::
  role (const role_sequence& s)
  {
    this->role_ = s;
  }

  const Generation::type_sequence& Generation::
  type () const
  {
    return this->type_;
  }

  Generation::type_sequence& Generation::
  type ()
  {
    return this->type_;
  }

  void Generation::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Generation::id_optional& Generation::
  id () const
  {
    return this->id_;
  }

  Generation::id_optional& Generation::
  id ()
  {
    return this->id_;
  }

  void Generation::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Generation::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Generation::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Usage
  // 

  const Usage::activity_type& Usage::
  activity () const
  {
    return this->activity_.get ();
  }

  Usage::activity_type& Usage::
  activity ()
  {
    return this->activity_.get ();
  }

  void Usage::
  activity (const activity_type& x)
  {
    this->activity_.set (x);
  }

  void Usage::
  activity (::std::auto_ptr< activity_type > x)
  {
    this->activity_.set (x);
  }

  const Usage::entity_optional& Usage::
  entity () const
  {
    return this->entity_;
  }

  Usage::entity_optional& Usage::
  entity ()
  {
    return this->entity_;
  }

  void Usage::
  entity (const entity_type& x)
  {
    this->entity_.set (x);
  }

  void Usage::
  entity (const entity_optional& x)
  {
    this->entity_ = x;
  }

  void Usage::
  entity (::std::auto_ptr< entity_type > x)
  {
    this->entity_.set (x);
  }

  const Usage::time_optional& Usage::
  time () const
  {
    return this->time_;
  }

  Usage::time_optional& Usage::
  time ()
  {
    return this->time_;
  }

  void Usage::
  time (const time_type& x)
  {
    this->time_.set (x);
  }

  void Usage::
  time (const time_optional& x)
  {
    this->time_ = x;
  }

  void Usage::
  time (::std::auto_ptr< time_type > x)
  {
    this->time_.set (x);
  }

  const Usage::label_sequence& Usage::
  label () const
  {
    return this->label_;
  }

  Usage::label_sequence& Usage::
  label ()
  {
    return this->label_;
  }

  void Usage::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Usage::location_sequence& Usage::
  location () const
  {
    return this->location_;
  }

  Usage::location_sequence& Usage::
  location ()
  {
    return this->location_;
  }

  void Usage::
  location (const location_sequence& s)
  {
    this->location_ = s;
  }

  const Usage::role_sequence& Usage::
  role () const
  {
    return this->role_;
  }

  Usage::role_sequence& Usage::
  role ()
  {
    return this->role_;
  }

  void Usage::
  role (const role_sequence& s)
  {
    this->role_ = s;
  }

  const Usage::type_sequence& Usage::
  type () const
  {
    return this->type_;
  }

  Usage::type_sequence& Usage::
  type ()
  {
    return this->type_;
  }

  void Usage::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Usage::id_optional& Usage::
  id () const
  {
    return this->id_;
  }

  Usage::id_optional& Usage::
  id ()
  {
    return this->id_;
  }

  void Usage::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Usage::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Usage::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Communication
  // 

  const Communication::informed_type& Communication::
  informed () const
  {
    return this->informed_.get ();
  }

  Communication::informed_type& Communication::
  informed ()
  {
    return this->informed_.get ();
  }

  void Communication::
  informed (const informed_type& x)
  {
    this->informed_.set (x);
  }

  void Communication::
  informed (::std::auto_ptr< informed_type > x)
  {
    this->informed_.set (x);
  }

  const Communication::informant_type& Communication::
  informant () const
  {
    return this->informant_.get ();
  }

  Communication::informant_type& Communication::
  informant ()
  {
    return this->informant_.get ();
  }

  void Communication::
  informant (const informant_type& x)
  {
    this->informant_.set (x);
  }

  void Communication::
  informant (::std::auto_ptr< informant_type > x)
  {
    this->informant_.set (x);
  }

  const Communication::label_sequence& Communication::
  label () const
  {
    return this->label_;
  }

  Communication::label_sequence& Communication::
  label ()
  {
    return this->label_;
  }

  void Communication::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Communication::type_sequence& Communication::
  type () const
  {
    return this->type_;
  }

  Communication::type_sequence& Communication::
  type ()
  {
    return this->type_;
  }

  void Communication::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Communication::id_optional& Communication::
  id () const
  {
    return this->id_;
  }

  Communication::id_optional& Communication::
  id ()
  {
    return this->id_;
  }

  void Communication::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Communication::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Communication::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Start
  // 

  const Start::activity_type& Start::
  activity () const
  {
    return this->activity_.get ();
  }

  Start::activity_type& Start::
  activity ()
  {
    return this->activity_.get ();
  }

  void Start::
  activity (const activity_type& x)
  {
    this->activity_.set (x);
  }

  void Start::
  activity (::std::auto_ptr< activity_type > x)
  {
    this->activity_.set (x);
  }

  const Start::trigger_optional& Start::
  trigger () const
  {
    return this->trigger_;
  }

  Start::trigger_optional& Start::
  trigger ()
  {
    return this->trigger_;
  }

  void Start::
  trigger (const trigger_type& x)
  {
    this->trigger_.set (x);
  }

  void Start::
  trigger (const trigger_optional& x)
  {
    this->trigger_ = x;
  }

  void Start::
  trigger (::std::auto_ptr< trigger_type > x)
  {
    this->trigger_.set (x);
  }

  const Start::starter_optional& Start::
  starter () const
  {
    return this->starter_;
  }

  Start::starter_optional& Start::
  starter ()
  {
    return this->starter_;
  }

  void Start::
  starter (const starter_type& x)
  {
    this->starter_.set (x);
  }

  void Start::
  starter (const starter_optional& x)
  {
    this->starter_ = x;
  }

  void Start::
  starter (::std::auto_ptr< starter_type > x)
  {
    this->starter_.set (x);
  }

  const Start::time_optional& Start::
  time () const
  {
    return this->time_;
  }

  Start::time_optional& Start::
  time ()
  {
    return this->time_;
  }

  void Start::
  time (const time_type& x)
  {
    this->time_.set (x);
  }

  void Start::
  time (const time_optional& x)
  {
    this->time_ = x;
  }

  void Start::
  time (::std::auto_ptr< time_type > x)
  {
    this->time_.set (x);
  }

  const Start::label_sequence& Start::
  label () const
  {
    return this->label_;
  }

  Start::label_sequence& Start::
  label ()
  {
    return this->label_;
  }

  void Start::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Start::location_sequence& Start::
  location () const
  {
    return this->location_;
  }

  Start::location_sequence& Start::
  location ()
  {
    return this->location_;
  }

  void Start::
  location (const location_sequence& s)
  {
    this->location_ = s;
  }

  const Start::role_sequence& Start::
  role () const
  {
    return this->role_;
  }

  Start::role_sequence& Start::
  role ()
  {
    return this->role_;
  }

  void Start::
  role (const role_sequence& s)
  {
    this->role_ = s;
  }

  const Start::type_sequence& Start::
  type () const
  {
    return this->type_;
  }

  Start::type_sequence& Start::
  type ()
  {
    return this->type_;
  }

  void Start::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Start::id_optional& Start::
  id () const
  {
    return this->id_;
  }

  Start::id_optional& Start::
  id ()
  {
    return this->id_;
  }

  void Start::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Start::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Start::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // End
  // 

  const End::activity_type& End::
  activity () const
  {
    return this->activity_.get ();
  }

  End::activity_type& End::
  activity ()
  {
    return this->activity_.get ();
  }

  void End::
  activity (const activity_type& x)
  {
    this->activity_.set (x);
  }

  void End::
  activity (::std::auto_ptr< activity_type > x)
  {
    this->activity_.set (x);
  }

  const End::trigger_optional& End::
  trigger () const
  {
    return this->trigger_;
  }

  End::trigger_optional& End::
  trigger ()
  {
    return this->trigger_;
  }

  void End::
  trigger (const trigger_type& x)
  {
    this->trigger_.set (x);
  }

  void End::
  trigger (const trigger_optional& x)
  {
    this->trigger_ = x;
  }

  void End::
  trigger (::std::auto_ptr< trigger_type > x)
  {
    this->trigger_.set (x);
  }

  const End::ender_optional& End::
  ender () const
  {
    return this->ender_;
  }

  End::ender_optional& End::
  ender ()
  {
    return this->ender_;
  }

  void End::
  ender (const ender_type& x)
  {
    this->ender_.set (x);
  }

  void End::
  ender (const ender_optional& x)
  {
    this->ender_ = x;
  }

  void End::
  ender (::std::auto_ptr< ender_type > x)
  {
    this->ender_.set (x);
  }

  const End::time_optional& End::
  time () const
  {
    return this->time_;
  }

  End::time_optional& End::
  time ()
  {
    return this->time_;
  }

  void End::
  time (const time_type& x)
  {
    this->time_.set (x);
  }

  void End::
  time (const time_optional& x)
  {
    this->time_ = x;
  }

  void End::
  time (::std::auto_ptr< time_type > x)
  {
    this->time_.set (x);
  }

  const End::label_sequence& End::
  label () const
  {
    return this->label_;
  }

  End::label_sequence& End::
  label ()
  {
    return this->label_;
  }

  void End::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const End::location_sequence& End::
  location () const
  {
    return this->location_;
  }

  End::location_sequence& End::
  location ()
  {
    return this->location_;
  }

  void End::
  location (const location_sequence& s)
  {
    this->location_ = s;
  }

  const End::role_sequence& End::
  role () const
  {
    return this->role_;
  }

  End::role_sequence& End::
  role ()
  {
    return this->role_;
  }

  void End::
  role (const role_sequence& s)
  {
    this->role_ = s;
  }

  const End::type_sequence& End::
  type () const
  {
    return this->type_;
  }

  End::type_sequence& End::
  type ()
  {
    return this->type_;
  }

  void End::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const End::id_optional& End::
  id () const
  {
    return this->id_;
  }

  End::id_optional& End::
  id ()
  {
    return this->id_;
  }

  void End::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void End::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void End::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Invalidation
  // 

  const Invalidation::entity_type& Invalidation::
  entity () const
  {
    return this->entity_.get ();
  }

  Invalidation::entity_type& Invalidation::
  entity ()
  {
    return this->entity_.get ();
  }

  void Invalidation::
  entity (const entity_type& x)
  {
    this->entity_.set (x);
  }

  void Invalidation::
  entity (::std::auto_ptr< entity_type > x)
  {
    this->entity_.set (x);
  }

  const Invalidation::activity_optional& Invalidation::
  activity () const
  {
    return this->activity_;
  }

  Invalidation::activity_optional& Invalidation::
  activity ()
  {
    return this->activity_;
  }

  void Invalidation::
  activity (const activity_type& x)
  {
    this->activity_.set (x);
  }

  void Invalidation::
  activity (const activity_optional& x)
  {
    this->activity_ = x;
  }

  void Invalidation::
  activity (::std::auto_ptr< activity_type > x)
  {
    this->activity_.set (x);
  }

  const Invalidation::time_optional& Invalidation::
  time () const
  {
    return this->time_;
  }

  Invalidation::time_optional& Invalidation::
  time ()
  {
    return this->time_;
  }

  void Invalidation::
  time (const time_type& x)
  {
    this->time_.set (x);
  }

  void Invalidation::
  time (const time_optional& x)
  {
    this->time_ = x;
  }

  void Invalidation::
  time (::std::auto_ptr< time_type > x)
  {
    this->time_.set (x);
  }

  const Invalidation::label_sequence& Invalidation::
  label () const
  {
    return this->label_;
  }

  Invalidation::label_sequence& Invalidation::
  label ()
  {
    return this->label_;
  }

  void Invalidation::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Invalidation::location_sequence& Invalidation::
  location () const
  {
    return this->location_;
  }

  Invalidation::location_sequence& Invalidation::
  location ()
  {
    return this->location_;
  }

  void Invalidation::
  location (const location_sequence& s)
  {
    this->location_ = s;
  }

  const Invalidation::role_sequence& Invalidation::
  role () const
  {
    return this->role_;
  }

  Invalidation::role_sequence& Invalidation::
  role ()
  {
    return this->role_;
  }

  void Invalidation::
  role (const role_sequence& s)
  {
    this->role_ = s;
  }

  const Invalidation::type_sequence& Invalidation::
  type () const
  {
    return this->type_;
  }

  Invalidation::type_sequence& Invalidation::
  type ()
  {
    return this->type_;
  }

  void Invalidation::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Invalidation::id_optional& Invalidation::
  id () const
  {
    return this->id_;
  }

  Invalidation::id_optional& Invalidation::
  id ()
  {
    return this->id_;
  }

  void Invalidation::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Invalidation::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Invalidation::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Derivation
  // 

  const Derivation::generatedEntity_type& Derivation::
  generatedEntity () const
  {
    return this->generatedEntity_.get ();
  }

  Derivation::generatedEntity_type& Derivation::
  generatedEntity ()
  {
    return this->generatedEntity_.get ();
  }

  void Derivation::
  generatedEntity (const generatedEntity_type& x)
  {
    this->generatedEntity_.set (x);
  }

  void Derivation::
  generatedEntity (::std::auto_ptr< generatedEntity_type > x)
  {
    this->generatedEntity_.set (x);
  }

  const Derivation::usedEntity_type& Derivation::
  usedEntity () const
  {
    return this->usedEntity_.get ();
  }

  Derivation::usedEntity_type& Derivation::
  usedEntity ()
  {
    return this->usedEntity_.get ();
  }

  void Derivation::
  usedEntity (const usedEntity_type& x)
  {
    this->usedEntity_.set (x);
  }

  void Derivation::
  usedEntity (::std::auto_ptr< usedEntity_type > x)
  {
    this->usedEntity_.set (x);
  }

  const Derivation::activity_optional& Derivation::
  activity () const
  {
    return this->activity_;
  }

  Derivation::activity_optional& Derivation::
  activity ()
  {
    return this->activity_;
  }

  void Derivation::
  activity (const activity_type& x)
  {
    this->activity_.set (x);
  }

  void Derivation::
  activity (const activity_optional& x)
  {
    this->activity_ = x;
  }

  void Derivation::
  activity (::std::auto_ptr< activity_type > x)
  {
    this->activity_.set (x);
  }

  const Derivation::generation_optional& Derivation::
  generation () const
  {
    return this->generation_;
  }

  Derivation::generation_optional& Derivation::
  generation ()
  {
    return this->generation_;
  }

  void Derivation::
  generation (const generation_type& x)
  {
    this->generation_.set (x);
  }

  void Derivation::
  generation (const generation_optional& x)
  {
    this->generation_ = x;
  }

  void Derivation::
  generation (::std::auto_ptr< generation_type > x)
  {
    this->generation_.set (x);
  }

  const Derivation::usage_optional& Derivation::
  usage () const
  {
    return this->usage_;
  }

  Derivation::usage_optional& Derivation::
  usage ()
  {
    return this->usage_;
  }

  void Derivation::
  usage (const usage_type& x)
  {
    this->usage_.set (x);
  }

  void Derivation::
  usage (const usage_optional& x)
  {
    this->usage_ = x;
  }

  void Derivation::
  usage (::std::auto_ptr< usage_type > x)
  {
    this->usage_.set (x);
  }

  const Derivation::label_sequence& Derivation::
  label () const
  {
    return this->label_;
  }

  Derivation::label_sequence& Derivation::
  label ()
  {
    return this->label_;
  }

  void Derivation::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Derivation::type_sequence& Derivation::
  type () const
  {
    return this->type_;
  }

  Derivation::type_sequence& Derivation::
  type ()
  {
    return this->type_;
  }

  void Derivation::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Derivation::id_optional& Derivation::
  id () const
  {
    return this->id_;
  }

  Derivation::id_optional& Derivation::
  id ()
  {
    return this->id_;
  }

  void Derivation::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Derivation::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Derivation::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Revision
  // 


  // Quotation
  // 


  // PrimarySource
  // 


  // Agent
  // 

  const Agent::label_sequence& Agent::
  label () const
  {
    return this->label_;
  }

  Agent::label_sequence& Agent::
  label ()
  {
    return this->label_;
  }

  void Agent::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Agent::location_sequence& Agent::
  location () const
  {
    return this->location_;
  }

  Agent::location_sequence& Agent::
  location ()
  {
    return this->location_;
  }

  void Agent::
  location (const location_sequence& s)
  {
    this->location_ = s;
  }

  const Agent::type_sequence& Agent::
  type () const
  {
    return this->type_;
  }

  Agent::type_sequence& Agent::
  type ()
  {
    return this->type_;
  }

  void Agent::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Agent::id_optional& Agent::
  id () const
  {
    return this->id_;
  }

  Agent::id_optional& Agent::
  id ()
  {
    return this->id_;
  }

  void Agent::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Agent::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Agent::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Person
  // 


  // Organization
  // 


  // SoftwareAgent
  // 


  // Attribution
  // 

  const Attribution::entity_type& Attribution::
  entity () const
  {
    return this->entity_.get ();
  }

  Attribution::entity_type& Attribution::
  entity ()
  {
    return this->entity_.get ();
  }

  void Attribution::
  entity (const entity_type& x)
  {
    this->entity_.set (x);
  }

  void Attribution::
  entity (::std::auto_ptr< entity_type > x)
  {
    this->entity_.set (x);
  }

  const Attribution::agent_type& Attribution::
  agent () const
  {
    return this->agent_.get ();
  }

  Attribution::agent_type& Attribution::
  agent ()
  {
    return this->agent_.get ();
  }

  void Attribution::
  agent (const agent_type& x)
  {
    this->agent_.set (x);
  }

  void Attribution::
  agent (::std::auto_ptr< agent_type > x)
  {
    this->agent_.set (x);
  }

  const Attribution::label_sequence& Attribution::
  label () const
  {
    return this->label_;
  }

  Attribution::label_sequence& Attribution::
  label ()
  {
    return this->label_;
  }

  void Attribution::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Attribution::type_sequence& Attribution::
  type () const
  {
    return this->type_;
  }

  Attribution::type_sequence& Attribution::
  type ()
  {
    return this->type_;
  }

  void Attribution::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Attribution::id_optional& Attribution::
  id () const
  {
    return this->id_;
  }

  Attribution::id_optional& Attribution::
  id ()
  {
    return this->id_;
  }

  void Attribution::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Attribution::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Attribution::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Association
  // 

  const Association::activity_type& Association::
  activity () const
  {
    return this->activity_.get ();
  }

  Association::activity_type& Association::
  activity ()
  {
    return this->activity_.get ();
  }

  void Association::
  activity (const activity_type& x)
  {
    this->activity_.set (x);
  }

  void Association::
  activity (::std::auto_ptr< activity_type > x)
  {
    this->activity_.set (x);
  }

  const Association::agent_optional& Association::
  agent () const
  {
    return this->agent_;
  }

  Association::agent_optional& Association::
  agent ()
  {
    return this->agent_;
  }

  void Association::
  agent (const agent_type& x)
  {
    this->agent_.set (x);
  }

  void Association::
  agent (const agent_optional& x)
  {
    this->agent_ = x;
  }

  void Association::
  agent (::std::auto_ptr< agent_type > x)
  {
    this->agent_.set (x);
  }

  const Association::plan_optional& Association::
  plan () const
  {
    return this->plan_;
  }

  Association::plan_optional& Association::
  plan ()
  {
    return this->plan_;
  }

  void Association::
  plan (const plan_type& x)
  {
    this->plan_.set (x);
  }

  void Association::
  plan (const plan_optional& x)
  {
    this->plan_ = x;
  }

  void Association::
  plan (::std::auto_ptr< plan_type > x)
  {
    this->plan_.set (x);
  }

  const Association::label_sequence& Association::
  label () const
  {
    return this->label_;
  }

  Association::label_sequence& Association::
  label ()
  {
    return this->label_;
  }

  void Association::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Association::role_sequence& Association::
  role () const
  {
    return this->role_;
  }

  Association::role_sequence& Association::
  role ()
  {
    return this->role_;
  }

  void Association::
  role (const role_sequence& s)
  {
    this->role_ = s;
  }

  const Association::type_sequence& Association::
  type () const
  {
    return this->type_;
  }

  Association::type_sequence& Association::
  type ()
  {
    return this->type_;
  }

  void Association::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Association::id_optional& Association::
  id () const
  {
    return this->id_;
  }

  Association::id_optional& Association::
  id ()
  {
    return this->id_;
  }

  void Association::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Association::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Association::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Delegation
  // 

  const Delegation::delegate_type& Delegation::
  delegate () const
  {
    return this->delegate_.get ();
  }

  Delegation::delegate_type& Delegation::
  delegate ()
  {
    return this->delegate_.get ();
  }

  void Delegation::
  delegate (const delegate_type& x)
  {
    this->delegate_.set (x);
  }

  void Delegation::
  delegate (::std::auto_ptr< delegate_type > x)
  {
    this->delegate_.set (x);
  }

  const Delegation::responsible_type& Delegation::
  responsible () const
  {
    return this->responsible_.get ();
  }

  Delegation::responsible_type& Delegation::
  responsible ()
  {
    return this->responsible_.get ();
  }

  void Delegation::
  responsible (const responsible_type& x)
  {
    this->responsible_.set (x);
  }

  void Delegation::
  responsible (::std::auto_ptr< responsible_type > x)
  {
    this->responsible_.set (x);
  }

  const Delegation::activity_optional& Delegation::
  activity () const
  {
    return this->activity_;
  }

  Delegation::activity_optional& Delegation::
  activity ()
  {
    return this->activity_;
  }

  void Delegation::
  activity (const activity_type& x)
  {
    this->activity_.set (x);
  }

  void Delegation::
  activity (const activity_optional& x)
  {
    this->activity_ = x;
  }

  void Delegation::
  activity (::std::auto_ptr< activity_type > x)
  {
    this->activity_.set (x);
  }

  const Delegation::label_sequence& Delegation::
  label () const
  {
    return this->label_;
  }

  Delegation::label_sequence& Delegation::
  label ()
  {
    return this->label_;
  }

  void Delegation::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Delegation::type_sequence& Delegation::
  type () const
  {
    return this->type_;
  }

  Delegation::type_sequence& Delegation::
  type ()
  {
    return this->type_;
  }

  void Delegation::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Delegation::id_optional& Delegation::
  id () const
  {
    return this->id_;
  }

  Delegation::id_optional& Delegation::
  id ()
  {
    return this->id_;
  }

  void Delegation::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Delegation::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Delegation::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Influence
  // 

  const Influence::influencee_type& Influence::
  influencee () const
  {
    return this->influencee_.get ();
  }

  Influence::influencee_type& Influence::
  influencee ()
  {
    return this->influencee_.get ();
  }

  void Influence::
  influencee (const influencee_type& x)
  {
    this->influencee_.set (x);
  }

  void Influence::
  influencee (::std::auto_ptr< influencee_type > x)
  {
    this->influencee_.set (x);
  }

  const Influence::influencer_type& Influence::
  influencer () const
  {
    return this->influencer_.get ();
  }

  Influence::influencer_type& Influence::
  influencer ()
  {
    return this->influencer_.get ();
  }

  void Influence::
  influencer (const influencer_type& x)
  {
    this->influencer_.set (x);
  }

  void Influence::
  influencer (::std::auto_ptr< influencer_type > x)
  {
    this->influencer_.set (x);
  }

  const Influence::label_sequence& Influence::
  label () const
  {
    return this->label_;
  }

  Influence::label_sequence& Influence::
  label ()
  {
    return this->label_;
  }

  void Influence::
  label (const label_sequence& s)
  {
    this->label_ = s;
  }

  const Influence::type_sequence& Influence::
  type () const
  {
    return this->type_;
  }

  Influence::type_sequence& Influence::
  type ()
  {
    return this->type_;
  }

  void Influence::
  type (const type_sequence& s)
  {
    this->type_ = s;
  }

  const Influence::id_optional& Influence::
  id () const
  {
    return this->id_;
  }

  Influence::id_optional& Influence::
  id ()
  {
    return this->id_;
  }

  void Influence::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void Influence::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void Influence::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Bundle
  // 


  // BundleConstructor
  // 

  const BundleConstructor::entity_sequence& BundleConstructor::
  entity () const
  {
    return this->entity_;
  }

  BundleConstructor::entity_sequence& BundleConstructor::
  entity ()
  {
    return this->entity_;
  }

  void BundleConstructor::
  entity (const entity_sequence& s)
  {
    this->entity_ = s;
  }

  const BundleConstructor::activity_sequence& BundleConstructor::
  activity () const
  {
    return this->activity_;
  }

  BundleConstructor::activity_sequence& BundleConstructor::
  activity ()
  {
    return this->activity_;
  }

  void BundleConstructor::
  activity (const activity_sequence& s)
  {
    this->activity_ = s;
  }

  const BundleConstructor::wasGeneratedBy_sequence& BundleConstructor::
  wasGeneratedBy () const
  {
    return this->wasGeneratedBy_;
  }

  BundleConstructor::wasGeneratedBy_sequence& BundleConstructor::
  wasGeneratedBy ()
  {
    return this->wasGeneratedBy_;
  }

  void BundleConstructor::
  wasGeneratedBy (const wasGeneratedBy_sequence& s)
  {
    this->wasGeneratedBy_ = s;
  }

  const BundleConstructor::used_sequence& BundleConstructor::
  used () const
  {
    return this->used_;
  }

  BundleConstructor::used_sequence& BundleConstructor::
  used ()
  {
    return this->used_;
  }

  void BundleConstructor::
  used (const used_sequence& s)
  {
    this->used_ = s;
  }

  const BundleConstructor::wasInformedBy_sequence& BundleConstructor::
  wasInformedBy () const
  {
    return this->wasInformedBy_;
  }

  BundleConstructor::wasInformedBy_sequence& BundleConstructor::
  wasInformedBy ()
  {
    return this->wasInformedBy_;
  }

  void BundleConstructor::
  wasInformedBy (const wasInformedBy_sequence& s)
  {
    this->wasInformedBy_ = s;
  }

  const BundleConstructor::wasStartedBy_sequence& BundleConstructor::
  wasStartedBy () const
  {
    return this->wasStartedBy_;
  }

  BundleConstructor::wasStartedBy_sequence& BundleConstructor::
  wasStartedBy ()
  {
    return this->wasStartedBy_;
  }

  void BundleConstructor::
  wasStartedBy (const wasStartedBy_sequence& s)
  {
    this->wasStartedBy_ = s;
  }

  const BundleConstructor::wasEndedBy_sequence& BundleConstructor::
  wasEndedBy () const
  {
    return this->wasEndedBy_;
  }

  BundleConstructor::wasEndedBy_sequence& BundleConstructor::
  wasEndedBy ()
  {
    return this->wasEndedBy_;
  }

  void BundleConstructor::
  wasEndedBy (const wasEndedBy_sequence& s)
  {
    this->wasEndedBy_ = s;
  }

  const BundleConstructor::wasInvalidatedBy_sequence& BundleConstructor::
  wasInvalidatedBy () const
  {
    return this->wasInvalidatedBy_;
  }

  BundleConstructor::wasInvalidatedBy_sequence& BundleConstructor::
  wasInvalidatedBy ()
  {
    return this->wasInvalidatedBy_;
  }

  void BundleConstructor::
  wasInvalidatedBy (const wasInvalidatedBy_sequence& s)
  {
    this->wasInvalidatedBy_ = s;
  }

  const BundleConstructor::wasDerivedFrom_sequence& BundleConstructor::
  wasDerivedFrom () const
  {
    return this->wasDerivedFrom_;
  }

  BundleConstructor::wasDerivedFrom_sequence& BundleConstructor::
  wasDerivedFrom ()
  {
    return this->wasDerivedFrom_;
  }

  void BundleConstructor::
  wasDerivedFrom (const wasDerivedFrom_sequence& s)
  {
    this->wasDerivedFrom_ = s;
  }

  const BundleConstructor::wasRevisionOf_sequence& BundleConstructor::
  wasRevisionOf () const
  {
    return this->wasRevisionOf_;
  }

  BundleConstructor::wasRevisionOf_sequence& BundleConstructor::
  wasRevisionOf ()
  {
    return this->wasRevisionOf_;
  }

  void BundleConstructor::
  wasRevisionOf (const wasRevisionOf_sequence& s)
  {
    this->wasRevisionOf_ = s;
  }

  const BundleConstructor::wasQuotedFrom_sequence& BundleConstructor::
  wasQuotedFrom () const
  {
    return this->wasQuotedFrom_;
  }

  BundleConstructor::wasQuotedFrom_sequence& BundleConstructor::
  wasQuotedFrom ()
  {
    return this->wasQuotedFrom_;
  }

  void BundleConstructor::
  wasQuotedFrom (const wasQuotedFrom_sequence& s)
  {
    this->wasQuotedFrom_ = s;
  }

  const BundleConstructor::hadPrimarySource_sequence& BundleConstructor::
  hadPrimarySource () const
  {
    return this->hadPrimarySource_;
  }

  BundleConstructor::hadPrimarySource_sequence& BundleConstructor::
  hadPrimarySource ()
  {
    return this->hadPrimarySource_;
  }

  void BundleConstructor::
  hadPrimarySource (const hadPrimarySource_sequence& s)
  {
    this->hadPrimarySource_ = s;
  }

  const BundleConstructor::agent_sequence& BundleConstructor::
  agent () const
  {
    return this->agent_;
  }

  BundleConstructor::agent_sequence& BundleConstructor::
  agent ()
  {
    return this->agent_;
  }

  void BundleConstructor::
  agent (const agent_sequence& s)
  {
    this->agent_ = s;
  }

  const BundleConstructor::person_sequence& BundleConstructor::
  person () const
  {
    return this->person_;
  }

  BundleConstructor::person_sequence& BundleConstructor::
  person ()
  {
    return this->person_;
  }

  void BundleConstructor::
  person (const person_sequence& s)
  {
    this->person_ = s;
  }

  const BundleConstructor::organization_sequence& BundleConstructor::
  organization () const
  {
    return this->organization_;
  }

  BundleConstructor::organization_sequence& BundleConstructor::
  organization ()
  {
    return this->organization_;
  }

  void BundleConstructor::
  organization (const organization_sequence& s)
  {
    this->organization_ = s;
  }

  const BundleConstructor::softwareAgent_sequence& BundleConstructor::
  softwareAgent () const
  {
    return this->softwareAgent_;
  }

  BundleConstructor::softwareAgent_sequence& BundleConstructor::
  softwareAgent ()
  {
    return this->softwareAgent_;
  }

  void BundleConstructor::
  softwareAgent (const softwareAgent_sequence& s)
  {
    this->softwareAgent_ = s;
  }

  const BundleConstructor::wasAttributedTo_sequence& BundleConstructor::
  wasAttributedTo () const
  {
    return this->wasAttributedTo_;
  }

  BundleConstructor::wasAttributedTo_sequence& BundleConstructor::
  wasAttributedTo ()
  {
    return this->wasAttributedTo_;
  }

  void BundleConstructor::
  wasAttributedTo (const wasAttributedTo_sequence& s)
  {
    this->wasAttributedTo_ = s;
  }

  const BundleConstructor::wasAssociatedWith_sequence& BundleConstructor::
  wasAssociatedWith () const
  {
    return this->wasAssociatedWith_;
  }

  BundleConstructor::wasAssociatedWith_sequence& BundleConstructor::
  wasAssociatedWith ()
  {
    return this->wasAssociatedWith_;
  }

  void BundleConstructor::
  wasAssociatedWith (const wasAssociatedWith_sequence& s)
  {
    this->wasAssociatedWith_ = s;
  }

  const BundleConstructor::actedOnBehalfOf_sequence& BundleConstructor::
  actedOnBehalfOf () const
  {
    return this->actedOnBehalfOf_;
  }

  BundleConstructor::actedOnBehalfOf_sequence& BundleConstructor::
  actedOnBehalfOf ()
  {
    return this->actedOnBehalfOf_;
  }

  void BundleConstructor::
  actedOnBehalfOf (const actedOnBehalfOf_sequence& s)
  {
    this->actedOnBehalfOf_ = s;
  }

  const BundleConstructor::wasInfluencedBy_sequence& BundleConstructor::
  wasInfluencedBy () const
  {
    return this->wasInfluencedBy_;
  }

  BundleConstructor::wasInfluencedBy_sequence& BundleConstructor::
  wasInfluencedBy ()
  {
    return this->wasInfluencedBy_;
  }

  void BundleConstructor::
  wasInfluencedBy (const wasInfluencedBy_sequence& s)
  {
    this->wasInfluencedBy_ = s;
  }

  const BundleConstructor::bundle_sequence& BundleConstructor::
  bundle () const
  {
    return this->bundle_;
  }

  BundleConstructor::bundle_sequence& BundleConstructor::
  bundle ()
  {
    return this->bundle_;
  }

  void BundleConstructor::
  bundle (const bundle_sequence& s)
  {
    this->bundle_ = s;
  }

  const BundleConstructor::specializationOf_sequence& BundleConstructor::
  specializationOf () const
  {
    return this->specializationOf_;
  }

  BundleConstructor::specializationOf_sequence& BundleConstructor::
  specializationOf ()
  {
    return this->specializationOf_;
  }

  void BundleConstructor::
  specializationOf (const specializationOf_sequence& s)
  {
    this->specializationOf_ = s;
  }

  const BundleConstructor::alternateOf_sequence& BundleConstructor::
  alternateOf () const
  {
    return this->alternateOf_;
  }

  BundleConstructor::alternateOf_sequence& BundleConstructor::
  alternateOf ()
  {
    return this->alternateOf_;
  }

  void BundleConstructor::
  alternateOf (const alternateOf_sequence& s)
  {
    this->alternateOf_ = s;
  }

  const BundleConstructor::collection_sequence& BundleConstructor::
  collection () const
  {
    return this->collection_;
  }

  BundleConstructor::collection_sequence& BundleConstructor::
  collection ()
  {
    return this->collection_;
  }

  void BundleConstructor::
  collection (const collection_sequence& s)
  {
    this->collection_ = s;
  }

  const BundleConstructor::emptyCollection_sequence& BundleConstructor::
  emptyCollection () const
  {
    return this->emptyCollection_;
  }

  BundleConstructor::emptyCollection_sequence& BundleConstructor::
  emptyCollection ()
  {
    return this->emptyCollection_;
  }

  void BundleConstructor::
  emptyCollection (const emptyCollection_sequence& s)
  {
    this->emptyCollection_ = s;
  }

  const BundleConstructor::hadMember_sequence& BundleConstructor::
  hadMember () const
  {
    return this->hadMember_;
  }

  BundleConstructor::hadMember_sequence& BundleConstructor::
  hadMember ()
  {
    return this->hadMember_;
  }

  void BundleConstructor::
  hadMember (const hadMember_sequence& s)
  {
    this->hadMember_ = s;
  }

  const BundleConstructor::plan_sequence& BundleConstructor::
  plan () const
  {
    return this->plan_;
  }

  BundleConstructor::plan_sequence& BundleConstructor::
  plan ()
  {
    return this->plan_;
  }

  void BundleConstructor::
  plan (const plan_sequence& s)
  {
    this->plan_ = s;
  }

  const BundleConstructor::other_sequence& BundleConstructor::
  other () const
  {
    return this->other_;
  }

  BundleConstructor::other_sequence& BundleConstructor::
  other ()
  {
    return this->other_;
  }

  void BundleConstructor::
  other (const other_sequence& s)
  {
    this->other_ = s;
  }

  const BundleConstructor::internalElement_sequence& BundleConstructor::
  internalElement () const
  {
    return this->internalElement_;
  }

  BundleConstructor::internalElement_sequence& BundleConstructor::
  internalElement ()
  {
    return this->internalElement_;
  }

  void BundleConstructor::
  internalElement (const internalElement_sequence& s)
  {
    this->internalElement_ = s;
  }

  const BundleConstructor::id_optional& BundleConstructor::
  id () const
  {
    return this->id_;
  }

  BundleConstructor::id_optional& BundleConstructor::
  id ()
  {
    return this->id_;
  }

  void BundleConstructor::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void BundleConstructor::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void BundleConstructor::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }


  // Specialization
  // 

  const Specialization::specificEntity_type& Specialization::
  specificEntity () const
  {
    return this->specificEntity_.get ();
  }

  Specialization::specificEntity_type& Specialization::
  specificEntity ()
  {
    return this->specificEntity_.get ();
  }

  void Specialization::
  specificEntity (const specificEntity_type& x)
  {
    this->specificEntity_.set (x);
  }

  void Specialization::
  specificEntity (::std::auto_ptr< specificEntity_type > x)
  {
    this->specificEntity_.set (x);
  }

  const Specialization::generalEntity_type& Specialization::
  generalEntity () const
  {
    return this->generalEntity_.get ();
  }

  Specialization::generalEntity_type& Specialization::
  generalEntity ()
  {
    return this->generalEntity_.get ();
  }

  void Specialization::
  generalEntity (const generalEntity_type& x)
  {
    this->generalEntity_.set (x);
  }

  void Specialization::
  generalEntity (::std::auto_ptr< generalEntity_type > x)
  {
    this->generalEntity_.set (x);
  }


  // Alternate
  // 

  const Alternate::alternate1_type& Alternate::
  alternate1 () const
  {
    return this->alternate1_.get ();
  }

  Alternate::alternate1_type& Alternate::
  alternate1 ()
  {
    return this->alternate1_.get ();
  }

  void Alternate::
  alternate1 (const alternate1_type& x)
  {
    this->alternate1_.set (x);
  }

  void Alternate::
  alternate1 (::std::auto_ptr< alternate1_type > x)
  {
    this->alternate1_.set (x);
  }

  const Alternate::alternate2_type& Alternate::
  alternate2 () const
  {
    return this->alternate2_.get ();
  }

  Alternate::alternate2_type& Alternate::
  alternate2 ()
  {
    return this->alternate2_.get ();
  }

  void Alternate::
  alternate2 (const alternate2_type& x)
  {
    this->alternate2_.set (x);
  }

  void Alternate::
  alternate2 (::std::auto_ptr< alternate2_type > x)
  {
    this->alternate2_.set (x);
  }


  // Collection
  // 


  // EmptyCollection
  // 


  // Membership
  // 

  const Membership::collection_type& Membership::
  collection () const
  {
    return this->collection_.get ();
  }

  Membership::collection_type& Membership::
  collection ()
  {
    return this->collection_.get ();
  }

  void Membership::
  collection (const collection_type& x)
  {
    this->collection_.set (x);
  }

  void Membership::
  collection (::std::auto_ptr< collection_type > x)
  {
    this->collection_.set (x);
  }

  const Membership::entity_sequence& Membership::
  entity () const
  {
    return this->entity_;
  }

  Membership::entity_sequence& Membership::
  entity ()
  {
    return this->entity_;
  }

  void Membership::
  entity (const entity_sequence& s)
  {
    this->entity_ = s;
  }


  // Plan
  // 


  // InternationalizedString
  // 

  const InternationalizedString::lang_optional& InternationalizedString::
  lang () const
  {
    return this->lang_;
  }

  InternationalizedString::lang_optional& InternationalizedString::
  lang ()
  {
    return this->lang_;
  }

  void InternationalizedString::
  lang (const lang_type& x)
  {
    this->lang_.set (x);
  }

  void InternationalizedString::
  lang (const lang_optional& x)
  {
    this->lang_ = x;
  }

  void InternationalizedString::
  lang (::std::auto_ptr< lang_type > x)
  {
    this->lang_.set (x);
  }


  // IDRef
  // 

  const IDRef::ref_type& IDRef::
  ref () const
  {
    return this->ref_.get ();
  }

  IDRef::ref_type& IDRef::
  ref ()
  {
    return this->ref_.get ();
  }

  void IDRef::
  ref (const ref_type& x)
  {
    this->ref_.set (x);
  }

  void IDRef::
  ref (::std::auto_ptr< ref_type > x)
  {
    this->ref_.set (x);
  }


  // Document
  // 

  const Document::entity_sequence& Document::
  entity () const
  {
    return this->entity_;
  }

  Document::entity_sequence& Document::
  entity ()
  {
    return this->entity_;
  }

  void Document::
  entity (const entity_sequence& s)
  {
    this->entity_ = s;
  }

  const Document::activity_sequence& Document::
  activity () const
  {
    return this->activity_;
  }

  Document::activity_sequence& Document::
  activity ()
  {
    return this->activity_;
  }

  void Document::
  activity (const activity_sequence& s)
  {
    this->activity_ = s;
  }

  const Document::wasGeneratedBy_sequence& Document::
  wasGeneratedBy () const
  {
    return this->wasGeneratedBy_;
  }

  Document::wasGeneratedBy_sequence& Document::
  wasGeneratedBy ()
  {
    return this->wasGeneratedBy_;
  }

  void Document::
  wasGeneratedBy (const wasGeneratedBy_sequence& s)
  {
    this->wasGeneratedBy_ = s;
  }

  const Document::used_sequence& Document::
  used () const
  {
    return this->used_;
  }

  Document::used_sequence& Document::
  used ()
  {
    return this->used_;
  }

  void Document::
  used (const used_sequence& s)
  {
    this->used_ = s;
  }

  const Document::wasInformedBy_sequence& Document::
  wasInformedBy () const
  {
    return this->wasInformedBy_;
  }

  Document::wasInformedBy_sequence& Document::
  wasInformedBy ()
  {
    return this->wasInformedBy_;
  }

  void Document::
  wasInformedBy (const wasInformedBy_sequence& s)
  {
    this->wasInformedBy_ = s;
  }

  const Document::wasStartedBy_sequence& Document::
  wasStartedBy () const
  {
    return this->wasStartedBy_;
  }

  Document::wasStartedBy_sequence& Document::
  wasStartedBy ()
  {
    return this->wasStartedBy_;
  }

  void Document::
  wasStartedBy (const wasStartedBy_sequence& s)
  {
    this->wasStartedBy_ = s;
  }

  const Document::wasEndedBy_sequence& Document::
  wasEndedBy () const
  {
    return this->wasEndedBy_;
  }

  Document::wasEndedBy_sequence& Document::
  wasEndedBy ()
  {
    return this->wasEndedBy_;
  }

  void Document::
  wasEndedBy (const wasEndedBy_sequence& s)
  {
    this->wasEndedBy_ = s;
  }

  const Document::wasInvalidatedBy_sequence& Document::
  wasInvalidatedBy () const
  {
    return this->wasInvalidatedBy_;
  }

  Document::wasInvalidatedBy_sequence& Document::
  wasInvalidatedBy ()
  {
    return this->wasInvalidatedBy_;
  }

  void Document::
  wasInvalidatedBy (const wasInvalidatedBy_sequence& s)
  {
    this->wasInvalidatedBy_ = s;
  }

  const Document::wasDerivedFrom_sequence& Document::
  wasDerivedFrom () const
  {
    return this->wasDerivedFrom_;
  }

  Document::wasDerivedFrom_sequence& Document::
  wasDerivedFrom ()
  {
    return this->wasDerivedFrom_;
  }

  void Document::
  wasDerivedFrom (const wasDerivedFrom_sequence& s)
  {
    this->wasDerivedFrom_ = s;
  }

  const Document::wasRevisionOf_sequence& Document::
  wasRevisionOf () const
  {
    return this->wasRevisionOf_;
  }

  Document::wasRevisionOf_sequence& Document::
  wasRevisionOf ()
  {
    return this->wasRevisionOf_;
  }

  void Document::
  wasRevisionOf (const wasRevisionOf_sequence& s)
  {
    this->wasRevisionOf_ = s;
  }

  const Document::wasQuotedFrom_sequence& Document::
  wasQuotedFrom () const
  {
    return this->wasQuotedFrom_;
  }

  Document::wasQuotedFrom_sequence& Document::
  wasQuotedFrom ()
  {
    return this->wasQuotedFrom_;
  }

  void Document::
  wasQuotedFrom (const wasQuotedFrom_sequence& s)
  {
    this->wasQuotedFrom_ = s;
  }

  const Document::hadPrimarySource_sequence& Document::
  hadPrimarySource () const
  {
    return this->hadPrimarySource_;
  }

  Document::hadPrimarySource_sequence& Document::
  hadPrimarySource ()
  {
    return this->hadPrimarySource_;
  }

  void Document::
  hadPrimarySource (const hadPrimarySource_sequence& s)
  {
    this->hadPrimarySource_ = s;
  }

  const Document::agent_sequence& Document::
  agent () const
  {
    return this->agent_;
  }

  Document::agent_sequence& Document::
  agent ()
  {
    return this->agent_;
  }

  void Document::
  agent (const agent_sequence& s)
  {
    this->agent_ = s;
  }

  const Document::person_sequence& Document::
  person () const
  {
    return this->person_;
  }

  Document::person_sequence& Document::
  person ()
  {
    return this->person_;
  }

  void Document::
  person (const person_sequence& s)
  {
    this->person_ = s;
  }

  const Document::organization_sequence& Document::
  organization () const
  {
    return this->organization_;
  }

  Document::organization_sequence& Document::
  organization ()
  {
    return this->organization_;
  }

  void Document::
  organization (const organization_sequence& s)
  {
    this->organization_ = s;
  }

  const Document::softwareAgent_sequence& Document::
  softwareAgent () const
  {
    return this->softwareAgent_;
  }

  Document::softwareAgent_sequence& Document::
  softwareAgent ()
  {
    return this->softwareAgent_;
  }

  void Document::
  softwareAgent (const softwareAgent_sequence& s)
  {
    this->softwareAgent_ = s;
  }

  const Document::wasAttributedTo_sequence& Document::
  wasAttributedTo () const
  {
    return this->wasAttributedTo_;
  }

  Document::wasAttributedTo_sequence& Document::
  wasAttributedTo ()
  {
    return this->wasAttributedTo_;
  }

  void Document::
  wasAttributedTo (const wasAttributedTo_sequence& s)
  {
    this->wasAttributedTo_ = s;
  }

  const Document::wasAssociatedWith_sequence& Document::
  wasAssociatedWith () const
  {
    return this->wasAssociatedWith_;
  }

  Document::wasAssociatedWith_sequence& Document::
  wasAssociatedWith ()
  {
    return this->wasAssociatedWith_;
  }

  void Document::
  wasAssociatedWith (const wasAssociatedWith_sequence& s)
  {
    this->wasAssociatedWith_ = s;
  }

  const Document::actedOnBehalfOf_sequence& Document::
  actedOnBehalfOf () const
  {
    return this->actedOnBehalfOf_;
  }

  Document::actedOnBehalfOf_sequence& Document::
  actedOnBehalfOf ()
  {
    return this->actedOnBehalfOf_;
  }

  void Document::
  actedOnBehalfOf (const actedOnBehalfOf_sequence& s)
  {
    this->actedOnBehalfOf_ = s;
  }

  const Document::wasInfluencedBy_sequence& Document::
  wasInfluencedBy () const
  {
    return this->wasInfluencedBy_;
  }

  Document::wasInfluencedBy_sequence& Document::
  wasInfluencedBy ()
  {
    return this->wasInfluencedBy_;
  }

  void Document::
  wasInfluencedBy (const wasInfluencedBy_sequence& s)
  {
    this->wasInfluencedBy_ = s;
  }

  const Document::bundle_sequence& Document::
  bundle () const
  {
    return this->bundle_;
  }

  Document::bundle_sequence& Document::
  bundle ()
  {
    return this->bundle_;
  }

  void Document::
  bundle (const bundle_sequence& s)
  {
    this->bundle_ = s;
  }

  const Document::specializationOf_sequence& Document::
  specializationOf () const
  {
    return this->specializationOf_;
  }

  Document::specializationOf_sequence& Document::
  specializationOf ()
  {
    return this->specializationOf_;
  }

  void Document::
  specializationOf (const specializationOf_sequence& s)
  {
    this->specializationOf_ = s;
  }

  const Document::alternateOf_sequence& Document::
  alternateOf () const
  {
    return this->alternateOf_;
  }

  Document::alternateOf_sequence& Document::
  alternateOf ()
  {
    return this->alternateOf_;
  }

  void Document::
  alternateOf (const alternateOf_sequence& s)
  {
    this->alternateOf_ = s;
  }

  const Document::collection_sequence& Document::
  collection () const
  {
    return this->collection_;
  }

  Document::collection_sequence& Document::
  collection ()
  {
    return this->collection_;
  }

  void Document::
  collection (const collection_sequence& s)
  {
    this->collection_ = s;
  }

  const Document::emptyCollection_sequence& Document::
  emptyCollection () const
  {
    return this->emptyCollection_;
  }

  Document::emptyCollection_sequence& Document::
  emptyCollection ()
  {
    return this->emptyCollection_;
  }

  void Document::
  emptyCollection (const emptyCollection_sequence& s)
  {
    this->emptyCollection_ = s;
  }

  const Document::hadMember_sequence& Document::
  hadMember () const
  {
    return this->hadMember_;
  }

  Document::hadMember_sequence& Document::
  hadMember ()
  {
    return this->hadMember_;
  }

  void Document::
  hadMember (const hadMember_sequence& s)
  {
    this->hadMember_ = s;
  }

  const Document::plan_sequence& Document::
  plan () const
  {
    return this->plan_;
  }

  Document::plan_sequence& Document::
  plan ()
  {
    return this->plan_;
  }

  void Document::
  plan (const plan_sequence& s)
  {
    this->plan_ = s;
  }

  const Document::other_sequence& Document::
  other () const
  {
    return this->other_;
  }

  Document::other_sequence& Document::
  other ()
  {
    return this->other_;
  }

  void Document::
  other (const other_sequence& s)
  {
    this->other_ = s;
  }

  const Document::internalElement_sequence& Document::
  internalElement () const
  {
    return this->internalElement_;
  }

  Document::internalElement_sequence& Document::
  internalElement ()
  {
    return this->internalElement_;
  }

  void Document::
  internalElement (const internalElement_sequence& s)
  {
    this->internalElement_ = s;
  }

  const Document::bundleContent_sequence& Document::
  bundleContent () const
  {
    return this->bundleContent_;
  }

  Document::bundleContent_sequence& Document::
  bundleContent ()
  {
    return this->bundleContent_;
  }

  void Document::
  bundleContent (const bundleContent_sequence& s)
  {
    this->bundleContent_ = s;
  }


  // Other
  // 
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prov
{
  // Entity
  //

  Entity::
  Entity ()
  : ::xml_schema::type (),
    label_ (this),
    location_ (this),
    type_ (this),
    value_ (this),
    id_ (this)
  {
  }

  Entity::
  Entity (const Entity& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    label_ (x.label_, f, this),
    location_ (x.location_, f, this),
    type_ (x.type_, f, this),
    value_ (x.value_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Entity::
  Entity (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    label_ (this),
    location_ (this),
    type_ (this),
    value_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Entity::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // location
      //
      if (n.name () == "location" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        this->location_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      // value
      //
      if (n.name () == "value" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< value_type > r (
          value_traits::create (i, f, this));

        if (!this->value_)
        {
          this->value_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Entity* Entity::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Entity (*this, f, c);
  }

  Entity& Entity::
  operator= (const Entity& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->label_ = x.label_;
      this->location_ = x.location_;
      this->type_ = x.type_;
      this->value_ = x.value_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Entity::
  ~Entity ()
  {
  }

  // Activity
  //

  Activity::
  Activity ()
  : ::xml_schema::type (),
    startTime_ (this),
    endTime_ (this),
    label_ (this),
    location_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Activity::
  Activity (const Activity& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    startTime_ (x.startTime_, f, this),
    endTime_ (x.endTime_, f, this),
    label_ (x.label_, f, this),
    location_ (x.location_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Activity::
  Activity (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    startTime_ (this),
    endTime_ (this),
    label_ (this),
    location_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Activity::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // startTime
      //
      if (n.name () == "startTime" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< startTime_type > r (
          startTime_traits::create (i, f, this));

        if (!this->startTime_)
        {
          this->startTime_.set (r);
          continue;
        }
      }

      // endTime
      //
      if (n.name () == "endTime" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< endTime_type > r (
          endTime_traits::create (i, f, this));

        if (!this->endTime_)
        {
          this->endTime_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // location
      //
      if (n.name () == "location" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        this->location_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Activity* Activity::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Activity (*this, f, c);
  }

  Activity& Activity::
  operator= (const Activity& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->startTime_ = x.startTime_;
      this->endTime_ = x.endTime_;
      this->label_ = x.label_;
      this->location_ = x.location_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Activity::
  ~Activity ()
  {
  }

  // Generation
  //

  Generation::
  Generation (const entity_type& entity)
  : ::xml_schema::type (),
    entity_ (entity, this),
    activity_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Generation::
  Generation (::std::auto_ptr< entity_type > entity)
  : ::xml_schema::type (),
    entity_ (entity, this),
    activity_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Generation::
  Generation (const Generation& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    entity_ (x.entity_, f, this),
    activity_ (x.activity_, f, this),
    time_ (x.time_, f, this),
    label_ (x.label_, f, this),
    location_ (x.location_, f, this),
    role_ (x.role_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Generation::
  Generation (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    entity_ (this),
    activity_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Generation::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // entity
      //
      if (n.name () == "entity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< entity_type > r (
          entity_traits::create (i, f, this));

        if (!entity_.present ())
        {
          this->entity_.set (r);
          continue;
        }
      }

      // activity
      //
      if (n.name () == "activity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< activity_type > r (
          activity_traits::create (i, f, this));

        if (!this->activity_)
        {
          this->activity_.set (r);
          continue;
        }
      }

      // time
      //
      if (n.name () == "time" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< time_type > r (
          time_traits::create (i, f, this));

        if (!this->time_)
        {
          this->time_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // location
      //
      if (n.name () == "location" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        this->location_.push_back (r);
        continue;
      }

      // role
      //
      if (n.name () == "role" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< role_type > r (
          role_traits::create (i, f, this));

        this->role_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!entity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "entity",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Generation* Generation::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Generation (*this, f, c);
  }

  Generation& Generation::
  operator= (const Generation& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->entity_ = x.entity_;
      this->activity_ = x.activity_;
      this->time_ = x.time_;
      this->label_ = x.label_;
      this->location_ = x.location_;
      this->role_ = x.role_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Generation::
  ~Generation ()
  {
  }

  // Usage
  //

  Usage::
  Usage (const activity_type& activity)
  : ::xml_schema::type (),
    activity_ (activity, this),
    entity_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Usage::
  Usage (::std::auto_ptr< activity_type > activity)
  : ::xml_schema::type (),
    activity_ (activity, this),
    entity_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Usage::
  Usage (const Usage& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    activity_ (x.activity_, f, this),
    entity_ (x.entity_, f, this),
    time_ (x.time_, f, this),
    label_ (x.label_, f, this),
    location_ (x.location_, f, this),
    role_ (x.role_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Usage::
  Usage (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    activity_ (this),
    entity_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Usage::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // activity
      //
      if (n.name () == "activity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< activity_type > r (
          activity_traits::create (i, f, this));

        if (!activity_.present ())
        {
          this->activity_.set (r);
          continue;
        }
      }

      // entity
      //
      if (n.name () == "entity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< entity_type > r (
          entity_traits::create (i, f, this));

        if (!this->entity_)
        {
          this->entity_.set (r);
          continue;
        }
      }

      // time
      //
      if (n.name () == "time" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< time_type > r (
          time_traits::create (i, f, this));

        if (!this->time_)
        {
          this->time_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // location
      //
      if (n.name () == "location" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        this->location_.push_back (r);
        continue;
      }

      // role
      //
      if (n.name () == "role" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< role_type > r (
          role_traits::create (i, f, this));

        this->role_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!activity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "activity",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Usage* Usage::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Usage (*this, f, c);
  }

  Usage& Usage::
  operator= (const Usage& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->activity_ = x.activity_;
      this->entity_ = x.entity_;
      this->time_ = x.time_;
      this->label_ = x.label_;
      this->location_ = x.location_;
      this->role_ = x.role_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Usage::
  ~Usage ()
  {
  }

  // Communication
  //

  Communication::
  Communication (const informed_type& informed,
                 const informant_type& informant)
  : ::xml_schema::type (),
    informed_ (informed, this),
    informant_ (informant, this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Communication::
  Communication (::std::auto_ptr< informed_type > informed,
                 ::std::auto_ptr< informant_type > informant)
  : ::xml_schema::type (),
    informed_ (informed, this),
    informant_ (informant, this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Communication::
  Communication (const Communication& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    informed_ (x.informed_, f, this),
    informant_ (x.informant_, f, this),
    label_ (x.label_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Communication::
  Communication (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    informed_ (this),
    informant_ (this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Communication::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // informed
      //
      if (n.name () == "informed" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< informed_type > r (
          informed_traits::create (i, f, this));

        if (!informed_.present ())
        {
          this->informed_.set (r);
          continue;
        }
      }

      // informant
      //
      if (n.name () == "informant" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< informant_type > r (
          informant_traits::create (i, f, this));

        if (!informant_.present ())
        {
          this->informant_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!informed_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "informed",
        "http://www.w3.org/ns/prov#");
    }

    if (!informant_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "informant",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Communication* Communication::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Communication (*this, f, c);
  }

  Communication& Communication::
  operator= (const Communication& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->informed_ = x.informed_;
      this->informant_ = x.informant_;
      this->label_ = x.label_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Communication::
  ~Communication ()
  {
  }

  // Start
  //

  Start::
  Start (const activity_type& activity)
  : ::xml_schema::type (),
    activity_ (activity, this),
    trigger_ (this),
    starter_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Start::
  Start (::std::auto_ptr< activity_type > activity)
  : ::xml_schema::type (),
    activity_ (activity, this),
    trigger_ (this),
    starter_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Start::
  Start (const Start& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    activity_ (x.activity_, f, this),
    trigger_ (x.trigger_, f, this),
    starter_ (x.starter_, f, this),
    time_ (x.time_, f, this),
    label_ (x.label_, f, this),
    location_ (x.location_, f, this),
    role_ (x.role_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Start::
  Start (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    activity_ (this),
    trigger_ (this),
    starter_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Start::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // activity
      //
      if (n.name () == "activity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< activity_type > r (
          activity_traits::create (i, f, this));

        if (!activity_.present ())
        {
          this->activity_.set (r);
          continue;
        }
      }

      // trigger
      //
      if (n.name () == "trigger" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< trigger_type > r (
          trigger_traits::create (i, f, this));

        if (!this->trigger_)
        {
          this->trigger_.set (r);
          continue;
        }
      }

      // starter
      //
      if (n.name () == "starter" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< starter_type > r (
          starter_traits::create (i, f, this));

        if (!this->starter_)
        {
          this->starter_.set (r);
          continue;
        }
      }

      // time
      //
      if (n.name () == "time" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< time_type > r (
          time_traits::create (i, f, this));

        if (!this->time_)
        {
          this->time_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // location
      //
      if (n.name () == "location" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        this->location_.push_back (r);
        continue;
      }

      // role
      //
      if (n.name () == "role" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< role_type > r (
          role_traits::create (i, f, this));

        this->role_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!activity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "activity",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Start* Start::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Start (*this, f, c);
  }

  Start& Start::
  operator= (const Start& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->activity_ = x.activity_;
      this->trigger_ = x.trigger_;
      this->starter_ = x.starter_;
      this->time_ = x.time_;
      this->label_ = x.label_;
      this->location_ = x.location_;
      this->role_ = x.role_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Start::
  ~Start ()
  {
  }

  // End
  //

  End::
  End (const activity_type& activity)
  : ::xml_schema::type (),
    activity_ (activity, this),
    trigger_ (this),
    ender_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  End::
  End (::std::auto_ptr< activity_type > activity)
  : ::xml_schema::type (),
    activity_ (activity, this),
    trigger_ (this),
    ender_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  End::
  End (const End& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    activity_ (x.activity_, f, this),
    trigger_ (x.trigger_, f, this),
    ender_ (x.ender_, f, this),
    time_ (x.time_, f, this),
    label_ (x.label_, f, this),
    location_ (x.location_, f, this),
    role_ (x.role_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  End::
  End (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    activity_ (this),
    trigger_ (this),
    ender_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void End::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // activity
      //
      if (n.name () == "activity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< activity_type > r (
          activity_traits::create (i, f, this));

        if (!activity_.present ())
        {
          this->activity_.set (r);
          continue;
        }
      }

      // trigger
      //
      if (n.name () == "trigger" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< trigger_type > r (
          trigger_traits::create (i, f, this));

        if (!this->trigger_)
        {
          this->trigger_.set (r);
          continue;
        }
      }

      // ender
      //
      if (n.name () == "ender" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< ender_type > r (
          ender_traits::create (i, f, this));

        if (!this->ender_)
        {
          this->ender_.set (r);
          continue;
        }
      }

      // time
      //
      if (n.name () == "time" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< time_type > r (
          time_traits::create (i, f, this));

        if (!this->time_)
        {
          this->time_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // location
      //
      if (n.name () == "location" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        this->location_.push_back (r);
        continue;
      }

      // role
      //
      if (n.name () == "role" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< role_type > r (
          role_traits::create (i, f, this));

        this->role_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!activity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "activity",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  End* End::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class End (*this, f, c);
  }

  End& End::
  operator= (const End& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->activity_ = x.activity_;
      this->trigger_ = x.trigger_;
      this->ender_ = x.ender_;
      this->time_ = x.time_;
      this->label_ = x.label_;
      this->location_ = x.location_;
      this->role_ = x.role_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  End::
  ~End ()
  {
  }

  // Invalidation
  //

  Invalidation::
  Invalidation (const entity_type& entity)
  : ::xml_schema::type (),
    entity_ (entity, this),
    activity_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Invalidation::
  Invalidation (::std::auto_ptr< entity_type > entity)
  : ::xml_schema::type (),
    entity_ (entity, this),
    activity_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Invalidation::
  Invalidation (const Invalidation& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    entity_ (x.entity_, f, this),
    activity_ (x.activity_, f, this),
    time_ (x.time_, f, this),
    label_ (x.label_, f, this),
    location_ (x.location_, f, this),
    role_ (x.role_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Invalidation::
  Invalidation (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    entity_ (this),
    activity_ (this),
    time_ (this),
    label_ (this),
    location_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Invalidation::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // entity
      //
      if (n.name () == "entity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< entity_type > r (
          entity_traits::create (i, f, this));

        if (!entity_.present ())
        {
          this->entity_.set (r);
          continue;
        }
      }

      // activity
      //
      if (n.name () == "activity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< activity_type > r (
          activity_traits::create (i, f, this));

        if (!this->activity_)
        {
          this->activity_.set (r);
          continue;
        }
      }

      // time
      //
      if (n.name () == "time" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< time_type > r (
          time_traits::create (i, f, this));

        if (!this->time_)
        {
          this->time_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // location
      //
      if (n.name () == "location" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        this->location_.push_back (r);
        continue;
      }

      // role
      //
      if (n.name () == "role" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< role_type > r (
          role_traits::create (i, f, this));

        this->role_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!entity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "entity",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Invalidation* Invalidation::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Invalidation (*this, f, c);
  }

  Invalidation& Invalidation::
  operator= (const Invalidation& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->entity_ = x.entity_;
      this->activity_ = x.activity_;
      this->time_ = x.time_;
      this->label_ = x.label_;
      this->location_ = x.location_;
      this->role_ = x.role_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Invalidation::
  ~Invalidation ()
  {
  }

  // Derivation
  //

  Derivation::
  Derivation (const generatedEntity_type& generatedEntity,
              const usedEntity_type& usedEntity)
  : ::xml_schema::type (),
    generatedEntity_ (generatedEntity, this),
    usedEntity_ (usedEntity, this),
    activity_ (this),
    generation_ (this),
    usage_ (this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Derivation::
  Derivation (::std::auto_ptr< generatedEntity_type > generatedEntity,
              ::std::auto_ptr< usedEntity_type > usedEntity)
  : ::xml_schema::type (),
    generatedEntity_ (generatedEntity, this),
    usedEntity_ (usedEntity, this),
    activity_ (this),
    generation_ (this),
    usage_ (this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Derivation::
  Derivation (const Derivation& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    generatedEntity_ (x.generatedEntity_, f, this),
    usedEntity_ (x.usedEntity_, f, this),
    activity_ (x.activity_, f, this),
    generation_ (x.generation_, f, this),
    usage_ (x.usage_, f, this),
    label_ (x.label_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Derivation::
  Derivation (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    generatedEntity_ (this),
    usedEntity_ (this),
    activity_ (this),
    generation_ (this),
    usage_ (this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Derivation::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // generatedEntity
      //
      if (n.name () == "generatedEntity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< generatedEntity_type > r (
          generatedEntity_traits::create (i, f, this));

        if (!generatedEntity_.present ())
        {
          this->generatedEntity_.set (r);
          continue;
        }
      }

      // usedEntity
      //
      if (n.name () == "usedEntity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< usedEntity_type > r (
          usedEntity_traits::create (i, f, this));

        if (!usedEntity_.present ())
        {
          this->usedEntity_.set (r);
          continue;
        }
      }

      // activity
      //
      if (n.name () == "activity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< activity_type > r (
          activity_traits::create (i, f, this));

        if (!this->activity_)
        {
          this->activity_.set (r);
          continue;
        }
      }

      // generation
      //
      if (n.name () == "generation" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< generation_type > r (
          generation_traits::create (i, f, this));

        if (!this->generation_)
        {
          this->generation_.set (r);
          continue;
        }
      }

      // usage
      //
      if (n.name () == "usage" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< usage_type > r (
          usage_traits::create (i, f, this));

        if (!this->usage_)
        {
          this->usage_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!generatedEntity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "generatedEntity",
        "http://www.w3.org/ns/prov#");
    }

    if (!usedEntity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "usedEntity",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Derivation* Derivation::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Derivation (*this, f, c);
  }

  Derivation& Derivation::
  operator= (const Derivation& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->generatedEntity_ = x.generatedEntity_;
      this->usedEntity_ = x.usedEntity_;
      this->activity_ = x.activity_;
      this->generation_ = x.generation_;
      this->usage_ = x.usage_;
      this->label_ = x.label_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Derivation::
  ~Derivation ()
  {
  }

  // Revision
  //

  Revision::
  Revision (const generatedEntity_type& generatedEntity,
            const usedEntity_type& usedEntity)
  : ::prov::Derivation (generatedEntity,
                        usedEntity)
  {
  }

  Revision::
  Revision (::std::auto_ptr< generatedEntity_type > generatedEntity,
            ::std::auto_ptr< usedEntity_type > usedEntity)
  : ::prov::Derivation (generatedEntity,
                        usedEntity)
  {
  }

  Revision::
  Revision (const Revision& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::prov::Derivation (x, f, c)
  {
  }

  Revision::
  Revision (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::prov::Derivation (e, f, c)
  {
  }

  Revision* Revision::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Revision (*this, f, c);
  }

  Revision::
  ~Revision ()
  {
  }

  // Quotation
  //

  Quotation::
  Quotation (const generatedEntity_type& generatedEntity,
             const usedEntity_type& usedEntity)
  : ::prov::Derivation (generatedEntity,
                        usedEntity)
  {
  }

  Quotation::
  Quotation (::std::auto_ptr< generatedEntity_type > generatedEntity,
             ::std::auto_ptr< usedEntity_type > usedEntity)
  : ::prov::Derivation (generatedEntity,
                        usedEntity)
  {
  }

  Quotation::
  Quotation (const Quotation& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::prov::Derivation (x, f, c)
  {
  }

  Quotation::
  Quotation (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::prov::Derivation (e, f, c)
  {
  }

  Quotation* Quotation::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Quotation (*this, f, c);
  }

  Quotation::
  ~Quotation ()
  {
  }

  // PrimarySource
  //

  PrimarySource::
  PrimarySource (const generatedEntity_type& generatedEntity,
                 const usedEntity_type& usedEntity)
  : ::prov::Derivation (generatedEntity,
                        usedEntity)
  {
  }

  PrimarySource::
  PrimarySource (::std::auto_ptr< generatedEntity_type > generatedEntity,
                 ::std::auto_ptr< usedEntity_type > usedEntity)
  : ::prov::Derivation (generatedEntity,
                        usedEntity)
  {
  }

  PrimarySource::
  PrimarySource (const PrimarySource& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::prov::Derivation (x, f, c)
  {
  }

  PrimarySource::
  PrimarySource (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::prov::Derivation (e, f, c)
  {
  }

  PrimarySource* PrimarySource::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PrimarySource (*this, f, c);
  }

  PrimarySource::
  ~PrimarySource ()
  {
  }

  // Agent
  //

  Agent::
  Agent ()
  : ::xml_schema::type (),
    label_ (this),
    location_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Agent::
  Agent (const Agent& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    label_ (x.label_, f, this),
    location_ (x.location_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Agent::
  Agent (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    label_ (this),
    location_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Agent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // location
      //
      if (n.name () == "location" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< location_type > r (
          location_traits::create (i, f, this));

        this->location_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Agent* Agent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Agent (*this, f, c);
  }

  Agent& Agent::
  operator= (const Agent& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->label_ = x.label_;
      this->location_ = x.location_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Agent::
  ~Agent ()
  {
  }

  // Person
  //

  Person::
  Person ()
  : ::prov::Agent ()
  {
  }

  Person::
  Person (const Person& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::prov::Agent (x, f, c)
  {
  }

  Person::
  Person (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::prov::Agent (e, f, c)
  {
  }

  Person* Person::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Person (*this, f, c);
  }

  Person::
  ~Person ()
  {
  }

  // Organization
  //

  Organization::
  Organization ()
  : ::prov::Agent ()
  {
  }

  Organization::
  Organization (const Organization& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::prov::Agent (x, f, c)
  {
  }

  Organization::
  Organization (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::prov::Agent (e, f, c)
  {
  }

  Organization* Organization::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Organization (*this, f, c);
  }

  Organization::
  ~Organization ()
  {
  }

  // SoftwareAgent
  //

  SoftwareAgent::
  SoftwareAgent ()
  : ::prov::Agent ()
  {
  }

  SoftwareAgent::
  SoftwareAgent (const SoftwareAgent& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::prov::Agent (x, f, c)
  {
  }

  SoftwareAgent::
  SoftwareAgent (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::prov::Agent (e, f, c)
  {
  }

  SoftwareAgent* SoftwareAgent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SoftwareAgent (*this, f, c);
  }

  SoftwareAgent::
  ~SoftwareAgent ()
  {
  }

  // Attribution
  //

  Attribution::
  Attribution (const entity_type& entity,
               const agent_type& agent)
  : ::xml_schema::type (),
    entity_ (entity, this),
    agent_ (agent, this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Attribution::
  Attribution (::std::auto_ptr< entity_type > entity,
               ::std::auto_ptr< agent_type > agent)
  : ::xml_schema::type (),
    entity_ (entity, this),
    agent_ (agent, this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Attribution::
  Attribution (const Attribution& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    entity_ (x.entity_, f, this),
    agent_ (x.agent_, f, this),
    label_ (x.label_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Attribution::
  Attribution (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    entity_ (this),
    agent_ (this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Attribution::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // entity
      //
      if (n.name () == "entity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< entity_type > r (
          entity_traits::create (i, f, this));

        if (!entity_.present ())
        {
          this->entity_.set (r);
          continue;
        }
      }

      // agent
      //
      if (n.name () == "agent" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< agent_type > r (
          agent_traits::create (i, f, this));

        if (!agent_.present ())
        {
          this->agent_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!entity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "entity",
        "http://www.w3.org/ns/prov#");
    }

    if (!agent_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "agent",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Attribution* Attribution::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Attribution (*this, f, c);
  }

  Attribution& Attribution::
  operator= (const Attribution& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->entity_ = x.entity_;
      this->agent_ = x.agent_;
      this->label_ = x.label_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Attribution::
  ~Attribution ()
  {
  }

  // Association
  //

  Association::
  Association (const activity_type& activity)
  : ::xml_schema::type (),
    activity_ (activity, this),
    agent_ (this),
    plan_ (this),
    label_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Association::
  Association (::std::auto_ptr< activity_type > activity)
  : ::xml_schema::type (),
    activity_ (activity, this),
    agent_ (this),
    plan_ (this),
    label_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Association::
  Association (const Association& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    activity_ (x.activity_, f, this),
    agent_ (x.agent_, f, this),
    plan_ (x.plan_, f, this),
    label_ (x.label_, f, this),
    role_ (x.role_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Association::
  Association (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    activity_ (this),
    agent_ (this),
    plan_ (this),
    label_ (this),
    role_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Association::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // activity
      //
      if (n.name () == "activity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< activity_type > r (
          activity_traits::create (i, f, this));

        if (!activity_.present ())
        {
          this->activity_.set (r);
          continue;
        }
      }

      // agent
      //
      if (n.name () == "agent" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< agent_type > r (
          agent_traits::create (i, f, this));

        if (!this->agent_)
        {
          this->agent_.set (r);
          continue;
        }
      }

      // plan
      //
      if (n.name () == "plan" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< plan_type > r (
          plan_traits::create (i, f, this));

        if (!this->plan_)
        {
          this->plan_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // role
      //
      if (n.name () == "role" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< role_type > r (
          role_traits::create (i, f, this));

        this->role_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!activity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "activity",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Association* Association::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Association (*this, f, c);
  }

  Association& Association::
  operator= (const Association& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->activity_ = x.activity_;
      this->agent_ = x.agent_;
      this->plan_ = x.plan_;
      this->label_ = x.label_;
      this->role_ = x.role_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Association::
  ~Association ()
  {
  }

  // Delegation
  //

  Delegation::
  Delegation (const delegate_type& delegate,
              const responsible_type& responsible)
  : ::xml_schema::type (),
    delegate_ (delegate, this),
    responsible_ (responsible, this),
    activity_ (this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Delegation::
  Delegation (::std::auto_ptr< delegate_type > delegate,
              ::std::auto_ptr< responsible_type > responsible)
  : ::xml_schema::type (),
    delegate_ (delegate, this),
    responsible_ (responsible, this),
    activity_ (this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Delegation::
  Delegation (const Delegation& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    delegate_ (x.delegate_, f, this),
    responsible_ (x.responsible_, f, this),
    activity_ (x.activity_, f, this),
    label_ (x.label_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Delegation::
  Delegation (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    delegate_ (this),
    responsible_ (this),
    activity_ (this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Delegation::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // delegate
      //
      if (n.name () == "delegate" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< delegate_type > r (
          delegate_traits::create (i, f, this));

        if (!delegate_.present ())
        {
          this->delegate_.set (r);
          continue;
        }
      }

      // responsible
      //
      if (n.name () == "responsible" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< responsible_type > r (
          responsible_traits::create (i, f, this));

        if (!responsible_.present ())
        {
          this->responsible_.set (r);
          continue;
        }
      }

      // activity
      //
      if (n.name () == "activity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< activity_type > r (
          activity_traits::create (i, f, this));

        if (!this->activity_)
        {
          this->activity_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!delegate_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "delegate",
        "http://www.w3.org/ns/prov#");
    }

    if (!responsible_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "responsible",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Delegation* Delegation::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Delegation (*this, f, c);
  }

  Delegation& Delegation::
  operator= (const Delegation& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->delegate_ = x.delegate_;
      this->responsible_ = x.responsible_;
      this->activity_ = x.activity_;
      this->label_ = x.label_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Delegation::
  ~Delegation ()
  {
  }

  // Influence
  //

  Influence::
  Influence (const influencee_type& influencee,
             const influencer_type& influencer)
  : ::xml_schema::type (),
    influencee_ (influencee, this),
    influencer_ (influencer, this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Influence::
  Influence (::std::auto_ptr< influencee_type > influencee,
             ::std::auto_ptr< influencer_type > influencer)
  : ::xml_schema::type (),
    influencee_ (influencee, this),
    influencer_ (influencer, this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
  }

  Influence::
  Influence (const Influence& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    influencee_ (x.influencee_, f, this),
    influencer_ (x.influencer_, f, this),
    label_ (x.label_, f, this),
    type_ (x.type_, f, this),
    id_ (x.id_, f, this)
  {
  }

  Influence::
  Influence (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    influencee_ (this),
    influencer_ (this),
    label_ (this),
    type_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Influence::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // influencee
      //
      if (n.name () == "influencee" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< influencee_type > r (
          influencee_traits::create (i, f, this));

        if (!influencee_.present ())
        {
          this->influencee_.set (r);
          continue;
        }
      }

      // influencer
      //
      if (n.name () == "influencer" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< influencer_type > r (
          influencer_traits::create (i, f, this));

        if (!influencer_.present ())
        {
          this->influencer_.set (r);
          continue;
        }
      }

      // label
      //
      if (n.name () == "label" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< label_type > r (
          label_traits::create (i, f, this));

        this->label_.push_back (r);
        continue;
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.push_back (r);
        continue;
      }

      break;
    }

    if (!influencee_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "influencee",
        "http://www.w3.org/ns/prov#");
    }

    if (!influencer_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "influencer",
        "http://www.w3.org/ns/prov#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  Influence* Influence::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Influence (*this, f, c);
  }

  Influence& Influence::
  operator= (const Influence& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->influencee_ = x.influencee_;
      this->influencer_ = x.influencer_;
      this->label_ = x.label_;
      this->type_ = x.type_;
      this->id_ = x.id_;
    }

    return *this;
  }

  Influence::
  ~Influence ()
  {
  }

  // Bundle
  //

  Bundle::
  Bundle ()
  : ::prov::Entity ()
  {
  }

  Bundle::
  Bundle (const Bundle& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::prov::Entity (x, f, c)
  {
  }

  Bundle::
  Bundle (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::prov::Entity (e, f, c)
  {
  }

  Bundle* Bundle::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Bundle (*this, f, c);
  }

  Bundle::
  ~Bundle ()
  {
  }

  // BundleConstructor
  //

  BundleConstructor::
  BundleConstructor ()
  : ::xml_schema::type (),
    entity_ (this),
    activity_ (this),
    wasGeneratedBy_ (this),
    used_ (this),
    wasInformedBy_ (this),
    wasStartedBy_ (this),
    wasEndedBy_ (this),
    wasInvalidatedBy_ (this),
    wasDerivedFrom_ (this),
    wasRevisionOf_ (this),
    wasQuotedFrom_ (this),
    hadPrimarySource_ (this),
    agent_ (this),
    person_ (this),
    organization_ (this),
    softwareAgent_ (this),
    wasAttributedTo_ (this),
    wasAssociatedWith_ (this),
    actedOnBehalfOf_ (this),
    wasInfluencedBy_ (this),
    bundle_ (this),
    specializationOf_ (this),
    alternateOf_ (this),
    collection_ (this),
    emptyCollection_ (this),
    hadMember_ (this),
    plan_ (this),
    other_ (this),
    internalElement_ (this),
    id_ (this)
  {
  }

  BundleConstructor::
  BundleConstructor (const BundleConstructor& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    entity_ (x.entity_, f, this),
    activity_ (x.activity_, f, this),
    wasGeneratedBy_ (x.wasGeneratedBy_, f, this),
    used_ (x.used_, f, this),
    wasInformedBy_ (x.wasInformedBy_, f, this),
    wasStartedBy_ (x.wasStartedBy_, f, this),
    wasEndedBy_ (x.wasEndedBy_, f, this),
    wasInvalidatedBy_ (x.wasInvalidatedBy_, f, this),
    wasDerivedFrom_ (x.wasDerivedFrom_, f, this),
    wasRevisionOf_ (x.wasRevisionOf_, f, this),
    wasQuotedFrom_ (x.wasQuotedFrom_, f, this),
    hadPrimarySource_ (x.hadPrimarySource_, f, this),
    agent_ (x.agent_, f, this),
    person_ (x.person_, f, this),
    organization_ (x.organization_, f, this),
    softwareAgent_ (x.softwareAgent_, f, this),
    wasAttributedTo_ (x.wasAttributedTo_, f, this),
    wasAssociatedWith_ (x.wasAssociatedWith_, f, this),
    actedOnBehalfOf_ (x.actedOnBehalfOf_, f, this),
    wasInfluencedBy_ (x.wasInfluencedBy_, f, this),
    bundle_ (x.bundle_, f, this),
    specializationOf_ (x.specializationOf_, f, this),
    alternateOf_ (x.alternateOf_, f, this),
    collection_ (x.collection_, f, this),
    emptyCollection_ (x.emptyCollection_, f, this),
    hadMember_ (x.hadMember_, f, this),
    plan_ (x.plan_, f, this),
    other_ (x.other_, f, this),
    internalElement_ (x.internalElement_, f, this),
    id_ (x.id_, f, this)
  {
  }

  BundleConstructor::
  BundleConstructor (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    entity_ (this),
    activity_ (this),
    wasGeneratedBy_ (this),
    used_ (this),
    wasInformedBy_ (this),
    wasStartedBy_ (this),
    wasEndedBy_ (this),
    wasInvalidatedBy_ (this),
    wasDerivedFrom_ (this),
    wasRevisionOf_ (this),
    wasQuotedFrom_ (this),
    hadPrimarySource_ (this),
    agent_ (this),
    person_ (this),
    organization_ (this),
    softwareAgent_ (this),
    wasAttributedTo_ (this),
    wasAssociatedWith_ (this),
    actedOnBehalfOf_ (this),
    wasInfluencedBy_ (this),
    bundle_ (this),
    specializationOf_ (this),
    alternateOf_ (this),
    collection_ (this),
    emptyCollection_ (this),
    hadMember_ (this),
    plan_ (this),
    other_ (this),
    internalElement_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void BundleConstructor::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // entity
      //
      if (n.name () == "entity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< entity_type > r (
          entity_traits::create (i, f, this));

        this->entity_.push_back (r);
        continue;
      }

      // activity
      //
      if (n.name () == "activity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< activity_type > r (
          activity_traits::create (i, f, this));

        this->activity_.push_back (r);
        continue;
      }

      // wasGeneratedBy
      //
      if (n.name () == "wasGeneratedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasGeneratedBy_type > r (
          wasGeneratedBy_traits::create (i, f, this));

        this->wasGeneratedBy_.push_back (r);
        continue;
      }

      // used
      //
      if (n.name () == "used" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< used_type > r (
          used_traits::create (i, f, this));

        this->used_.push_back (r);
        continue;
      }

      // wasInformedBy
      //
      if (n.name () == "wasInformedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasInformedBy_type > r (
          wasInformedBy_traits::create (i, f, this));

        this->wasInformedBy_.push_back (r);
        continue;
      }

      // wasStartedBy
      //
      if (n.name () == "wasStartedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasStartedBy_type > r (
          wasStartedBy_traits::create (i, f, this));

        this->wasStartedBy_.push_back (r);
        continue;
      }

      // wasEndedBy
      //
      if (n.name () == "wasEndedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasEndedBy_type > r (
          wasEndedBy_traits::create (i, f, this));

        this->wasEndedBy_.push_back (r);
        continue;
      }

      // wasInvalidatedBy
      //
      if (n.name () == "wasInvalidatedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasInvalidatedBy_type > r (
          wasInvalidatedBy_traits::create (i, f, this));

        this->wasInvalidatedBy_.push_back (r);
        continue;
      }

      // wasDerivedFrom
      //
      if (n.name () == "wasDerivedFrom" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasDerivedFrom_type > r (
          wasDerivedFrom_traits::create (i, f, this));

        this->wasDerivedFrom_.push_back (r);
        continue;
      }

      // wasRevisionOf
      //
      if (n.name () == "wasRevisionOf" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasRevisionOf_type > r (
          wasRevisionOf_traits::create (i, f, this));

        this->wasRevisionOf_.push_back (r);
        continue;
      }

      // wasQuotedFrom
      //
      if (n.name () == "wasQuotedFrom" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasQuotedFrom_type > r (
          wasQuotedFrom_traits::create (i, f, this));

        this->wasQuotedFrom_.push_back (r);
        continue;
      }

      // hadPrimarySource
      //
      if (n.name () == "hadPrimarySource" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< hadPrimarySource_type > r (
          hadPrimarySource_traits::create (i, f, this));

        this->hadPrimarySource_.push_back (r);
        continue;
      }

      // agent
      //
      if (n.name () == "agent" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< agent_type > r (
          agent_traits::create (i, f, this));

        this->agent_.push_back (r);
        continue;
      }

      // person
      //
      if (n.name () == "person" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< person_type > r (
          person_traits::create (i, f, this));

        this->person_.push_back (r);
        continue;
      }

      // organization
      //
      if (n.name () == "organization" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< organization_type > r (
          organization_traits::create (i, f, this));

        this->organization_.push_back (r);
        continue;
      }

      // softwareAgent
      //
      if (n.name () == "softwareAgent" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< softwareAgent_type > r (
          softwareAgent_traits::create (i, f, this));

        this->softwareAgent_.push_back (r);
        continue;
      }

      // wasAttributedTo
      //
      if (n.name () == "wasAttributedTo" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasAttributedTo_type > r (
          wasAttributedTo_traits::create (i, f, this));

        this->wasAttributedTo_.push_back (r);
        continue;
      }

      // wasAssociatedWith
      //
      if (n.name () == "wasAssociatedWith" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasAssociatedWith_type > r (
          wasAssociatedWith_traits::create (i, f, this));

        this->wasAssociatedWith_.push_back (r);
        continue;
      }

      // actedOnBehalfOf
      //
      if (n.name () == "actedOnBehalfOf" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< actedOnBehalfOf_type > r (
          actedOnBehalfOf_traits::create (i, f, this));

        this->actedOnBehalfOf_.push_back (r);
        continue;
      }

      // wasInfluencedBy
      //
      if (n.name () == "wasInfluencedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasInfluencedBy_type > r (
          wasInfluencedBy_traits::create (i, f, this));

        this->wasInfluencedBy_.push_back (r);
        continue;
      }

      // bundle
      //
      if (n.name () == "bundle" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< bundle_type > r (
          bundle_traits::create (i, f, this));

        this->bundle_.push_back (r);
        continue;
      }

      // specializationOf
      //
      if (n.name () == "specializationOf" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< specializationOf_type > r (
          specializationOf_traits::create (i, f, this));

        this->specializationOf_.push_back (r);
        continue;
      }

      // alternateOf
      //
      if (n.name () == "alternateOf" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< alternateOf_type > r (
          alternateOf_traits::create (i, f, this));

        this->alternateOf_.push_back (r);
        continue;
      }

      // collection
      //
      if (n.name () == "collection" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< collection_type > r (
          collection_traits::create (i, f, this));

        this->collection_.push_back (r);
        continue;
      }

      // emptyCollection
      //
      if (n.name () == "emptyCollection" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< emptyCollection_type > r (
          emptyCollection_traits::create (i, f, this));

        this->emptyCollection_.push_back (r);
        continue;
      }

      // hadMember
      //
      if (n.name () == "hadMember" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< hadMember_type > r (
          hadMember_traits::create (i, f, this));

        this->hadMember_.push_back (r);
        continue;
      }

      // plan
      //
      if (n.name () == "plan" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< plan_type > r (
          plan_traits::create (i, f, this));

        this->plan_.push_back (r);
        continue;
      }

      // other
      //
      if (n.name () == "other" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< other_type > r (
          other_traits::create (i, f, this));

        this->other_.push_back (r);
        continue;
      }

      // internalElement
      //
      if (n.name () == "internalElement" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< internalElement_type > r (
          internalElement_traits::create (i, f, this));

        this->internalElement_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }
  }

  BundleConstructor* BundleConstructor::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class BundleConstructor (*this, f, c);
  }

  BundleConstructor& BundleConstructor::
  operator= (const BundleConstructor& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->entity_ = x.entity_;
      this->activity_ = x.activity_;
      this->wasGeneratedBy_ = x.wasGeneratedBy_;
      this->used_ = x.used_;
      this->wasInformedBy_ = x.wasInformedBy_;
      this->wasStartedBy_ = x.wasStartedBy_;
      this->wasEndedBy_ = x.wasEndedBy_;
      this->wasInvalidatedBy_ = x.wasInvalidatedBy_;
      this->wasDerivedFrom_ = x.wasDerivedFrom_;
      this->wasRevisionOf_ = x.wasRevisionOf_;
      this->wasQuotedFrom_ = x.wasQuotedFrom_;
      this->hadPrimarySource_ = x.hadPrimarySource_;
      this->agent_ = x.agent_;
      this->person_ = x.person_;
      this->organization_ = x.organization_;
      this->softwareAgent_ = x.softwareAgent_;
      this->wasAttributedTo_ = x.wasAttributedTo_;
      this->wasAssociatedWith_ = x.wasAssociatedWith_;
      this->actedOnBehalfOf_ = x.actedOnBehalfOf_;
      this->wasInfluencedBy_ = x.wasInfluencedBy_;
      this->bundle_ = x.bundle_;
      this->specializationOf_ = x.specializationOf_;
      this->alternateOf_ = x.alternateOf_;
      this->collection_ = x.collection_;
      this->emptyCollection_ = x.emptyCollection_;
      this->hadMember_ = x.hadMember_;
      this->plan_ = x.plan_;
      this->other_ = x.other_;
      this->internalElement_ = x.internalElement_;
      this->id_ = x.id_;
    }

    return *this;
  }

  BundleConstructor::
  ~BundleConstructor ()
  {
  }

  // Specialization
  //

  Specialization::
  Specialization (const specificEntity_type& specificEntity,
                  const generalEntity_type& generalEntity)
  : ::xml_schema::type (),
    specificEntity_ (specificEntity, this),
    generalEntity_ (generalEntity, this)
  {
  }

  Specialization::
  Specialization (::std::auto_ptr< specificEntity_type > specificEntity,
                  ::std::auto_ptr< generalEntity_type > generalEntity)
  : ::xml_schema::type (),
    specificEntity_ (specificEntity, this),
    generalEntity_ (generalEntity, this)
  {
  }

  Specialization::
  Specialization (const Specialization& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    specificEntity_ (x.specificEntity_, f, this),
    generalEntity_ (x.generalEntity_, f, this)
  {
  }

  Specialization::
  Specialization (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    specificEntity_ (this),
    generalEntity_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Specialization::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // specificEntity
      //
      if (n.name () == "specificEntity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< specificEntity_type > r (
          specificEntity_traits::create (i, f, this));

        if (!specificEntity_.present ())
        {
          this->specificEntity_.set (r);
          continue;
        }
      }

      // generalEntity
      //
      if (n.name () == "generalEntity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< generalEntity_type > r (
          generalEntity_traits::create (i, f, this));

        if (!generalEntity_.present ())
        {
          this->generalEntity_.set (r);
          continue;
        }
      }

      break;
    }

    if (!specificEntity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "specificEntity",
        "http://www.w3.org/ns/prov#");
    }

    if (!generalEntity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "generalEntity",
        "http://www.w3.org/ns/prov#");
    }
  }

  Specialization* Specialization::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Specialization (*this, f, c);
  }

  Specialization& Specialization::
  operator= (const Specialization& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->specificEntity_ = x.specificEntity_;
      this->generalEntity_ = x.generalEntity_;
    }

    return *this;
  }

  Specialization::
  ~Specialization ()
  {
  }

  // Alternate
  //

  Alternate::
  Alternate (const alternate1_type& alternate1,
             const alternate2_type& alternate2)
  : ::xml_schema::type (),
    alternate1_ (alternate1, this),
    alternate2_ (alternate2, this)
  {
  }

  Alternate::
  Alternate (::std::auto_ptr< alternate1_type > alternate1,
             ::std::auto_ptr< alternate2_type > alternate2)
  : ::xml_schema::type (),
    alternate1_ (alternate1, this),
    alternate2_ (alternate2, this)
  {
  }

  Alternate::
  Alternate (const Alternate& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    alternate1_ (x.alternate1_, f, this),
    alternate2_ (x.alternate2_, f, this)
  {
  }

  Alternate::
  Alternate (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    alternate1_ (this),
    alternate2_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Alternate::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // alternate1
      //
      if (n.name () == "alternate1" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< alternate1_type > r (
          alternate1_traits::create (i, f, this));

        if (!alternate1_.present ())
        {
          this->alternate1_.set (r);
          continue;
        }
      }

      // alternate2
      //
      if (n.name () == "alternate2" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< alternate2_type > r (
          alternate2_traits::create (i, f, this));

        if (!alternate2_.present ())
        {
          this->alternate2_.set (r);
          continue;
        }
      }

      break;
    }

    if (!alternate1_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "alternate1",
        "http://www.w3.org/ns/prov#");
    }

    if (!alternate2_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "alternate2",
        "http://www.w3.org/ns/prov#");
    }
  }

  Alternate* Alternate::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Alternate (*this, f, c);
  }

  Alternate& Alternate::
  operator= (const Alternate& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->alternate1_ = x.alternate1_;
      this->alternate2_ = x.alternate2_;
    }

    return *this;
  }

  Alternate::
  ~Alternate ()
  {
  }

  // Collection
  //

  Collection::
  Collection ()
  : ::prov::Entity ()
  {
  }

  Collection::
  Collection (const Collection& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::prov::Entity (x, f, c)
  {
  }

  Collection::
  Collection (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::prov::Entity (e, f, c)
  {
  }

  Collection* Collection::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Collection (*this, f, c);
  }

  Collection::
  ~Collection ()
  {
  }

  // EmptyCollection
  //

  EmptyCollection::
  EmptyCollection ()
  : ::prov::Collection ()
  {
  }

  EmptyCollection::
  EmptyCollection (const EmptyCollection& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::prov::Collection (x, f, c)
  {
  }

  EmptyCollection::
  EmptyCollection (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::prov::Collection (e, f, c)
  {
  }

  EmptyCollection* EmptyCollection::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class EmptyCollection (*this, f, c);
  }

  EmptyCollection::
  ~EmptyCollection ()
  {
  }

  // Membership
  //

  Membership::
  Membership (const collection_type& collection)
  : ::xml_schema::type (),
    collection_ (collection, this),
    entity_ (this)
  {
  }

  Membership::
  Membership (::std::auto_ptr< collection_type > collection)
  : ::xml_schema::type (),
    collection_ (collection, this),
    entity_ (this)
  {
  }

  Membership::
  Membership (const Membership& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    collection_ (x.collection_, f, this),
    entity_ (x.entity_, f, this)
  {
  }

  Membership::
  Membership (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    collection_ (this),
    entity_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Membership::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // collection
      //
      if (n.name () == "collection" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< collection_type > r (
          collection_traits::create (i, f, this));

        if (!collection_.present ())
        {
          this->collection_.set (r);
          continue;
        }
      }

      // entity
      //
      if (n.name () == "entity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< entity_type > r (
          entity_traits::create (i, f, this));

        this->entity_.push_back (r);
        continue;
      }

      break;
    }

    if (!collection_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "collection",
        "http://www.w3.org/ns/prov#");
    }
  }

  Membership* Membership::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Membership (*this, f, c);
  }

  Membership& Membership::
  operator= (const Membership& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->collection_ = x.collection_;
      this->entity_ = x.entity_;
    }

    return *this;
  }

  Membership::
  ~Membership ()
  {
  }

  // Plan
  //

  Plan::
  Plan ()
  : ::prov::Entity ()
  {
  }

  Plan::
  Plan (const Plan& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::prov::Entity (x, f, c)
  {
  }

  Plan::
  Plan (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::prov::Entity (e, f, c)
  {
  }

  Plan* Plan::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Plan (*this, f, c);
  }

  Plan::
  ~Plan ()
  {
  }

  // InternationalizedString
  //

  InternationalizedString::
  InternationalizedString ()
  : ::xml_schema::string (),
    lang_ (this)
  {
  }

  InternationalizedString::
  InternationalizedString (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base),
    lang_ (this)
  {
  }

  InternationalizedString::
  InternationalizedString (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base),
    lang_ (this)
  {
  }

  InternationalizedString::
  InternationalizedString (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base),
    lang_ (this)
  {
  }

  InternationalizedString::
  InternationalizedString (const InternationalizedString& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c),
    lang_ (x.lang_, f, this)
  {
  }

  InternationalizedString::
  InternationalizedString (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
    lang_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void InternationalizedString::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "lang" && n.namespace_ () == "http://www.w3.org/XML/1998/namespace")
      {
        this->lang_.set (lang_traits::create (i, f, this));
        continue;
      }
    }
  }

  InternationalizedString* InternationalizedString::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class InternationalizedString (*this, f, c);
  }

  InternationalizedString& InternationalizedString::
  operator= (const InternationalizedString& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::string& > (*this) = x;
      this->lang_ = x.lang_;
    }

    return *this;
  }

  InternationalizedString::
  ~InternationalizedString ()
  {
  }

  // IDRef
  //

  IDRef::
  IDRef (const ref_type& ref)
  : ::xml_schema::type (),
    ref_ (ref, this)
  {
  }

  IDRef::
  IDRef (const IDRef& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    ref_ (x.ref_, f, this)
  {
  }

  IDRef::
  IDRef (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    ref_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void IDRef::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "ref" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        this->ref_.set (ref_traits::create (i, f, this));
        continue;
      }
    }

    if (!ref_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "ref",
        "http://www.w3.org/ns/prov#");
    }
  }

  IDRef* IDRef::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class IDRef (*this, f, c);
  }

  IDRef& IDRef::
  operator= (const IDRef& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->ref_ = x.ref_;
    }

    return *this;
  }

  IDRef::
  ~IDRef ()
  {
  }

  // Document
  //

  Document::
  Document ()
  : ::xml_schema::type (),
    entity_ (this),
    activity_ (this),
    wasGeneratedBy_ (this),
    used_ (this),
    wasInformedBy_ (this),
    wasStartedBy_ (this),
    wasEndedBy_ (this),
    wasInvalidatedBy_ (this),
    wasDerivedFrom_ (this),
    wasRevisionOf_ (this),
    wasQuotedFrom_ (this),
    hadPrimarySource_ (this),
    agent_ (this),
    person_ (this),
    organization_ (this),
    softwareAgent_ (this),
    wasAttributedTo_ (this),
    wasAssociatedWith_ (this),
    actedOnBehalfOf_ (this),
    wasInfluencedBy_ (this),
    bundle_ (this),
    specializationOf_ (this),
    alternateOf_ (this),
    collection_ (this),
    emptyCollection_ (this),
    hadMember_ (this),
    plan_ (this),
    other_ (this),
    internalElement_ (this),
    bundleContent_ (this)
  {
  }

  Document::
  Document (const Document& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    entity_ (x.entity_, f, this),
    activity_ (x.activity_, f, this),
    wasGeneratedBy_ (x.wasGeneratedBy_, f, this),
    used_ (x.used_, f, this),
    wasInformedBy_ (x.wasInformedBy_, f, this),
    wasStartedBy_ (x.wasStartedBy_, f, this),
    wasEndedBy_ (x.wasEndedBy_, f, this),
    wasInvalidatedBy_ (x.wasInvalidatedBy_, f, this),
    wasDerivedFrom_ (x.wasDerivedFrom_, f, this),
    wasRevisionOf_ (x.wasRevisionOf_, f, this),
    wasQuotedFrom_ (x.wasQuotedFrom_, f, this),
    hadPrimarySource_ (x.hadPrimarySource_, f, this),
    agent_ (x.agent_, f, this),
    person_ (x.person_, f, this),
    organization_ (x.organization_, f, this),
    softwareAgent_ (x.softwareAgent_, f, this),
    wasAttributedTo_ (x.wasAttributedTo_, f, this),
    wasAssociatedWith_ (x.wasAssociatedWith_, f, this),
    actedOnBehalfOf_ (x.actedOnBehalfOf_, f, this),
    wasInfluencedBy_ (x.wasInfluencedBy_, f, this),
    bundle_ (x.bundle_, f, this),
    specializationOf_ (x.specializationOf_, f, this),
    alternateOf_ (x.alternateOf_, f, this),
    collection_ (x.collection_, f, this),
    emptyCollection_ (x.emptyCollection_, f, this),
    hadMember_ (x.hadMember_, f, this),
    plan_ (x.plan_, f, this),
    other_ (x.other_, f, this),
    internalElement_ (x.internalElement_, f, this),
    bundleContent_ (x.bundleContent_, f, this)
  {
  }

  Document::
  Document (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    entity_ (this),
    activity_ (this),
    wasGeneratedBy_ (this),
    used_ (this),
    wasInformedBy_ (this),
    wasStartedBy_ (this),
    wasEndedBy_ (this),
    wasInvalidatedBy_ (this),
    wasDerivedFrom_ (this),
    wasRevisionOf_ (this),
    wasQuotedFrom_ (this),
    hadPrimarySource_ (this),
    agent_ (this),
    person_ (this),
    organization_ (this),
    softwareAgent_ (this),
    wasAttributedTo_ (this),
    wasAssociatedWith_ (this),
    actedOnBehalfOf_ (this),
    wasInfluencedBy_ (this),
    bundle_ (this),
    specializationOf_ (this),
    alternateOf_ (this),
    collection_ (this),
    emptyCollection_ (this),
    hadMember_ (this),
    plan_ (this),
    other_ (this),
    internalElement_ (this),
    bundleContent_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Document::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // entity
      //
      if (n.name () == "entity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< entity_type > r (
          entity_traits::create (i, f, this));

        this->entity_.push_back (r);
        continue;
      }

      // activity
      //
      if (n.name () == "activity" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< activity_type > r (
          activity_traits::create (i, f, this));

        this->activity_.push_back (r);
        continue;
      }

      // wasGeneratedBy
      //
      if (n.name () == "wasGeneratedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasGeneratedBy_type > r (
          wasGeneratedBy_traits::create (i, f, this));

        this->wasGeneratedBy_.push_back (r);
        continue;
      }

      // used
      //
      if (n.name () == "used" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< used_type > r (
          used_traits::create (i, f, this));

        this->used_.push_back (r);
        continue;
      }

      // wasInformedBy
      //
      if (n.name () == "wasInformedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasInformedBy_type > r (
          wasInformedBy_traits::create (i, f, this));

        this->wasInformedBy_.push_back (r);
        continue;
      }

      // wasStartedBy
      //
      if (n.name () == "wasStartedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasStartedBy_type > r (
          wasStartedBy_traits::create (i, f, this));

        this->wasStartedBy_.push_back (r);
        continue;
      }

      // wasEndedBy
      //
      if (n.name () == "wasEndedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasEndedBy_type > r (
          wasEndedBy_traits::create (i, f, this));

        this->wasEndedBy_.push_back (r);
        continue;
      }

      // wasInvalidatedBy
      //
      if (n.name () == "wasInvalidatedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasInvalidatedBy_type > r (
          wasInvalidatedBy_traits::create (i, f, this));

        this->wasInvalidatedBy_.push_back (r);
        continue;
      }

      // wasDerivedFrom
      //
      if (n.name () == "wasDerivedFrom" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasDerivedFrom_type > r (
          wasDerivedFrom_traits::create (i, f, this));

        this->wasDerivedFrom_.push_back (r);
        continue;
      }

      // wasRevisionOf
      //
      if (n.name () == "wasRevisionOf" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasRevisionOf_type > r (
          wasRevisionOf_traits::create (i, f, this));

        this->wasRevisionOf_.push_back (r);
        continue;
      }

      // wasQuotedFrom
      //
      if (n.name () == "wasQuotedFrom" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasQuotedFrom_type > r (
          wasQuotedFrom_traits::create (i, f, this));

        this->wasQuotedFrom_.push_back (r);
        continue;
      }

      // hadPrimarySource
      //
      if (n.name () == "hadPrimarySource" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< hadPrimarySource_type > r (
          hadPrimarySource_traits::create (i, f, this));

        this->hadPrimarySource_.push_back (r);
        continue;
      }

      // agent
      //
      if (n.name () == "agent" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< agent_type > r (
          agent_traits::create (i, f, this));

        this->agent_.push_back (r);
        continue;
      }

      // person
      //
      if (n.name () == "person" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< person_type > r (
          person_traits::create (i, f, this));

        this->person_.push_back (r);
        continue;
      }

      // organization
      //
      if (n.name () == "organization" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< organization_type > r (
          organization_traits::create (i, f, this));

        this->organization_.push_back (r);
        continue;
      }

      // softwareAgent
      //
      if (n.name () == "softwareAgent" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< softwareAgent_type > r (
          softwareAgent_traits::create (i, f, this));

        this->softwareAgent_.push_back (r);
        continue;
      }

      // wasAttributedTo
      //
      if (n.name () == "wasAttributedTo" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasAttributedTo_type > r (
          wasAttributedTo_traits::create (i, f, this));

        this->wasAttributedTo_.push_back (r);
        continue;
      }

      // wasAssociatedWith
      //
      if (n.name () == "wasAssociatedWith" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasAssociatedWith_type > r (
          wasAssociatedWith_traits::create (i, f, this));

        this->wasAssociatedWith_.push_back (r);
        continue;
      }

      // actedOnBehalfOf
      //
      if (n.name () == "actedOnBehalfOf" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< actedOnBehalfOf_type > r (
          actedOnBehalfOf_traits::create (i, f, this));

        this->actedOnBehalfOf_.push_back (r);
        continue;
      }

      // wasInfluencedBy
      //
      if (n.name () == "wasInfluencedBy" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< wasInfluencedBy_type > r (
          wasInfluencedBy_traits::create (i, f, this));

        this->wasInfluencedBy_.push_back (r);
        continue;
      }

      // bundle
      //
      if (n.name () == "bundle" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< bundle_type > r (
          bundle_traits::create (i, f, this));

        this->bundle_.push_back (r);
        continue;
      }

      // specializationOf
      //
      if (n.name () == "specializationOf" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< specializationOf_type > r (
          specializationOf_traits::create (i, f, this));

        this->specializationOf_.push_back (r);
        continue;
      }

      // alternateOf
      //
      if (n.name () == "alternateOf" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< alternateOf_type > r (
          alternateOf_traits::create (i, f, this));

        this->alternateOf_.push_back (r);
        continue;
      }

      // collection
      //
      if (n.name () == "collection" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< collection_type > r (
          collection_traits::create (i, f, this));

        this->collection_.push_back (r);
        continue;
      }

      // emptyCollection
      //
      if (n.name () == "emptyCollection" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< emptyCollection_type > r (
          emptyCollection_traits::create (i, f, this));

        this->emptyCollection_.push_back (r);
        continue;
      }

      // hadMember
      //
      if (n.name () == "hadMember" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< hadMember_type > r (
          hadMember_traits::create (i, f, this));

        this->hadMember_.push_back (r);
        continue;
      }

      // plan
      //
      if (n.name () == "plan" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< plan_type > r (
          plan_traits::create (i, f, this));

        this->plan_.push_back (r);
        continue;
      }

      // other
      //
      if (n.name () == "other" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< other_type > r (
          other_traits::create (i, f, this));

        this->other_.push_back (r);
        continue;
      }

      // internalElement
      //
      if (n.name () == "internalElement" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< internalElement_type > r (
          internalElement_traits::create (i, f, this));

        this->internalElement_.push_back (r);
        continue;
      }

      // bundleContent
      //
      if (n.name () == "bundleContent" && n.namespace_ () == "http://www.w3.org/ns/prov#")
      {
        ::std::auto_ptr< bundleContent_type > r (
          bundleContent_traits::create (i, f, this));

        this->bundleContent_.push_back (r);
        continue;
      }

      break;
    }
  }

  Document* Document::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Document (*this, f, c);
  }

  Document& Document::
  operator= (const Document& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->entity_ = x.entity_;
      this->activity_ = x.activity_;
      this->wasGeneratedBy_ = x.wasGeneratedBy_;
      this->used_ = x.used_;
      this->wasInformedBy_ = x.wasInformedBy_;
      this->wasStartedBy_ = x.wasStartedBy_;
      this->wasEndedBy_ = x.wasEndedBy_;
      this->wasInvalidatedBy_ = x.wasInvalidatedBy_;
      this->wasDerivedFrom_ = x.wasDerivedFrom_;
      this->wasRevisionOf_ = x.wasRevisionOf_;
      this->wasQuotedFrom_ = x.wasQuotedFrom_;
      this->hadPrimarySource_ = x.hadPrimarySource_;
      this->agent_ = x.agent_;
      this->person_ = x.person_;
      this->organization_ = x.organization_;
      this->softwareAgent_ = x.softwareAgent_;
      this->wasAttributedTo_ = x.wasAttributedTo_;
      this->wasAssociatedWith_ = x.wasAssociatedWith_;
      this->actedOnBehalfOf_ = x.actedOnBehalfOf_;
      this->wasInfluencedBy_ = x.wasInfluencedBy_;
      this->bundle_ = x.bundle_;
      this->specializationOf_ = x.specializationOf_;
      this->alternateOf_ = x.alternateOf_;
      this->collection_ = x.collection_;
      this->emptyCollection_ = x.emptyCollection_;
      this->hadMember_ = x.hadMember_;
      this->plan_ = x.plan_;
      this->other_ = x.other_;
      this->internalElement_ = x.internalElement_;
      this->bundleContent_ = x.bundleContent_;
    }

    return *this;
  }

  Document::
  ~Document ()
  {
  }

  // Other
  //

  Other::
  Other ()
  : ::xml_schema::type ()
  {
  }

  Other::
  Other (const Other& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  Other::
  Other (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Other::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      break;
    }
  }

  Other* Other::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Other (*this, f, c);
  }

  Other::
  ~Other ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prov
{
  ::std::auto_ptr< ::prov::InternationalizedString >
  label (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::InternationalizedString > (
      ::prov::label (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::InternationalizedString > (
      ::prov::label (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::InternationalizedString > (
      ::prov::label (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::label (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::label (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::label (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::label (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::label (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::label (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::InternationalizedString > (
      ::prov::label (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::InternationalizedString > (
      ::prov::label (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::InternationalizedString > (
      ::prov::label (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::InternationalizedString > (
        ::prov::label (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "label" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::InternationalizedString > r (
        ::xsd::cxx::tree::traits< ::prov::InternationalizedString, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "label",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::InternationalizedString >
  label (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "label" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::InternationalizedString > r (
        ::xsd::cxx::tree::traits< ::prov::InternationalizedString, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "label",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::role (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::role (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::role (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::role (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::role (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::role (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::role (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::role (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::role (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::role (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::role (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::role (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (const ::xercesc::DOMDocument& doc,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::xml_schema::simple_type > (
        ::prov::role (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "role" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::xml_schema::simple_type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::simple_type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "role",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  role (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "role" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::xml_schema::simple_type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::simple_type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "role",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::type (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::type (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::type (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::type (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::type (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::type (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::type (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::type (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::type (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::type (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::type (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::type (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (const ::xercesc::DOMDocument& doc,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::xml_schema::simple_type > (
        ::prov::type (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "type" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::xml_schema::simple_type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::simple_type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "type",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  type (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "type" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::xml_schema::simple_type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::simple_type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "type",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::location (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::location (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::location (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::location (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::location (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::location (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::location (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::location (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::location (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::location (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::location (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::location (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::xml_schema::simple_type > (
        ::prov::location (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "location" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::xml_schema::simple_type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::simple_type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "location",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  location (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "location" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::xml_schema::simple_type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::simple_type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "location",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::value (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::value (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::value (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::value (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::value (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::value (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::value (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::value (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::simple_type > (
      ::prov::value (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::xml_schema::simple_type > (
        ::prov::value (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "value" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::xml_schema::simple_type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::simple_type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "value",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::xml_schema::simple_type >
  value (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "value" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::xml_schema::simple_type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::simple_type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "value",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Entity > (
      ::prov::entity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Entity > (
      ::prov::entity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Entity > (
      ::prov::entity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::entity (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::entity (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::entity (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::entity (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::entity (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::entity (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Entity > (
      ::prov::entity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Entity > (
      ::prov::entity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Entity > (
      ::prov::entity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Entity > (
        ::prov::entity (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "entity" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Entity > r (
        ::xsd::cxx::tree::traits< ::prov::Entity, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "entity",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Entity >
  entity (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "entity" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Entity > r (
        ::xsd::cxx::tree::traits< ::prov::Entity, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "entity",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Activity > (
      ::prov::activity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Activity > (
      ::prov::activity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Activity > (
      ::prov::activity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::activity (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::activity (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::activity (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::activity (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::activity (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::activity (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Activity > (
      ::prov::activity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Activity > (
      ::prov::activity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Activity > (
      ::prov::activity (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Activity > (
        ::prov::activity (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "activity" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Activity > r (
        ::xsd::cxx::tree::traits< ::prov::Activity, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "activity",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Activity >
  activity (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "activity" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Activity > r (
        ::xsd::cxx::tree::traits< ::prov::Activity, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "activity",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Generation > (
      ::prov::wasGeneratedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Generation > (
      ::prov::wasGeneratedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Generation > (
      ::prov::wasGeneratedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasGeneratedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasGeneratedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasGeneratedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasGeneratedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasGeneratedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasGeneratedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Generation > (
      ::prov::wasGeneratedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Generation > (
      ::prov::wasGeneratedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Generation > (
      ::prov::wasGeneratedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Generation > (
        ::prov::wasGeneratedBy (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasGeneratedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Generation > r (
        ::xsd::cxx::tree::traits< ::prov::Generation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasGeneratedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Generation >
  wasGeneratedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasGeneratedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Generation > r (
        ::xsd::cxx::tree::traits< ::prov::Generation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasGeneratedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Usage >
  used (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Usage > (
      ::prov::used (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Usage >
  used (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Usage > (
      ::prov::used (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Usage >
  used (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Usage > (
      ::prov::used (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::used (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::used (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::used (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::used (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::used (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Usage >
  used (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::used (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Usage >
  used (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Usage > (
      ::prov::used (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Usage >
  used (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Usage > (
      ::prov::used (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Usage >
  used (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Usage > (
      ::prov::used (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Usage >
  used (const ::xercesc::DOMDocument& doc,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Usage > (
        ::prov::used (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "used" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Usage > r (
        ::xsd::cxx::tree::traits< ::prov::Usage, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "used",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Usage >
  used (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "used" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Usage > r (
        ::xsd::cxx::tree::traits< ::prov::Usage, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "used",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Communication > (
      ::prov::wasInformedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Communication > (
      ::prov::wasInformedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Communication > (
      ::prov::wasInformedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasInformedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasInformedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasInformedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasInformedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasInformedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasInformedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Communication > (
      ::prov::wasInformedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Communication > (
      ::prov::wasInformedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Communication > (
      ::prov::wasInformedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Communication > (
        ::prov::wasInformedBy (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasInformedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Communication > r (
        ::xsd::cxx::tree::traits< ::prov::Communication, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasInformedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Communication >
  wasInformedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasInformedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Communication > r (
        ::xsd::cxx::tree::traits< ::prov::Communication, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasInformedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Start > (
      ::prov::wasStartedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Start > (
      ::prov::wasStartedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Start > (
      ::prov::wasStartedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasStartedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasStartedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasStartedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasStartedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasStartedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasStartedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Start > (
      ::prov::wasStartedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Start > (
      ::prov::wasStartedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Start > (
      ::prov::wasStartedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Start > (
        ::prov::wasStartedBy (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasStartedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Start > r (
        ::xsd::cxx::tree::traits< ::prov::Start, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasStartedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Start >
  wasStartedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasStartedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Start > r (
        ::xsd::cxx::tree::traits< ::prov::Start, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasStartedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::End > (
      ::prov::wasEndedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::End > (
      ::prov::wasEndedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::End > (
      ::prov::wasEndedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasEndedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasEndedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasEndedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasEndedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasEndedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasEndedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::End > (
      ::prov::wasEndedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::End > (
      ::prov::wasEndedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::End > (
      ::prov::wasEndedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::End > (
        ::prov::wasEndedBy (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasEndedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::End > r (
        ::xsd::cxx::tree::traits< ::prov::End, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasEndedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::End >
  wasEndedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasEndedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::End > r (
        ::xsd::cxx::tree::traits< ::prov::End, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasEndedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Invalidation > (
      ::prov::wasInvalidatedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Invalidation > (
      ::prov::wasInvalidatedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Invalidation > (
      ::prov::wasInvalidatedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasInvalidatedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasInvalidatedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasInvalidatedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasInvalidatedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasInvalidatedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasInvalidatedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Invalidation > (
      ::prov::wasInvalidatedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Invalidation > (
      ::prov::wasInvalidatedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Invalidation > (
      ::prov::wasInvalidatedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Invalidation > (
        ::prov::wasInvalidatedBy (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasInvalidatedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Invalidation > r (
        ::xsd::cxx::tree::traits< ::prov::Invalidation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasInvalidatedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Invalidation >
  wasInvalidatedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasInvalidatedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Invalidation > r (
        ::xsd::cxx::tree::traits< ::prov::Invalidation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasInvalidatedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Derivation > (
      ::prov::wasDerivedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Derivation > (
      ::prov::wasDerivedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Derivation > (
      ::prov::wasDerivedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasDerivedFrom (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasDerivedFrom (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasDerivedFrom (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasDerivedFrom (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasDerivedFrom (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasDerivedFrom (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Derivation > (
      ::prov::wasDerivedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Derivation > (
      ::prov::wasDerivedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Derivation > (
      ::prov::wasDerivedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Derivation > (
        ::prov::wasDerivedFrom (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasDerivedFrom" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Derivation > r (
        ::xsd::cxx::tree::traits< ::prov::Derivation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasDerivedFrom",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Derivation >
  wasDerivedFrom (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasDerivedFrom" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Derivation > r (
        ::xsd::cxx::tree::traits< ::prov::Derivation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasDerivedFrom",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Revision > (
      ::prov::wasRevisionOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Revision > (
      ::prov::wasRevisionOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Revision > (
      ::prov::wasRevisionOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasRevisionOf (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasRevisionOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasRevisionOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasRevisionOf (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasRevisionOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasRevisionOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Revision > (
      ::prov::wasRevisionOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Revision > (
      ::prov::wasRevisionOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Revision > (
      ::prov::wasRevisionOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Revision > (
        ::prov::wasRevisionOf (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasRevisionOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Revision > r (
        ::xsd::cxx::tree::traits< ::prov::Revision, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasRevisionOf",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Revision >
  wasRevisionOf (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasRevisionOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Revision > r (
        ::xsd::cxx::tree::traits< ::prov::Revision, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasRevisionOf",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Quotation > (
      ::prov::wasQuotedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Quotation > (
      ::prov::wasQuotedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Quotation > (
      ::prov::wasQuotedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasQuotedFrom (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasQuotedFrom (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasQuotedFrom (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasQuotedFrom (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasQuotedFrom (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasQuotedFrom (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Quotation > (
      ::prov::wasQuotedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Quotation > (
      ::prov::wasQuotedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Quotation > (
      ::prov::wasQuotedFrom (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Quotation > (
        ::prov::wasQuotedFrom (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasQuotedFrom" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Quotation > r (
        ::xsd::cxx::tree::traits< ::prov::Quotation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasQuotedFrom",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Quotation >
  wasQuotedFrom (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasQuotedFrom" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Quotation > r (
        ::xsd::cxx::tree::traits< ::prov::Quotation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasQuotedFrom",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::PrimarySource > (
      ::prov::hadPrimarySource (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::PrimarySource > (
      ::prov::hadPrimarySource (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::PrimarySource > (
      ::prov::hadPrimarySource (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::hadPrimarySource (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::hadPrimarySource (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::hadPrimarySource (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::hadPrimarySource (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::hadPrimarySource (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::hadPrimarySource (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::PrimarySource > (
      ::prov::hadPrimarySource (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::PrimarySource > (
      ::prov::hadPrimarySource (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::PrimarySource > (
      ::prov::hadPrimarySource (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::PrimarySource > (
        ::prov::hadPrimarySource (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "hadPrimarySource" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::PrimarySource > r (
        ::xsd::cxx::tree::traits< ::prov::PrimarySource, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "hadPrimarySource",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::PrimarySource >
  hadPrimarySource (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "hadPrimarySource" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::PrimarySource > r (
        ::xsd::cxx::tree::traits< ::prov::PrimarySource, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "hadPrimarySource",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Agent > (
      ::prov::agent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Agent > (
      ::prov::agent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Agent > (
      ::prov::agent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::agent (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::agent (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::agent (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::agent (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::agent (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::agent (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Agent > (
      ::prov::agent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Agent > (
      ::prov::agent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Agent > (
      ::prov::agent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Agent > (
        ::prov::agent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "agent" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Agent > r (
        ::xsd::cxx::tree::traits< ::prov::Agent, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "agent",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Agent >
  agent (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "agent" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Agent > r (
        ::xsd::cxx::tree::traits< ::prov::Agent, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "agent",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Person >
  person (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Person > (
      ::prov::person (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Person >
  person (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Person > (
      ::prov::person (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Person >
  person (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Person > (
      ::prov::person (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::person (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::person (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::person (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::person (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::person (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Person >
  person (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::person (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Person >
  person (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Person > (
      ::prov::person (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Person >
  person (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Person > (
      ::prov::person (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Person >
  person (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Person > (
      ::prov::person (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Person >
  person (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Person > (
        ::prov::person (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "person" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Person > r (
        ::xsd::cxx::tree::traits< ::prov::Person, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "person",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Person >
  person (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "person" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Person > r (
        ::xsd::cxx::tree::traits< ::prov::Person, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "person",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Organization > (
      ::prov::organization (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Organization > (
      ::prov::organization (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Organization > (
      ::prov::organization (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::organization (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::organization (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::organization (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::organization (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::organization (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::organization (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Organization > (
      ::prov::organization (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Organization > (
      ::prov::organization (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Organization > (
      ::prov::organization (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Organization > (
        ::prov::organization (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "organization" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Organization > r (
        ::xsd::cxx::tree::traits< ::prov::Organization, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "organization",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Organization >
  organization (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "organization" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Organization > r (
        ::xsd::cxx::tree::traits< ::prov::Organization, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "organization",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::SoftwareAgent > (
      ::prov::softwareAgent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::SoftwareAgent > (
      ::prov::softwareAgent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::SoftwareAgent > (
      ::prov::softwareAgent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::softwareAgent (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::softwareAgent (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::softwareAgent (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::softwareAgent (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::softwareAgent (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::softwareAgent (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::SoftwareAgent > (
      ::prov::softwareAgent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::SoftwareAgent > (
      ::prov::softwareAgent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::SoftwareAgent > (
      ::prov::softwareAgent (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::SoftwareAgent > (
        ::prov::softwareAgent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "softwareAgent" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::SoftwareAgent > r (
        ::xsd::cxx::tree::traits< ::prov::SoftwareAgent, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "softwareAgent",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::SoftwareAgent >
  softwareAgent (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "softwareAgent" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::SoftwareAgent > r (
        ::xsd::cxx::tree::traits< ::prov::SoftwareAgent, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "softwareAgent",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Attribution > (
      ::prov::wasAttributedTo (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Attribution > (
      ::prov::wasAttributedTo (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Attribution > (
      ::prov::wasAttributedTo (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasAttributedTo (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasAttributedTo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasAttributedTo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasAttributedTo (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasAttributedTo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasAttributedTo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Attribution > (
      ::prov::wasAttributedTo (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Attribution > (
      ::prov::wasAttributedTo (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Attribution > (
      ::prov::wasAttributedTo (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Attribution > (
        ::prov::wasAttributedTo (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasAttributedTo" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Attribution > r (
        ::xsd::cxx::tree::traits< ::prov::Attribution, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasAttributedTo",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Attribution >
  wasAttributedTo (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasAttributedTo" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Attribution > r (
        ::xsd::cxx::tree::traits< ::prov::Attribution, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasAttributedTo",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Association > (
      ::prov::wasAssociatedWith (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Association > (
      ::prov::wasAssociatedWith (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Association > (
      ::prov::wasAssociatedWith (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasAssociatedWith (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasAssociatedWith (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasAssociatedWith (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasAssociatedWith (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasAssociatedWith (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasAssociatedWith (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Association > (
      ::prov::wasAssociatedWith (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Association > (
      ::prov::wasAssociatedWith (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Association > (
      ::prov::wasAssociatedWith (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Association > (
        ::prov::wasAssociatedWith (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasAssociatedWith" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Association > r (
        ::xsd::cxx::tree::traits< ::prov::Association, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasAssociatedWith",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Association >
  wasAssociatedWith (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasAssociatedWith" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Association > r (
        ::xsd::cxx::tree::traits< ::prov::Association, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasAssociatedWith",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Delegation > (
      ::prov::actedOnBehalfOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Delegation > (
      ::prov::actedOnBehalfOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Delegation > (
      ::prov::actedOnBehalfOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::actedOnBehalfOf (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::actedOnBehalfOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::actedOnBehalfOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::actedOnBehalfOf (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::actedOnBehalfOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::actedOnBehalfOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Delegation > (
      ::prov::actedOnBehalfOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Delegation > (
      ::prov::actedOnBehalfOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Delegation > (
      ::prov::actedOnBehalfOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Delegation > (
        ::prov::actedOnBehalfOf (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "actedOnBehalfOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Delegation > r (
        ::xsd::cxx::tree::traits< ::prov::Delegation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "actedOnBehalfOf",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Delegation >
  actedOnBehalfOf (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "actedOnBehalfOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Delegation > r (
        ::xsd::cxx::tree::traits< ::prov::Delegation, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "actedOnBehalfOf",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Influence > (
      ::prov::wasInfluencedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Influence > (
      ::prov::wasInfluencedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Influence > (
      ::prov::wasInfluencedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasInfluencedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasInfluencedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::wasInfluencedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasInfluencedBy (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasInfluencedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::wasInfluencedBy (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Influence > (
      ::prov::wasInfluencedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Influence > (
      ::prov::wasInfluencedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Influence > (
      ::prov::wasInfluencedBy (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Influence > (
        ::prov::wasInfluencedBy (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasInfluencedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Influence > r (
        ::xsd::cxx::tree::traits< ::prov::Influence, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasInfluencedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Influence >
  wasInfluencedBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "wasInfluencedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Influence > r (
        ::xsd::cxx::tree::traits< ::prov::Influence, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "wasInfluencedBy",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Bundle > (
      ::prov::bundle (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Bundle > (
      ::prov::bundle (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Bundle > (
      ::prov::bundle (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::bundle (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::bundle (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::bundle (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::bundle (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::bundle (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::bundle (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Bundle > (
      ::prov::bundle (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Bundle > (
      ::prov::bundle (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Bundle > (
      ::prov::bundle (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Bundle > (
        ::prov::bundle (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "bundle" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Bundle > r (
        ::xsd::cxx::tree::traits< ::prov::Bundle, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "bundle",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Bundle >
  bundle (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "bundle" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Bundle > r (
        ::xsd::cxx::tree::traits< ::prov::Bundle, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "bundle",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Specialization > (
      ::prov::specializationOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Specialization > (
      ::prov::specializationOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Specialization > (
      ::prov::specializationOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::specializationOf (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::specializationOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::specializationOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::specializationOf (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::specializationOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::specializationOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Specialization > (
      ::prov::specializationOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Specialization > (
      ::prov::specializationOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Specialization > (
      ::prov::specializationOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Specialization > (
        ::prov::specializationOf (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "specializationOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Specialization > r (
        ::xsd::cxx::tree::traits< ::prov::Specialization, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "specializationOf",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Specialization >
  specializationOf (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "specializationOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Specialization > r (
        ::xsd::cxx::tree::traits< ::prov::Specialization, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "specializationOf",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Alternate > (
      ::prov::alternateOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Alternate > (
      ::prov::alternateOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Alternate > (
      ::prov::alternateOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::alternateOf (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::alternateOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::alternateOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::alternateOf (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::alternateOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::alternateOf (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Alternate > (
      ::prov::alternateOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Alternate > (
      ::prov::alternateOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Alternate > (
      ::prov::alternateOf (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Alternate > (
        ::prov::alternateOf (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "alternateOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Alternate > r (
        ::xsd::cxx::tree::traits< ::prov::Alternate, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "alternateOf",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Alternate >
  alternateOf (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "alternateOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Alternate > r (
        ::xsd::cxx::tree::traits< ::prov::Alternate, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "alternateOf",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Membership > (
      ::prov::hadMember (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Membership > (
      ::prov::hadMember (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Membership > (
      ::prov::hadMember (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::hadMember (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::hadMember (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::hadMember (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::hadMember (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::hadMember (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::hadMember (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Membership > (
      ::prov::hadMember (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Membership > (
      ::prov::hadMember (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Membership > (
      ::prov::hadMember (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Membership > (
        ::prov::hadMember (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "hadMember" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Membership > r (
        ::xsd::cxx::tree::traits< ::prov::Membership, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "hadMember",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Membership >
  hadMember (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "hadMember" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Membership > r (
        ::xsd::cxx::tree::traits< ::prov::Membership, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "hadMember",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Collection > (
      ::prov::collection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Collection > (
      ::prov::collection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Collection > (
      ::prov::collection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::collection (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::collection (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::collection (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::collection (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::collection (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::collection (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Collection > (
      ::prov::collection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Collection > (
      ::prov::collection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Collection > (
      ::prov::collection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Collection > (
        ::prov::collection (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "collection" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Collection > r (
        ::xsd::cxx::tree::traits< ::prov::Collection, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "collection",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Collection >
  collection (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "collection" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Collection > r (
        ::xsd::cxx::tree::traits< ::prov::Collection, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "collection",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::EmptyCollection > (
      ::prov::emptyCollection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::EmptyCollection > (
      ::prov::emptyCollection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::EmptyCollection > (
      ::prov::emptyCollection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::emptyCollection (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::emptyCollection (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::emptyCollection (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::emptyCollection (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::emptyCollection (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::emptyCollection (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::EmptyCollection > (
      ::prov::emptyCollection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::EmptyCollection > (
      ::prov::emptyCollection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::EmptyCollection > (
      ::prov::emptyCollection (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::EmptyCollection > (
        ::prov::emptyCollection (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "emptyCollection" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::EmptyCollection > r (
        ::xsd::cxx::tree::traits< ::prov::EmptyCollection, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "emptyCollection",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::EmptyCollection >
  emptyCollection (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "emptyCollection" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::EmptyCollection > r (
        ::xsd::cxx::tree::traits< ::prov::EmptyCollection, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "emptyCollection",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Plan > (
      ::prov::plan (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Plan > (
      ::prov::plan (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Plan > (
      ::prov::plan (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::plan (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::plan (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::plan (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::plan (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::plan (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::plan (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Plan > (
      ::prov::plan (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Plan > (
      ::prov::plan (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Plan > (
      ::prov::plan (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (const ::xercesc::DOMDocument& doc,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Plan > (
        ::prov::plan (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "plan" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Plan > r (
        ::xsd::cxx::tree::traits< ::prov::Plan, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "plan",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Plan >
  plan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "plan" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Plan > r (
        ::xsd::cxx::tree::traits< ::prov::Plan, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "plan",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Document >
  document (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Document > (
      ::prov::document (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Document >
  document (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Document > (
      ::prov::document (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Document >
  document (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Document > (
      ::prov::document (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::document (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::document (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::document (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::document (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::document (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Document >
  document (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::document (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Document >
  document (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Document > (
      ::prov::document (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Document >
  document (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Document > (
      ::prov::document (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Document >
  document (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Document > (
      ::prov::document (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Document >
  document (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Document > (
        ::prov::document (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "document" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Document > r (
        ::xsd::cxx::tree::traits< ::prov::Document, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "document",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Document >
  document (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "document" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Document > r (
        ::xsd::cxx::tree::traits< ::prov::Document, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "document",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::xml_schema::type > (
      ::prov::internalElement (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::type > (
      ::prov::internalElement (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::type > (
      ::prov::internalElement (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::internalElement (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::internalElement (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::internalElement (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::internalElement (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::internalElement (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::internalElement (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::xml_schema::type > (
      ::prov::internalElement (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::type > (
      ::prov::internalElement (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::xml_schema::type > (
      ::prov::internalElement (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::xml_schema::type > (
        ::prov::internalElement (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "internalElement" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::xml_schema::type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "internalElement",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::xml_schema::type >
  internalElement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "internalElement" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::xml_schema::type > r (
        ::xsd::cxx::tree::traits< ::xml_schema::type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "internalElement",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Other >
  other (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Other > (
      ::prov::other (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Other >
  other (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Other > (
      ::prov::other (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Other >
  other (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Other > (
      ::prov::other (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::other (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::other (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::prov::other (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::other (isrc, f, p);
  }

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::other (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Other >
  other (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::prov::other (isrc, h, f, p);
  }

  ::std::auto_ptr< ::prov::Other >
  other (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::prov::Other > (
      ::prov::other (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Other >
  other (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Other > (
      ::prov::other (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Other >
  other (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::prov::Other > (
      ::prov::other (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::prov::Other >
  other (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::prov::Other > (
        ::prov::other (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "other" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Other > r (
        ::xsd::cxx::tree::traits< ::prov::Other, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "other",
      "http://www.w3.org/ns/prov#");
  }

  ::std::auto_ptr< ::prov::Other >
  other (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "other" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      ::std::auto_ptr< ::prov::Other > r (
        ::xsd::cxx::tree::traits< ::prov::Other, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "other",
      "http://www.w3.org/ns/prov#");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prov
{
  void
  operator<< (::xercesc::DOMElement& e, const Entity& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // label
    //
    for (Entity::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // location
    //
    for (Entity::location_const_iterator
         b (i.location ().begin ()), n (i.location ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "location",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Entity::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "value",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.value ();
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Activity& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // startTime
    //
    if (i.startTime ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "startTime",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.startTime ();
    }

    // endTime
    //
    if (i.endTime ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "endTime",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.endTime ();
    }

    // label
    //
    for (Activity::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // location
    //
    for (Activity::location_const_iterator
         b (i.location ().begin ()), n (i.location ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "location",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Activity::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Generation& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // entity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.entity ();
    }

    // activity
    //
    if (i.activity ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "activity",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.activity ();
    }

    // time
    //
    if (i.time ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "time",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.time ();
    }

    // label
    //
    for (Generation::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // location
    //
    for (Generation::location_const_iterator
         b (i.location ().begin ()), n (i.location ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "location",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // role
    //
    for (Generation::role_const_iterator
         b (i.role ().begin ()), n (i.role ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "role",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Generation::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Usage& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // activity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "activity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.activity ();
    }

    // entity
    //
    if (i.entity ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entity",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.entity ();
    }

    // time
    //
    if (i.time ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "time",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.time ();
    }

    // label
    //
    for (Usage::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // location
    //
    for (Usage::location_const_iterator
         b (i.location ().begin ()), n (i.location ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "location",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // role
    //
    for (Usage::role_const_iterator
         b (i.role ().begin ()), n (i.role ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "role",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Usage::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Communication& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // informed
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "informed",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.informed ();
    }

    // informant
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "informant",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.informant ();
    }

    // label
    //
    for (Communication::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Communication::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Start& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // activity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "activity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.activity ();
    }

    // trigger
    //
    if (i.trigger ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "trigger",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.trigger ();
    }

    // starter
    //
    if (i.starter ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "starter",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.starter ();
    }

    // time
    //
    if (i.time ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "time",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.time ();
    }

    // label
    //
    for (Start::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // location
    //
    for (Start::location_const_iterator
         b (i.location ().begin ()), n (i.location ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "location",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // role
    //
    for (Start::role_const_iterator
         b (i.role ().begin ()), n (i.role ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "role",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Start::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const End& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // activity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "activity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.activity ();
    }

    // trigger
    //
    if (i.trigger ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "trigger",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.trigger ();
    }

    // ender
    //
    if (i.ender ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ender",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.ender ();
    }

    // time
    //
    if (i.time ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "time",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.time ();
    }

    // label
    //
    for (End::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // location
    //
    for (End::location_const_iterator
         b (i.location ().begin ()), n (i.location ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "location",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // role
    //
    for (End::role_const_iterator
         b (i.role ().begin ()), n (i.role ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "role",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (End::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Invalidation& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // entity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.entity ();
    }

    // activity
    //
    if (i.activity ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "activity",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.activity ();
    }

    // time
    //
    if (i.time ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "time",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.time ();
    }

    // label
    //
    for (Invalidation::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // location
    //
    for (Invalidation::location_const_iterator
         b (i.location ().begin ()), n (i.location ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "location",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // role
    //
    for (Invalidation::role_const_iterator
         b (i.role ().begin ()), n (i.role ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "role",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Invalidation::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Derivation& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // generatedEntity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "generatedEntity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.generatedEntity ();
    }

    // usedEntity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "usedEntity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.usedEntity ();
    }

    // activity
    //
    if (i.activity ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "activity",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.activity ();
    }

    // generation
    //
    if (i.generation ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "generation",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.generation ();
    }

    // usage
    //
    if (i.usage ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "usage",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.usage ();
    }

    // label
    //
    for (Derivation::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Derivation::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Revision& i)
  {
    e << static_cast< const ::prov::Derivation& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Quotation& i)
  {
    e << static_cast< const ::prov::Derivation& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const PrimarySource& i)
  {
    e << static_cast< const ::prov::Derivation& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Agent& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // label
    //
    for (Agent::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // location
    //
    for (Agent::location_const_iterator
         b (i.location ().begin ()), n (i.location ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "location",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Agent::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Person& i)
  {
    e << static_cast< const ::prov::Agent& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Organization& i)
  {
    e << static_cast< const ::prov::Agent& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const SoftwareAgent& i)
  {
    e << static_cast< const ::prov::Agent& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Attribution& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // entity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.entity ();
    }

    // agent
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "agent",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.agent ();
    }

    // label
    //
    for (Attribution::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Attribution::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Association& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // activity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "activity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.activity ();
    }

    // agent
    //
    if (i.agent ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "agent",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.agent ();
    }

    // plan
    //
    if (i.plan ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "plan",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.plan ();
    }

    // label
    //
    for (Association::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // role
    //
    for (Association::role_const_iterator
         b (i.role ().begin ()), n (i.role ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "role",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Association::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Delegation& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // delegate
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "delegate",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.delegate ();
    }

    // responsible
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "responsible",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.responsible ();
    }

    // activity
    //
    if (i.activity ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "activity",
          "http://www.w3.org/ns/prov#",
          e));

      s << *i.activity ();
    }

    // label
    //
    for (Delegation::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Delegation::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Influence& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // influencee
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "influencee",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.influencee ();
    }

    // influencer
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "influencer",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.influencer ();
    }

    // label
    //
    for (Influence::label_const_iterator
         b (i.label ().begin ()), n (i.label ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // type
    //
    for (Influence::type_const_iterator
         b (i.type ().begin ()), n (i.type ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Bundle& i)
  {
    e << static_cast< const ::prov::Entity& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const BundleConstructor& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // entity
    //
    for (BundleConstructor::entity_const_iterator
         b (i.entity ().begin ()), n (i.entity ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entity",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // activity
    //
    for (BundleConstructor::activity_const_iterator
         b (i.activity ().begin ()), n (i.activity ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "activity",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasGeneratedBy
    //
    for (BundleConstructor::wasGeneratedBy_const_iterator
         b (i.wasGeneratedBy ().begin ()), n (i.wasGeneratedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasGeneratedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // used
    //
    for (BundleConstructor::used_const_iterator
         b (i.used ().begin ()), n (i.used ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "used",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasInformedBy
    //
    for (BundleConstructor::wasInformedBy_const_iterator
         b (i.wasInformedBy ().begin ()), n (i.wasInformedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasInformedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasStartedBy
    //
    for (BundleConstructor::wasStartedBy_const_iterator
         b (i.wasStartedBy ().begin ()), n (i.wasStartedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasStartedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasEndedBy
    //
    for (BundleConstructor::wasEndedBy_const_iterator
         b (i.wasEndedBy ().begin ()), n (i.wasEndedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasEndedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasInvalidatedBy
    //
    for (BundleConstructor::wasInvalidatedBy_const_iterator
         b (i.wasInvalidatedBy ().begin ()), n (i.wasInvalidatedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasInvalidatedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasDerivedFrom
    //
    for (BundleConstructor::wasDerivedFrom_const_iterator
         b (i.wasDerivedFrom ().begin ()), n (i.wasDerivedFrom ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasDerivedFrom",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasRevisionOf
    //
    for (BundleConstructor::wasRevisionOf_const_iterator
         b (i.wasRevisionOf ().begin ()), n (i.wasRevisionOf ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasRevisionOf",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasQuotedFrom
    //
    for (BundleConstructor::wasQuotedFrom_const_iterator
         b (i.wasQuotedFrom ().begin ()), n (i.wasQuotedFrom ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasQuotedFrom",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // hadPrimarySource
    //
    for (BundleConstructor::hadPrimarySource_const_iterator
         b (i.hadPrimarySource ().begin ()), n (i.hadPrimarySource ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hadPrimarySource",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // agent
    //
    for (BundleConstructor::agent_const_iterator
         b (i.agent ().begin ()), n (i.agent ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "agent",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // person
    //
    for (BundleConstructor::person_const_iterator
         b (i.person ().begin ()), n (i.person ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "person",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // organization
    //
    for (BundleConstructor::organization_const_iterator
         b (i.organization ().begin ()), n (i.organization ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "organization",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // softwareAgent
    //
    for (BundleConstructor::softwareAgent_const_iterator
         b (i.softwareAgent ().begin ()), n (i.softwareAgent ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "softwareAgent",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasAttributedTo
    //
    for (BundleConstructor::wasAttributedTo_const_iterator
         b (i.wasAttributedTo ().begin ()), n (i.wasAttributedTo ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasAttributedTo",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasAssociatedWith
    //
    for (BundleConstructor::wasAssociatedWith_const_iterator
         b (i.wasAssociatedWith ().begin ()), n (i.wasAssociatedWith ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasAssociatedWith",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // actedOnBehalfOf
    //
    for (BundleConstructor::actedOnBehalfOf_const_iterator
         b (i.actedOnBehalfOf ().begin ()), n (i.actedOnBehalfOf ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "actedOnBehalfOf",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasInfluencedBy
    //
    for (BundleConstructor::wasInfluencedBy_const_iterator
         b (i.wasInfluencedBy ().begin ()), n (i.wasInfluencedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasInfluencedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // bundle
    //
    for (BundleConstructor::bundle_const_iterator
         b (i.bundle ().begin ()), n (i.bundle ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "bundle",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // specializationOf
    //
    for (BundleConstructor::specializationOf_const_iterator
         b (i.specializationOf ().begin ()), n (i.specializationOf ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "specializationOf",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // alternateOf
    //
    for (BundleConstructor::alternateOf_const_iterator
         b (i.alternateOf ().begin ()), n (i.alternateOf ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "alternateOf",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // collection
    //
    for (BundleConstructor::collection_const_iterator
         b (i.collection ().begin ()), n (i.collection ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "collection",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // emptyCollection
    //
    for (BundleConstructor::emptyCollection_const_iterator
         b (i.emptyCollection ().begin ()), n (i.emptyCollection ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "emptyCollection",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // hadMember
    //
    for (BundleConstructor::hadMember_const_iterator
         b (i.hadMember ().begin ()), n (i.hadMember ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hadMember",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // plan
    //
    for (BundleConstructor::plan_const_iterator
         b (i.plan ().begin ()), n (i.plan ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "plan",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // other
    //
    for (BundleConstructor::other_const_iterator
         b (i.other ().begin ()), n (i.other ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "other",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // internalElement
    //
    for (BundleConstructor::internalElement_const_iterator
         b (i.internalElement ().begin ()), n (i.internalElement ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "internalElement",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          "http://www.w3.org/ns/prov#",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Specialization& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // specificEntity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "specificEntity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.specificEntity ();
    }

    // generalEntity
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "generalEntity",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.generalEntity ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Alternate& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // alternate1
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "alternate1",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.alternate1 ();
    }

    // alternate2
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "alternate2",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.alternate2 ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Collection& i)
  {
    e << static_cast< const ::prov::Entity& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const EmptyCollection& i)
  {
    e << static_cast< const ::prov::Collection& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Membership& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // collection
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "collection",
          "http://www.w3.org/ns/prov#",
          e));

      s << i.collection ();
    }

    // entity
    //
    for (Membership::entity_const_iterator
         b (i.entity ().begin ()), n (i.entity ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entity",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Plan& i)
  {
    e << static_cast< const ::prov::Entity& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const InternationalizedString& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);

    // lang
    //
    if (i.lang ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "lang",
          "http://www.w3.org/XML/1998/namespace",
          e));

      a << *i.lang ();
    }
  }

  void
  label (::std::ostream& o,
         const ::prov::InternationalizedString& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::label (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  label (::std::ostream& o,
         const ::prov::InternationalizedString& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::label (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  label (::std::ostream& o,
         const ::prov::InternationalizedString& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::label (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  label (::xercesc::XMLFormatTarget& t,
         const ::prov::InternationalizedString& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::label (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  label (::xercesc::XMLFormatTarget& t,
         const ::prov::InternationalizedString& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::label (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  label (::xercesc::XMLFormatTarget& t,
         const ::prov::InternationalizedString& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::label (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  label (::xercesc::DOMDocument& d,
         const ::prov::InternationalizedString& s,
         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "label" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "label",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  label (const ::prov::InternationalizedString& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "label",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::label (*d, s, f);
    return d;
  }

  void
  role (::std::ostream& o,
        const ::xml_schema::simple_type& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::role (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  role (::std::ostream& o,
        const ::xml_schema::simple_type& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::role (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  role (::std::ostream& o,
        const ::xml_schema::simple_type& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::role (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  role (::xercesc::XMLFormatTarget& t,
        const ::xml_schema::simple_type& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::role (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  role (::xercesc::XMLFormatTarget& t,
        const ::xml_schema::simple_type& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::role (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  role (::xercesc::XMLFormatTarget& t,
        const ::xml_schema::simple_type& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::role (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  role (::xercesc::DOMDocument& d,
        const ::xml_schema::simple_type& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "role" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "role",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  role (const ::xml_schema::simple_type& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "role",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::role (*d, s, f);
    return d;
  }

  void
  type (::std::ostream& o,
        const ::xml_schema::simple_type& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::type (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  type (::std::ostream& o,
        const ::xml_schema::simple_type& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::type (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  type (::std::ostream& o,
        const ::xml_schema::simple_type& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::type (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  type (::xercesc::XMLFormatTarget& t,
        const ::xml_schema::simple_type& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::type (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  type (::xercesc::XMLFormatTarget& t,
        const ::xml_schema::simple_type& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::type (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  type (::xercesc::XMLFormatTarget& t,
        const ::xml_schema::simple_type& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::type (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  type (::xercesc::DOMDocument& d,
        const ::xml_schema::simple_type& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "type" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "type",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  type (const ::xml_schema::simple_type& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "type",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::type (*d, s, f);
    return d;
  }

  void
  location (::std::ostream& o,
            const ::xml_schema::simple_type& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::location (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  location (::std::ostream& o,
            const ::xml_schema::simple_type& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::location (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  location (::std::ostream& o,
            const ::xml_schema::simple_type& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::location (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  location (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::simple_type& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::location (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  location (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::simple_type& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::location (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  location (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::simple_type& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::location (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  location (::xercesc::DOMDocument& d,
            const ::xml_schema::simple_type& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "location" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "location",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  location (const ::xml_schema::simple_type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "location",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::location (*d, s, f);
    return d;
  }

  void
  value (::std::ostream& o,
         const ::xml_schema::simple_type& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::value (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  value (::std::ostream& o,
         const ::xml_schema::simple_type& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::value (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  value (::std::ostream& o,
         const ::xml_schema::simple_type& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::value (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  value (::xercesc::XMLFormatTarget& t,
         const ::xml_schema::simple_type& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::value (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  value (::xercesc::XMLFormatTarget& t,
         const ::xml_schema::simple_type& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::value (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  value (::xercesc::XMLFormatTarget& t,
         const ::xml_schema::simple_type& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::value (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  value (::xercesc::DOMDocument& d,
         const ::xml_schema::simple_type& s,
         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "value" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "value",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  value (const ::xml_schema::simple_type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "value",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::value (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const IDRef& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // ref
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "ref",
          "http://www.w3.org/ns/prov#",
          e));

      a << i.ref ();
    }
  }

  void
  entity (::std::ostream& o,
          const ::prov::Entity& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::entity (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  entity (::std::ostream& o,
          const ::prov::Entity& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::entity (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  entity (::std::ostream& o,
          const ::prov::Entity& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::entity (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  entity (::xercesc::XMLFormatTarget& t,
          const ::prov::Entity& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::entity (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  entity (::xercesc::XMLFormatTarget& t,
          const ::prov::Entity& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::entity (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  entity (::xercesc::XMLFormatTarget& t,
          const ::prov::Entity& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::entity (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  entity (::xercesc::DOMDocument& d,
          const ::prov::Entity& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "entity" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "entity",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  entity (const ::prov::Entity& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "entity",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::entity (*d, s, f);
    return d;
  }

  void
  activity (::std::ostream& o,
            const ::prov::Activity& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::activity (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  activity (::std::ostream& o,
            const ::prov::Activity& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::activity (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  activity (::std::ostream& o,
            const ::prov::Activity& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::activity (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  activity (::xercesc::XMLFormatTarget& t,
            const ::prov::Activity& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::activity (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  activity (::xercesc::XMLFormatTarget& t,
            const ::prov::Activity& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::activity (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  activity (::xercesc::XMLFormatTarget& t,
            const ::prov::Activity& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::activity (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  activity (::xercesc::DOMDocument& d,
            const ::prov::Activity& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "activity" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "activity",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  activity (const ::prov::Activity& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "activity",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::activity (*d, s, f);
    return d;
  }

  void
  wasGeneratedBy (::std::ostream& o,
                  const ::prov::Generation& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasGeneratedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasGeneratedBy (::std::ostream& o,
                  const ::prov::Generation& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasGeneratedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasGeneratedBy (::std::ostream& o,
                  const ::prov::Generation& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasGeneratedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasGeneratedBy (::xercesc::XMLFormatTarget& t,
                  const ::prov::Generation& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasGeneratedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasGeneratedBy (::xercesc::XMLFormatTarget& t,
                  const ::prov::Generation& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasGeneratedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasGeneratedBy (::xercesc::XMLFormatTarget& t,
                  const ::prov::Generation& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasGeneratedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasGeneratedBy (::xercesc::DOMDocument& d,
                  const ::prov::Generation& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasGeneratedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasGeneratedBy",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasGeneratedBy (const ::prov::Generation& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasGeneratedBy",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasGeneratedBy (*d, s, f);
    return d;
  }

  void
  used (::std::ostream& o,
        const ::prov::Usage& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::used (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  used (::std::ostream& o,
        const ::prov::Usage& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::used (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  used (::std::ostream& o,
        const ::prov::Usage& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::used (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  used (::xercesc::XMLFormatTarget& t,
        const ::prov::Usage& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::used (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  used (::xercesc::XMLFormatTarget& t,
        const ::prov::Usage& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::used (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  used (::xercesc::XMLFormatTarget& t,
        const ::prov::Usage& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::used (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  used (::xercesc::DOMDocument& d,
        const ::prov::Usage& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "used" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "used",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  used (const ::prov::Usage& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "used",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::used (*d, s, f);
    return d;
  }

  void
  wasInformedBy (::std::ostream& o,
                 const ::prov::Communication& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInformedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasInformedBy (::std::ostream& o,
                 const ::prov::Communication& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInformedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInformedBy (::std::ostream& o,
                 const ::prov::Communication& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInformedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInformedBy (::xercesc::XMLFormatTarget& t,
                 const ::prov::Communication& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInformedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasInformedBy (::xercesc::XMLFormatTarget& t,
                 const ::prov::Communication& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInformedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInformedBy (::xercesc::XMLFormatTarget& t,
                 const ::prov::Communication& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInformedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInformedBy (::xercesc::DOMDocument& d,
                 const ::prov::Communication& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasInformedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasInformedBy",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasInformedBy (const ::prov::Communication& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasInformedBy",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasInformedBy (*d, s, f);
    return d;
  }

  void
  wasStartedBy (::std::ostream& o,
                const ::prov::Start& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasStartedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasStartedBy (::std::ostream& o,
                const ::prov::Start& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasStartedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasStartedBy (::std::ostream& o,
                const ::prov::Start& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasStartedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasStartedBy (::xercesc::XMLFormatTarget& t,
                const ::prov::Start& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasStartedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasStartedBy (::xercesc::XMLFormatTarget& t,
                const ::prov::Start& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasStartedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasStartedBy (::xercesc::XMLFormatTarget& t,
                const ::prov::Start& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasStartedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasStartedBy (::xercesc::DOMDocument& d,
                const ::prov::Start& s,
                ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasStartedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasStartedBy",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasStartedBy (const ::prov::Start& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasStartedBy",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasStartedBy (*d, s, f);
    return d;
  }

  void
  wasEndedBy (::std::ostream& o,
              const ::prov::End& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasEndedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasEndedBy (::std::ostream& o,
              const ::prov::End& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasEndedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasEndedBy (::std::ostream& o,
              const ::prov::End& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasEndedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasEndedBy (::xercesc::XMLFormatTarget& t,
              const ::prov::End& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasEndedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasEndedBy (::xercesc::XMLFormatTarget& t,
              const ::prov::End& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasEndedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasEndedBy (::xercesc::XMLFormatTarget& t,
              const ::prov::End& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasEndedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasEndedBy (::xercesc::DOMDocument& d,
              const ::prov::End& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasEndedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasEndedBy",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasEndedBy (const ::prov::End& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasEndedBy",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasEndedBy (*d, s, f);
    return d;
  }

  void
  wasInvalidatedBy (::std::ostream& o,
                    const ::prov::Invalidation& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInvalidatedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasInvalidatedBy (::std::ostream& o,
                    const ::prov::Invalidation& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInvalidatedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInvalidatedBy (::std::ostream& o,
                    const ::prov::Invalidation& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInvalidatedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInvalidatedBy (::xercesc::XMLFormatTarget& t,
                    const ::prov::Invalidation& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInvalidatedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasInvalidatedBy (::xercesc::XMLFormatTarget& t,
                    const ::prov::Invalidation& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInvalidatedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInvalidatedBy (::xercesc::XMLFormatTarget& t,
                    const ::prov::Invalidation& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInvalidatedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInvalidatedBy (::xercesc::DOMDocument& d,
                    const ::prov::Invalidation& s,
                    ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasInvalidatedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasInvalidatedBy",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasInvalidatedBy (const ::prov::Invalidation& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasInvalidatedBy",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasInvalidatedBy (*d, s, f);
    return d;
  }

  void
  wasDerivedFrom (::std::ostream& o,
                  const ::prov::Derivation& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasDerivedFrom (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasDerivedFrom (::std::ostream& o,
                  const ::prov::Derivation& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasDerivedFrom (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasDerivedFrom (::std::ostream& o,
                  const ::prov::Derivation& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasDerivedFrom (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasDerivedFrom (::xercesc::XMLFormatTarget& t,
                  const ::prov::Derivation& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasDerivedFrom (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasDerivedFrom (::xercesc::XMLFormatTarget& t,
                  const ::prov::Derivation& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasDerivedFrom (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasDerivedFrom (::xercesc::XMLFormatTarget& t,
                  const ::prov::Derivation& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasDerivedFrom (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasDerivedFrom (::xercesc::DOMDocument& d,
                  const ::prov::Derivation& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasDerivedFrom" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasDerivedFrom",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasDerivedFrom (const ::prov::Derivation& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasDerivedFrom",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasDerivedFrom (*d, s, f);
    return d;
  }

  void
  wasRevisionOf (::std::ostream& o,
                 const ::prov::Revision& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasRevisionOf (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasRevisionOf (::std::ostream& o,
                 const ::prov::Revision& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasRevisionOf (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasRevisionOf (::std::ostream& o,
                 const ::prov::Revision& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasRevisionOf (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasRevisionOf (::xercesc::XMLFormatTarget& t,
                 const ::prov::Revision& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasRevisionOf (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasRevisionOf (::xercesc::XMLFormatTarget& t,
                 const ::prov::Revision& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasRevisionOf (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasRevisionOf (::xercesc::XMLFormatTarget& t,
                 const ::prov::Revision& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasRevisionOf (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasRevisionOf (::xercesc::DOMDocument& d,
                 const ::prov::Revision& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasRevisionOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasRevisionOf",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasRevisionOf (const ::prov::Revision& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasRevisionOf",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasRevisionOf (*d, s, f);
    return d;
  }

  void
  wasQuotedFrom (::std::ostream& o,
                 const ::prov::Quotation& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasQuotedFrom (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasQuotedFrom (::std::ostream& o,
                 const ::prov::Quotation& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasQuotedFrom (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasQuotedFrom (::std::ostream& o,
                 const ::prov::Quotation& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasQuotedFrom (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasQuotedFrom (::xercesc::XMLFormatTarget& t,
                 const ::prov::Quotation& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasQuotedFrom (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasQuotedFrom (::xercesc::XMLFormatTarget& t,
                 const ::prov::Quotation& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasQuotedFrom (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasQuotedFrom (::xercesc::XMLFormatTarget& t,
                 const ::prov::Quotation& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasQuotedFrom (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasQuotedFrom (::xercesc::DOMDocument& d,
                 const ::prov::Quotation& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasQuotedFrom" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasQuotedFrom",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasQuotedFrom (const ::prov::Quotation& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasQuotedFrom",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasQuotedFrom (*d, s, f);
    return d;
  }

  void
  hadPrimarySource (::std::ostream& o,
                    const ::prov::PrimarySource& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadPrimarySource (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  hadPrimarySource (::std::ostream& o,
                    const ::prov::PrimarySource& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadPrimarySource (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hadPrimarySource (::std::ostream& o,
                    const ::prov::PrimarySource& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadPrimarySource (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hadPrimarySource (::xercesc::XMLFormatTarget& t,
                    const ::prov::PrimarySource& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadPrimarySource (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  hadPrimarySource (::xercesc::XMLFormatTarget& t,
                    const ::prov::PrimarySource& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadPrimarySource (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hadPrimarySource (::xercesc::XMLFormatTarget& t,
                    const ::prov::PrimarySource& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadPrimarySource (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hadPrimarySource (::xercesc::DOMDocument& d,
                    const ::prov::PrimarySource& s,
                    ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "hadPrimarySource" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "hadPrimarySource",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  hadPrimarySource (const ::prov::PrimarySource& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "hadPrimarySource",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::hadPrimarySource (*d, s, f);
    return d;
  }

  void
  agent (::std::ostream& o,
         const ::prov::Agent& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::agent (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  agent (::std::ostream& o,
         const ::prov::Agent& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::agent (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  agent (::std::ostream& o,
         const ::prov::Agent& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::agent (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  agent (::xercesc::XMLFormatTarget& t,
         const ::prov::Agent& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::agent (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  agent (::xercesc::XMLFormatTarget& t,
         const ::prov::Agent& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::agent (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  agent (::xercesc::XMLFormatTarget& t,
         const ::prov::Agent& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::agent (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  agent (::xercesc::DOMDocument& d,
         const ::prov::Agent& s,
         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "agent" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "agent",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  agent (const ::prov::Agent& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "agent",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::agent (*d, s, f);
    return d;
  }

  void
  person (::std::ostream& o,
          const ::prov::Person& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::person (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  person (::std::ostream& o,
          const ::prov::Person& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::person (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  person (::std::ostream& o,
          const ::prov::Person& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::person (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  person (::xercesc::XMLFormatTarget& t,
          const ::prov::Person& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::person (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  person (::xercesc::XMLFormatTarget& t,
          const ::prov::Person& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::person (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  person (::xercesc::XMLFormatTarget& t,
          const ::prov::Person& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::person (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  person (::xercesc::DOMDocument& d,
          const ::prov::Person& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "person" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "person",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  person (const ::prov::Person& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "person",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::person (*d, s, f);
    return d;
  }

  void
  organization (::std::ostream& o,
                const ::prov::Organization& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::organization (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  organization (::std::ostream& o,
                const ::prov::Organization& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::organization (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  organization (::std::ostream& o,
                const ::prov::Organization& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::organization (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  organization (::xercesc::XMLFormatTarget& t,
                const ::prov::Organization& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::organization (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  organization (::xercesc::XMLFormatTarget& t,
                const ::prov::Organization& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::organization (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  organization (::xercesc::XMLFormatTarget& t,
                const ::prov::Organization& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::organization (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  organization (::xercesc::DOMDocument& d,
                const ::prov::Organization& s,
                ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "organization" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "organization",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  organization (const ::prov::Organization& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "organization",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::organization (*d, s, f);
    return d;
  }

  void
  softwareAgent (::std::ostream& o,
                 const ::prov::SoftwareAgent& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::softwareAgent (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  softwareAgent (::std::ostream& o,
                 const ::prov::SoftwareAgent& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::softwareAgent (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  softwareAgent (::std::ostream& o,
                 const ::prov::SoftwareAgent& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::softwareAgent (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  softwareAgent (::xercesc::XMLFormatTarget& t,
                 const ::prov::SoftwareAgent& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::softwareAgent (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  softwareAgent (::xercesc::XMLFormatTarget& t,
                 const ::prov::SoftwareAgent& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::softwareAgent (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  softwareAgent (::xercesc::XMLFormatTarget& t,
                 const ::prov::SoftwareAgent& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::softwareAgent (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  softwareAgent (::xercesc::DOMDocument& d,
                 const ::prov::SoftwareAgent& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "softwareAgent" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "softwareAgent",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  softwareAgent (const ::prov::SoftwareAgent& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "softwareAgent",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::softwareAgent (*d, s, f);
    return d;
  }

  void
  wasAttributedTo (::std::ostream& o,
                   const ::prov::Attribution& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAttributedTo (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasAttributedTo (::std::ostream& o,
                   const ::prov::Attribution& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAttributedTo (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasAttributedTo (::std::ostream& o,
                   const ::prov::Attribution& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAttributedTo (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasAttributedTo (::xercesc::XMLFormatTarget& t,
                   const ::prov::Attribution& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAttributedTo (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasAttributedTo (::xercesc::XMLFormatTarget& t,
                   const ::prov::Attribution& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAttributedTo (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasAttributedTo (::xercesc::XMLFormatTarget& t,
                   const ::prov::Attribution& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAttributedTo (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasAttributedTo (::xercesc::DOMDocument& d,
                   const ::prov::Attribution& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasAttributedTo" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasAttributedTo",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasAttributedTo (const ::prov::Attribution& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasAttributedTo",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasAttributedTo (*d, s, f);
    return d;
  }

  void
  wasAssociatedWith (::std::ostream& o,
                     const ::prov::Association& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAssociatedWith (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasAssociatedWith (::std::ostream& o,
                     const ::prov::Association& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAssociatedWith (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasAssociatedWith (::std::ostream& o,
                     const ::prov::Association& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAssociatedWith (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasAssociatedWith (::xercesc::XMLFormatTarget& t,
                     const ::prov::Association& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAssociatedWith (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasAssociatedWith (::xercesc::XMLFormatTarget& t,
                     const ::prov::Association& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAssociatedWith (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasAssociatedWith (::xercesc::XMLFormatTarget& t,
                     const ::prov::Association& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasAssociatedWith (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasAssociatedWith (::xercesc::DOMDocument& d,
                     const ::prov::Association& s,
                     ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasAssociatedWith" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasAssociatedWith",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasAssociatedWith (const ::prov::Association& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasAssociatedWith",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasAssociatedWith (*d, s, f);
    return d;
  }

  void
  actedOnBehalfOf (::std::ostream& o,
                   const ::prov::Delegation& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::actedOnBehalfOf (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  actedOnBehalfOf (::std::ostream& o,
                   const ::prov::Delegation& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::actedOnBehalfOf (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  actedOnBehalfOf (::std::ostream& o,
                   const ::prov::Delegation& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::actedOnBehalfOf (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  actedOnBehalfOf (::xercesc::XMLFormatTarget& t,
                   const ::prov::Delegation& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::actedOnBehalfOf (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  actedOnBehalfOf (::xercesc::XMLFormatTarget& t,
                   const ::prov::Delegation& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::actedOnBehalfOf (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  actedOnBehalfOf (::xercesc::XMLFormatTarget& t,
                   const ::prov::Delegation& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::actedOnBehalfOf (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  actedOnBehalfOf (::xercesc::DOMDocument& d,
                   const ::prov::Delegation& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "actedOnBehalfOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "actedOnBehalfOf",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  actedOnBehalfOf (const ::prov::Delegation& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "actedOnBehalfOf",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::actedOnBehalfOf (*d, s, f);
    return d;
  }

  void
  wasInfluencedBy (::std::ostream& o,
                   const ::prov::Influence& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInfluencedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasInfluencedBy (::std::ostream& o,
                   const ::prov::Influence& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInfluencedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInfluencedBy (::std::ostream& o,
                   const ::prov::Influence& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInfluencedBy (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInfluencedBy (::xercesc::XMLFormatTarget& t,
                   const ::prov::Influence& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInfluencedBy (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  wasInfluencedBy (::xercesc::XMLFormatTarget& t,
                   const ::prov::Influence& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInfluencedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInfluencedBy (::xercesc::XMLFormatTarget& t,
                   const ::prov::Influence& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::wasInfluencedBy (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  wasInfluencedBy (::xercesc::DOMDocument& d,
                   const ::prov::Influence& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "wasInfluencedBy" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "wasInfluencedBy",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  wasInfluencedBy (const ::prov::Influence& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "wasInfluencedBy",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::wasInfluencedBy (*d, s, f);
    return d;
  }

  void
  bundle (::std::ostream& o,
          const ::prov::Bundle& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::bundle (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  bundle (::std::ostream& o,
          const ::prov::Bundle& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::bundle (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  bundle (::std::ostream& o,
          const ::prov::Bundle& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::bundle (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  bundle (::xercesc::XMLFormatTarget& t,
          const ::prov::Bundle& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::bundle (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  bundle (::xercesc::XMLFormatTarget& t,
          const ::prov::Bundle& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::bundle (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  bundle (::xercesc::XMLFormatTarget& t,
          const ::prov::Bundle& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::bundle (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  bundle (::xercesc::DOMDocument& d,
          const ::prov::Bundle& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "bundle" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "bundle",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  bundle (const ::prov::Bundle& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "bundle",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::bundle (*d, s, f);
    return d;
  }

  void
  specializationOf (::std::ostream& o,
                    const ::prov::Specialization& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::specializationOf (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  specializationOf (::std::ostream& o,
                    const ::prov::Specialization& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::specializationOf (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  specializationOf (::std::ostream& o,
                    const ::prov::Specialization& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::specializationOf (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  specializationOf (::xercesc::XMLFormatTarget& t,
                    const ::prov::Specialization& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::specializationOf (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  specializationOf (::xercesc::XMLFormatTarget& t,
                    const ::prov::Specialization& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::specializationOf (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  specializationOf (::xercesc::XMLFormatTarget& t,
                    const ::prov::Specialization& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::specializationOf (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  specializationOf (::xercesc::DOMDocument& d,
                    const ::prov::Specialization& s,
                    ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "specializationOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "specializationOf",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  specializationOf (const ::prov::Specialization& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "specializationOf",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::specializationOf (*d, s, f);
    return d;
  }

  void
  alternateOf (::std::ostream& o,
               const ::prov::Alternate& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::alternateOf (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  alternateOf (::std::ostream& o,
               const ::prov::Alternate& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::alternateOf (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  alternateOf (::std::ostream& o,
               const ::prov::Alternate& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::alternateOf (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  alternateOf (::xercesc::XMLFormatTarget& t,
               const ::prov::Alternate& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::alternateOf (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  alternateOf (::xercesc::XMLFormatTarget& t,
               const ::prov::Alternate& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::alternateOf (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  alternateOf (::xercesc::XMLFormatTarget& t,
               const ::prov::Alternate& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::alternateOf (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  alternateOf (::xercesc::DOMDocument& d,
               const ::prov::Alternate& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "alternateOf" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "alternateOf",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  alternateOf (const ::prov::Alternate& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "alternateOf",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::alternateOf (*d, s, f);
    return d;
  }

  void
  hadMember (::std::ostream& o,
             const ::prov::Membership& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadMember (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  hadMember (::std::ostream& o,
             const ::prov::Membership& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadMember (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hadMember (::std::ostream& o,
             const ::prov::Membership& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadMember (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hadMember (::xercesc::XMLFormatTarget& t,
             const ::prov::Membership& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadMember (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  hadMember (::xercesc::XMLFormatTarget& t,
             const ::prov::Membership& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadMember (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hadMember (::xercesc::XMLFormatTarget& t,
             const ::prov::Membership& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::hadMember (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hadMember (::xercesc::DOMDocument& d,
             const ::prov::Membership& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "hadMember" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "hadMember",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  hadMember (const ::prov::Membership& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "hadMember",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::hadMember (*d, s, f);
    return d;
  }

  void
  collection (::std::ostream& o,
              const ::prov::Collection& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::collection (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  collection (::std::ostream& o,
              const ::prov::Collection& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::collection (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  collection (::std::ostream& o,
              const ::prov::Collection& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::collection (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  collection (::xercesc::XMLFormatTarget& t,
              const ::prov::Collection& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::collection (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  collection (::xercesc::XMLFormatTarget& t,
              const ::prov::Collection& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::collection (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  collection (::xercesc::XMLFormatTarget& t,
              const ::prov::Collection& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::collection (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  collection (::xercesc::DOMDocument& d,
              const ::prov::Collection& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "collection" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "collection",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  collection (const ::prov::Collection& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "collection",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::collection (*d, s, f);
    return d;
  }

  void
  emptyCollection (::std::ostream& o,
                   const ::prov::EmptyCollection& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::emptyCollection (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  emptyCollection (::std::ostream& o,
                   const ::prov::EmptyCollection& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::emptyCollection (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  emptyCollection (::std::ostream& o,
                   const ::prov::EmptyCollection& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::emptyCollection (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  emptyCollection (::xercesc::XMLFormatTarget& t,
                   const ::prov::EmptyCollection& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::emptyCollection (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  emptyCollection (::xercesc::XMLFormatTarget& t,
                   const ::prov::EmptyCollection& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::emptyCollection (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  emptyCollection (::xercesc::XMLFormatTarget& t,
                   const ::prov::EmptyCollection& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::emptyCollection (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  emptyCollection (::xercesc::DOMDocument& d,
                   const ::prov::EmptyCollection& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "emptyCollection" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "emptyCollection",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  emptyCollection (const ::prov::EmptyCollection& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "emptyCollection",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::emptyCollection (*d, s, f);
    return d;
  }

  void
  plan (::std::ostream& o,
        const ::prov::Plan& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::plan (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  plan (::std::ostream& o,
        const ::prov::Plan& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::plan (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  plan (::std::ostream& o,
        const ::prov::Plan& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::plan (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  plan (::xercesc::XMLFormatTarget& t,
        const ::prov::Plan& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::plan (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  plan (::xercesc::XMLFormatTarget& t,
        const ::prov::Plan& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::plan (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  plan (::xercesc::XMLFormatTarget& t,
        const ::prov::Plan& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::plan (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  plan (::xercesc::DOMDocument& d,
        const ::prov::Plan& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "plan" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "plan",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  plan (const ::prov::Plan& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "plan",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::plan (*d, s, f);
    return d;
  }

  void
  document (::std::ostream& o,
            const ::prov::Document& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::document (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  document (::std::ostream& o,
            const ::prov::Document& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::document (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  document (::std::ostream& o,
            const ::prov::Document& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::document (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  document (::xercesc::XMLFormatTarget& t,
            const ::prov::Document& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::document (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  document (::xercesc::XMLFormatTarget& t,
            const ::prov::Document& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::document (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  document (::xercesc::XMLFormatTarget& t,
            const ::prov::Document& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::document (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  document (::xercesc::DOMDocument& d,
            const ::prov::Document& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "document" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "document",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  document (const ::prov::Document& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "document",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::document (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const Document& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // entity
    //
    for (Document::entity_const_iterator
         b (i.entity ().begin ()), n (i.entity ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entity",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // activity
    //
    for (Document::activity_const_iterator
         b (i.activity ().begin ()), n (i.activity ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "activity",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasGeneratedBy
    //
    for (Document::wasGeneratedBy_const_iterator
         b (i.wasGeneratedBy ().begin ()), n (i.wasGeneratedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasGeneratedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // used
    //
    for (Document::used_const_iterator
         b (i.used ().begin ()), n (i.used ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "used",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasInformedBy
    //
    for (Document::wasInformedBy_const_iterator
         b (i.wasInformedBy ().begin ()), n (i.wasInformedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasInformedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasStartedBy
    //
    for (Document::wasStartedBy_const_iterator
         b (i.wasStartedBy ().begin ()), n (i.wasStartedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasStartedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasEndedBy
    //
    for (Document::wasEndedBy_const_iterator
         b (i.wasEndedBy ().begin ()), n (i.wasEndedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasEndedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasInvalidatedBy
    //
    for (Document::wasInvalidatedBy_const_iterator
         b (i.wasInvalidatedBy ().begin ()), n (i.wasInvalidatedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasInvalidatedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasDerivedFrom
    //
    for (Document::wasDerivedFrom_const_iterator
         b (i.wasDerivedFrom ().begin ()), n (i.wasDerivedFrom ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasDerivedFrom",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasRevisionOf
    //
    for (Document::wasRevisionOf_const_iterator
         b (i.wasRevisionOf ().begin ()), n (i.wasRevisionOf ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasRevisionOf",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasQuotedFrom
    //
    for (Document::wasQuotedFrom_const_iterator
         b (i.wasQuotedFrom ().begin ()), n (i.wasQuotedFrom ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasQuotedFrom",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // hadPrimarySource
    //
    for (Document::hadPrimarySource_const_iterator
         b (i.hadPrimarySource ().begin ()), n (i.hadPrimarySource ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hadPrimarySource",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // agent
    //
    for (Document::agent_const_iterator
         b (i.agent ().begin ()), n (i.agent ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "agent",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // person
    //
    for (Document::person_const_iterator
         b (i.person ().begin ()), n (i.person ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "person",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // organization
    //
    for (Document::organization_const_iterator
         b (i.organization ().begin ()), n (i.organization ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "organization",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // softwareAgent
    //
    for (Document::softwareAgent_const_iterator
         b (i.softwareAgent ().begin ()), n (i.softwareAgent ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "softwareAgent",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasAttributedTo
    //
    for (Document::wasAttributedTo_const_iterator
         b (i.wasAttributedTo ().begin ()), n (i.wasAttributedTo ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasAttributedTo",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasAssociatedWith
    //
    for (Document::wasAssociatedWith_const_iterator
         b (i.wasAssociatedWith ().begin ()), n (i.wasAssociatedWith ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasAssociatedWith",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // actedOnBehalfOf
    //
    for (Document::actedOnBehalfOf_const_iterator
         b (i.actedOnBehalfOf ().begin ()), n (i.actedOnBehalfOf ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "actedOnBehalfOf",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // wasInfluencedBy
    //
    for (Document::wasInfluencedBy_const_iterator
         b (i.wasInfluencedBy ().begin ()), n (i.wasInfluencedBy ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wasInfluencedBy",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // bundle
    //
    for (Document::bundle_const_iterator
         b (i.bundle ().begin ()), n (i.bundle ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "bundle",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // specializationOf
    //
    for (Document::specializationOf_const_iterator
         b (i.specializationOf ().begin ()), n (i.specializationOf ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "specializationOf",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // alternateOf
    //
    for (Document::alternateOf_const_iterator
         b (i.alternateOf ().begin ()), n (i.alternateOf ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "alternateOf",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // collection
    //
    for (Document::collection_const_iterator
         b (i.collection ().begin ()), n (i.collection ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "collection",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // emptyCollection
    //
    for (Document::emptyCollection_const_iterator
         b (i.emptyCollection ().begin ()), n (i.emptyCollection ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "emptyCollection",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // hadMember
    //
    for (Document::hadMember_const_iterator
         b (i.hadMember ().begin ()), n (i.hadMember ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hadMember",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // plan
    //
    for (Document::plan_const_iterator
         b (i.plan ().begin ()), n (i.plan ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "plan",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // other
    //
    for (Document::other_const_iterator
         b (i.other ().begin ()), n (i.other ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "other",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // internalElement
    //
    for (Document::internalElement_const_iterator
         b (i.internalElement ().begin ()), n (i.internalElement ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "internalElement",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }

    // bundleContent
    //
    for (Document::bundleContent_const_iterator
         b (i.bundleContent ().begin ()), n (i.bundleContent ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "bundleContent",
          "http://www.w3.org/ns/prov#",
          e));

      s << *b;
    }
  }

  void
  internalElement (::std::ostream& o,
                   const ::xml_schema::type& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::internalElement (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  internalElement (::std::ostream& o,
                   const ::xml_schema::type& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::internalElement (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  internalElement (::std::ostream& o,
                   const ::xml_schema::type& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::internalElement (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  internalElement (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::type& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::internalElement (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  internalElement (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::type& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::internalElement (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  internalElement (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::type& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::internalElement (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  internalElement (::xercesc::DOMDocument& d,
                   const ::xml_schema::type& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "internalElement" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "internalElement",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  internalElement (const ::xml_schema::type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "internalElement",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::internalElement (*d, s, f);
    return d;
  }

  void
  other (::std::ostream& o,
         const ::prov::Other& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::other (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  other (::std::ostream& o,
         const ::prov::Other& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::other (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  other (::std::ostream& o,
         const ::prov::Other& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::other (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  other (::xercesc::XMLFormatTarget& t,
         const ::prov::Other& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::other (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  other (::xercesc::XMLFormatTarget& t,
         const ::prov::Other& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::other (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  other (::xercesc::XMLFormatTarget& t,
         const ::prov::Other& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::prov::other (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  other (::xercesc::DOMDocument& d,
         const ::prov::Other& s,
         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "other" &&
        n.namespace_ () == "http://www.w3.org/ns/prov#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "other",
        "http://www.w3.org/ns/prov#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  other (const ::prov::Other& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "other",
        "http://www.w3.org/ns/prov#",
        m, f));

    ::prov::other (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const Other& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

